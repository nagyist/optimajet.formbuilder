!function(Q,I){"object"==typeof exports&&"object"==typeof module?module.exports=I(require("react"),require("semantic-ui-react"),require("jquery"),require("json5"),require("draft-js"),require("moment"),require("react-fast-compare"),require("uuid"),require("react-dom"),require("clone"),require("reflux"),require("react-data-grid"),require("react-grid-layout"),require("draft-convert"),require("numeral"),require("react-datepicker"),require("react-dropzone-component"),require("react-number-format"),require("react-slick")):"function"==typeof define&&define.amd?define(["react","semantic-ui-react","jquery","json5","draft-js","moment","react-fast-compare","uuid","react-dom","clone","reflux","react-data-grid","react-grid-layout","draft-convert","numeral","react-datepicker","react-dropzone-component","react-number-format","react-slick"],I):"object"==typeof exports?exports["optimajet-form"]=I(require("react"),require("semantic-ui-react"),require("jquery"),require("json5"),require("draft-js"),require("moment"),require("react-fast-compare"),require("uuid"),require("react-dom"),require("clone"),require("reflux"),require("react-data-grid"),require("react-grid-layout"),require("draft-convert"),require("numeral"),require("react-datepicker"),require("react-dropzone-component"),require("react-number-format"),require("react-slick")):Q["optimajet-form"]=I(Q.react,Q["semantic-ui-react"],Q.jquery,Q.json5,Q["draft-js"],Q.moment,Q["react-fast-compare"],Q.uuid,Q["react-dom"],Q.clone,Q.reflux,Q["react-data-grid"],Q["react-grid-layout"],Q["draft-convert"],Q.numeral,Q["react-datepicker"],Q["react-dropzone-component"],Q["react-number-format"],Q["react-slick"])}(window,function(__WEBPACK_EXTERNAL_MODULE__0__,__WEBPACK_EXTERNAL_MODULE__1__,__WEBPACK_EXTERNAL_MODULE__2__,__WEBPACK_EXTERNAL_MODULE__3__,__WEBPACK_EXTERNAL_MODULE__5__,__WEBPACK_EXTERNAL_MODULE__6__,__WEBPACK_EXTERNAL_MODULE__7__,__WEBPACK_EXTERNAL_MODULE__8__,__WEBPACK_EXTERNAL_MODULE__9__,__WEBPACK_EXTERNAL_MODULE__10__,__WEBPACK_EXTERNAL_MODULE__12__,__WEBPACK_EXTERNAL_MODULE__13__,__WEBPACK_EXTERNAL_MODULE__15__,__WEBPACK_EXTERNAL_MODULE__16__,__WEBPACK_EXTERNAL_MODULE__17__,__WEBPACK_EXTERNAL_MODULE__18__,__WEBPACK_EXTERNAL_MODULE__19__,__WEBPACK_EXTERNAL_MODULE__20__,__WEBPACK_EXTERNAL_MODULE__21__){return d=[function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__0__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcHRpbWFqZXQtZm9ybS9leHRlcm5hbCBcInJlYWN0XCI/NTg4ZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18wX187Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n")},function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__1__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcHRpbWFqZXQtZm9ybS9leHRlcm5hbCBcInNlbWFudGljLXVpLXJlYWN0XCI/NWM4MiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xX187Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n")},function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__2__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcHRpbWFqZXQtZm9ybS9leHRlcm5hbCBcImpxdWVyeVwiPzhmOGEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMl9fOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n")},function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__3__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcHRpbWFqZXQtZm9ybS9leHRlcm5hbCBcImpzb241XCI/ZTgxMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18zX187Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n")},function(module,exports){eval('function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction initDefaultState(_ref) {\n  var model = _ref.model,\n      data = _ref.data;\n  if (!Array.isArray(model) || data === undefined) return;\n\n  for (var i = 0; i < model.length; i++) {\n    var key = model[i].propertyName ? model[i].propertyName : model[i].key;\n\n    if (model[i]["defaultValue"] && !data[key]) {\n      data[key] = model[i]["defaultValue"];\n    }\n\n    if (Array.isArray(model[i].children)) {\n      initDefaultState({\n        model: model[i].children,\n        data: data\n      });\n    }\n\n    if (model[i].placeholders !== undefined) {\n      for (var ps in model[i].placeholders) {\n        initDefaultState({\n          model: model[i].placeholders[ps],\n          data: data\n        });\n      }\n    }\n\n    if (model[i]["data-buildertype"] === "customblock" && model[i].sourceType === "source" && model[i].source != undefined) {\n      var children = JSON5.parse(model[i].source);\n      initDefaultState({\n        model: children,\n        data: data\n      });\n    }\n  }\n}\n\nfunction initDefaultStateFormUrl(data) {\n  if (data === undefined) data = {};\n\n  var urlParam = function urlParam(name) {\n    var results = new RegExp(\'[\\?&]\' + name + \'=([^&#]*)\').exec(window.location.href);\n\n    if (results == null) {\n      return null;\n    } else {\n      return decodeURI(results[1]) || 0;\n    }\n  };\n\n  var defaultvalues = urlParam("defaultvalues");\n\n  if (defaultvalues) {\n    var defaultvaluesJson = undefined;\n\n    try {\n      defaultvaluesJson = JSON5.parse(defaultvalues);\n    } catch (ex) {}\n\n    if (defaultvaluesJson && _typeof(defaultvaluesJson) === \'object\') {\n      for (var p in defaultvaluesJson) {\n        if (defaultvaluesJson[p] !== undefined) data[p] = defaultvaluesJson[p];\n      }\n    }\n  }\n\n  return data;\n}\n\nfunction checkConditions(_ref2) {\n  var model = _ref2.model,\n      data = _ref2.data;\n  var res = {\n    hideControls: [],\n    readOnlyControls: []\n  };\n\n  if (!model || !data) {\n    return res;\n  }\n\n  for (var i = 0; i < model.length; i++) {\n    var condition = model[i]["other-visibleConition"];\n\n    if (condition !== undefined && condition !== "") {\n      var args = \'data\';\n      var body = \'return \' + condition;\n\n      if (!new Function(args, body)(data)) {\n        res.hideControls.push(model[i].key);\n      }\n    }\n\n    condition = model[i]["other-readOnlyConition"];\n\n    if (condition !== undefined && condition !== "") {\n      var _args = \'data\';\n\n      var _body = \'return \' + condition;\n\n      if (new Function(_args, _body)(data)) {\n        res.readOnlyControls.push(model[i].key);\n      }\n    }\n\n    if (Array.isArray(model[i].children)) {\n      var c = checkConditions({\n        model: model[i].children,\n        data: data\n      });\n      res = {\n        hideControls: res.hideControls.concat(c.hideControls),\n        readOnlyControls: res.readOnlyControls.concat(c.readOnlyControls)\n      };\n    }\n\n    if (model[i].placeholders !== undefined) {\n      for (var ps in model[i].placeholders) {\n        var _c = checkConditions({\n          model: model[i].placeholders[ps],\n          data: data\n        });\n\n        res = {\n          hideControls: res.hideControls.concat(_c.hideControls),\n          readOnlyControls: res.readOnlyControls.concat(_c.readOnlyControls)\n        };\n      }\n    }\n\n    if (model[i]["data-buildertype"] === "customblock" && model[i].sourceType === "source" && model[i].source != undefined) {\n      var children = JSON5.parse(model[i].source);\n\n      var _c2 = checkConditions({\n        model: children,\n        data: data\n      });\n\n      res = {\n        hideControls: res.hideControls.concat(_c2.hideControls),\n        readOnlyControls: res.readOnlyControls.concat(_c2.readOnlyControls)\n      };\n    }\n  }\n\n  return res;\n}\n\nfunction validate(_ref3) {\n  var data = _ref3.data,\n      model = _ref3.model;\n  var result = {\n    valid: true,\n    errors: {}\n  };\n  var controls = getControlsForValidate(model, data);\n\n  for (var i = 0; i < (controls === null || controls === void 0 ? void 0 : controls.length); i++) {\n    var key = controls[i].propertyName ? controls[i].propertyName : controls[i].key;\n    var error = validateControl(controls[i], data ? data[key] : undefined, data);\n\n    if (error) {\n      result.errors[key] = error;\n      result.valid = false;\n    }\n  }\n\n  return result;\n}\n\nfunction getControlsForValidate(model, data) {\n  var controls = [];\n\n  var _checkConditions = checkConditions({\n    model: model,\n    data: data\n  }),\n      hideControls = _checkConditions.hideControls;\n\n  model === null || model === void 0 ? void 0 : model.forEach(function (control) {\n    if (hideControls.includes(control.key)) return;\n\n    if (control["other-required"] === true || control["data-buildertype"] === "collectioneditor" || control["other-customValidation"] !== undefined && control["other-customValidation"] !== "") {\n      controls.push(control);\n    }\n\n    if (control.children !== undefined && control.children.length > 0) {\n      var cs = getControlsForValidate(control.children, data);\n      controls = controls.concat(cs);\n    }\n\n    if (control.placeholders !== undefined) {\n      for (var ps in control.placeholders) {\n        var _cs = getControlsForValidate(control.placeholders[ps], data);\n\n        controls = controls.concat(_cs);\n      }\n    }\n\n    if (control["data-buildertype"] === "customblock" && control.sourceType === "source" && control.source != undefined) {\n      var children = JSON5.parse(control.source);\n\n      var _cs2 = getControlsForValidate(children, data);\n\n      controls = controls.concat(_cs2);\n    }\n  });\n  return controls;\n}\n\nfunction isEmptyArray(control, value) {\n  var type = control["data-buildertype"];\n  var isArrayComponent = type === "collectioneditor" || type === "files" || type === "dropdown" && control.multiple;\n  return isArrayComponent && Array.isArray(value) && value.length === 0;\n}\n\nfunction validateControl(control, value, data) {\n  var error = undefined;\n\n  if (control["data-buildertype"] === "collectioneditor" && control.placeholders !== undefined) {\n    var errors = [];\n    value === null || value === void 0 ? void 0 : value.forEach(function (row, index) {\n      errors.push({});\n      var errRow = errors[index];\n\n      var _loop = function _loop(ps) {\n        var cs = getControlsForValidate(control.placeholders[ps], data);\n        cs === null || cs === void 0 ? void 0 : cs.forEach(function (nestedControl) {\n          var val = row[ps];\n          errRow[ps] = validateControl(nestedControl, val, data);\n        });\n      };\n\n      for (var ps in control.placeholders) {\n        _loop(ps);\n      }\n    });\n    return errors;\n  }\n\n  if (control["other-required"] === true && (value === undefined || value === null || value === \'\' || isEmptyArray(control, value))) {\n    error = \'This field is required!\';\n  } else if (control["other-customValidation"] !== undefined && control["other-customValidation"] !== "") {\n    var args = \'value, data\';\n    var body = \'return \' + control["other-customValidation"];\n    var isValid = new Function(args, body)(value, data);\n\n    if (typeof isValid === \'boolean\') {\n      if (isValid === false) {\n        error = true;\n      }\n    } else {\n      error = isValid;\n    }\n  }\n\n  return error;\n}\n\nfunction updateEventsFormat(events) {\n  if (events.updated) return events;\n\n  var isOldFormat = function isOldFormat(event) {\n    return !!(event.actions || event.parameters || event.targets);\n  };\n\n  Object.keys(events).forEach(function (eventName) {\n    var e = events[eventName];\n\n    if (isOldFormat(e)) {\n      var eventParams = {\n        actions: e.actions || [],\n        parameters: e.parameters || [],\n        targets: e.targets || []\n      };\n      events[eventName] = {\n        active: e.active || false,\n        triggers: e.actions ? [eventParams] : undefined\n      };\n    }\n  });\n  events.updated = true;\n  return events;\n}\n\nmodule.exports = {\n  initDefaultState: initDefaultState,\n  initDefaultStateFormUrl: initDefaultStateFormUrl,\n  validate: validate,\n  checkConditions: checkConditions,\n  updateEventsFormat: updateEventsFormat\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n')},function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__5__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcHRpbWFqZXQtZm9ybS9leHRlcm5hbCBcImRyYWZ0LWpzXCI/ZTQ0NiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX181X187Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n")},function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__6__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcHRpbWFqZXQtZm9ybS9leHRlcm5hbCBcIm1vbWVudFwiP2JkNzYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fNl9fOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6\n")},function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__7__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcHRpbWFqZXQtZm9ybS9leHRlcm5hbCBcInJlYWN0LWZhc3QtY29tcGFyZVwiP2RjMzQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fN19fOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7\n")},function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__8__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcHRpbWFqZXQtZm9ybS9leHRlcm5hbCBcInV1aWRcIj8zNzEyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjguanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzhfXzsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8\n")},function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__9__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcHRpbWFqZXQtZm9ybS9leHRlcm5hbCBcInJlYWN0LWRvbVwiPzVlOWEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fOV9fOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9\n")},function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__10__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcHRpbWFqZXQtZm9ybS9leHRlcm5hbCBcImNsb25lXCI/NTZhOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIxMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMTBfXzsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///10\n")},function(module,exports,__webpack_require__){eval("// the whatwg-fetch polyfill installs the fetch() function\n// on the global object (window or self)\n//\n// Return that as the export for use in Webpack, Browserify etc.\n__webpack_require__(23);\nmodule.exports = self.fetch.bind(self);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcHRpbWFqZXQtZm9ybS8uLi9vcHRpbWFqZXQtYnVpbGRlci1zaGFyZWQvbm9kZV9tb2R1bGVzL2lzb21vcnBoaWMtZmV0Y2gvZmV0Y2gtbnBtLWJyb3dzZXJpZnkuanM/NTI1NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFPLENBQUMsRUFBYztBQUN0QiIsImZpbGUiOiIxMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRoZSB3aGF0d2ctZmV0Y2ggcG9seWZpbGwgaW5zdGFsbHMgdGhlIGZldGNoKCkgZnVuY3Rpb25cbi8vIG9uIHRoZSBnbG9iYWwgb2JqZWN0ICh3aW5kb3cgb3Igc2VsZilcbi8vXG4vLyBSZXR1cm4gdGhhdCBhcyB0aGUgZXhwb3J0IGZvciB1c2UgaW4gV2VicGFjaywgQnJvd3NlcmlmeSBldGMuXG5yZXF1aXJlKCd3aGF0d2ctZmV0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gc2VsZi5mZXRjaC5iaW5kKHNlbGYpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///11\n")},function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__12__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcHRpbWFqZXQtZm9ybS9leHRlcm5hbCBcInJlZmx1eFwiP2I5MmEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzEyX187Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///12\n")},function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__13__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcHRpbWFqZXQtZm9ybS9leHRlcm5hbCBcInJlYWN0LWRhdGEtZ3JpZFwiPzdhN2QiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzEzX187Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///13\n")},function(module,exports,__webpack_require__){eval('!function(V,e){if(true)module.exports=e(__webpack_require__(0));else { var n, t; }}(this,function(V){return function(V){function e(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return V[n].call(r.exports,r,r.exports,e),r.l=!0,r.exports}var t={};return e.m=V,e.c=t,e.d=function(V,t,n){e.o(V,t)||Object.defineProperty(V,t,{configurable:!1,enumerable:!0,get:n})},e.n=function(V){var t=V&&V.__esModule?function(){return V.default}:function(){return V};return e.d(t,"a",t),t},e.o=function(V,e){return Object.prototype.hasOwnProperty.call(V,e)},e.p="",e(e.s=3)}([function(e,t){e.exports=V},function(V,e,t){V.exports=t(7)()},function(V,e,t){!function(e,t){V.exports=t()}(0,function(){return function(V){function e(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return V[n].call(r.exports,r,r.exports,e),r.l=!0,r.exports}var t={};return e.m=V,e.c=t,e.d=function(V,t,n){e.o(V,t)||Object.defineProperty(V,t,{configurable:!1,enumerable:!0,get:n})},e.n=function(V){var t=V&&V.__esModule?function(){return V.default}:function(){return V};return e.d(t,"a",t),t},e.o=function(V,e){return Object.prototype.hasOwnProperty.call(V,e)},e.p="",e(e.s=1)}([function(V,e,t){"use strict";function n(V,e,t){return e in V?Object.defineProperty(V,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):V[e]=t,V}t.d(e,"e",function(){return i}),t.d(e,"a",function(){return o}),t.d(e,"f",function(){return a}),t.d(e,"c",function(){return A}),t.d(e,"b",function(){return c}),t.d(e,"d",function(){return u});var r,i=["user","environment"],o={USER:"user",ENVIRONMENT:"environment"},a=["jpg","png"],A={PNG:"png",JPG:"jpg"},c=(r={},n(r,"jpg","image/jpeg"),n(r,"png","image/png"),r),u={audio:!1,video:!0}},function(V,e,t){V.exports=t(2)},function(V,e,t){"use strict";function n(V,e){if(!(V instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0}),t.d(e,"FACING_MODES",function(){return c}),t.d(e,"IMAGE_TYPES",function(){return u});var r=t(3),i=t(5),o=function(){function V(V,e){for(var t=0;t<e.length;t++){var n=e[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(V,n.key,n)}}return function(e,t,n){return t&&V(e.prototype,t),n&&V(e,n),e}}(),a=r.a.IMAGE_TYPES.PNG,A=function(){function V(e){n(this,V),this.videoElement=e,this.stream=null,this.numberOfMaxResolutionTry=1,this.settings=null,this.inputVideoDeviceInfos=[],this.windowURL=r.a.getWindowURL(),this.mediaDevices=r.a.getNavigatorMediaDevices()}return o(V,[{key:"_getStreamDevice",value:function(V,e){var t=this;return new Promise(function(n,i){var o=r.a.getIdealConstraints(V,e);t.mediaDevices.getUserMedia(o).then(function(V){t._gotStream(V),t._getInputVideoDeviceInfosPromise().then(function(V){t.inputVideoDeviceInfos=V}).catch(function(){}).then(function(){n(V)})}).catch(function(V){i(V)})})}},{key:"_getStreamDeviceMaxResolution",value:function(V){var e=this,t=r.a.getMaxResolutionConstraints(V,this.numberOfMaxResolutionTry);if(null==t){var n={};return this._getStreamDevice(V,n)}return new Promise(function(n,r){e.mediaDevices.getUserMedia(t).then(function(V){e._gotStream(V),e._getInputVideoDeviceInfosPromise().then(function(V){e.inputVideoDeviceInfos=V}).catch(function(){}).then(function(){n(V)})}).catch(function(t){setTimeout(function(){e.numberOfMaxResolutionTry+=1,e._getStreamDeviceMaxResolution(V).catch(function(){r(t)})},20)})})}},{key:"_setVideoSrc",value:function(V){if("srcObject"in this.videoElement)this.videoElement.srcObject=V;else{var e=this.windowURL.createObjectURL(V);this.videoElement.src=e}}},{key:"_setSettings",value:function(V){this.settings=null;var e=V&&V.getTracks?V.getTracks():[];e.length>0&&e[0].getSettings&&(this.settings=e[0].getSettings())}},{key:"_getInputVideoDeviceInfosPromise",value:function(){var V=this;return new Promise(function(e,t){var n=[];V.mediaDevices.enumerateDevices().then(function(V){V.forEach(function(V){"videoinput"===V.kind&&n.push(V)}),e(n)}).catch(function(V){t(V)})})}},{key:"_gotStream",value:function(V){this.stream=V,this._setSettings(V),this._setVideoSrc(V)}},{key:"getCameraSettings",value:function(){return this.settings}},{key:"getInputVideoDeviceInfos",value:function(){return this.inputVideoDeviceInfos}},{key:"startCamera",value:function(V,e){var t=this;return this.stopCamera().then(function(){}).catch(function(){}).then(function(){return t._getStreamDevice(V,e)})}},{key:"startCameraMaxResolution",value:function(){var V=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return this.stopCamera().then(function(){}).catch(function(){}).then(function(){return V._getStreamDeviceMaxResolution(e)})}},{key:"getDataUri",value:function(V){var e={sizeFactor:void 0===V.sizeFactor?i.c:V.sizeFactor,imageType:void 0===V.imageType?a:V.imageType,imageCompression:void 0===V.imageCompression?i.a:V.imageCompression,isImageMirror:void 0===V.isImageMirror?i.b:V.isImageMirror};return r.a.getDataUri(this.videoElement,e)}},{key:"stopCamera",value:function(){var V=this;return new Promise(function(e,t){V.stream&&(V.stream.getTracks().forEach(function(V){V.stop()}),V.videoElement.src="",V.stream=null,V._setSettings(null),e()),t(Error("no stream to stop!"))})}}]),V}(),c=r.a.FACING_MODES,u=r.a.IMAGE_TYPES;e.default=A},function(V,e,t){"use strict";function n(V,e){if(!(V instanceof e))throw new TypeError("Cannot call a class as a function")}var r=t(4),i=t(0),o=function(){function V(V,e){for(var t=0;t<e.length;t++){var n=e[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(V,n.key,n)}}return function(e,t,n){return t&&V(e.prototype,t),n&&V(e,n),e}}(),a=function(){function V(){n(this,V)}return o(V,null,[{key:"getDataUri",value:function(V,e){var t=e.sizeFactor,n=e.imageType,i=e.imageCompression,o=e.isImageMirror,a=V.videoWidth,A=V.videoHeight,c=Object(r.b)(a,A,t),u=c.imageWidth,s=c.imageHeight,f=document.createElement("canvas");f.width=u,f.height=s;var l=f.getContext("2d");return o&&l.setTransform(-1,0,0,1,f.width,0),l.drawImage(V,0,0,u,s),Object(r.a)(f,n,i)}},{key:"getWindowURL",value:function(){return window.URL||window.webkitURL||window.mozURL||window.msURL}},{key:"getNavigatorMediaDevices",value:function(){var V=null,e=!(!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia),t=!(!navigator.mozGetUserMedia&&!navigator.webkitGetUserMedia);if(e)V=navigator.mediaDevices;else if(t){var n=navigator.mozGetUserMedia||navigator.webkitGetUserMedia,r={getUserMedia:function(V){return new Promise(function(e,t){n.call(navigator,V,e,t)})}};V=Object.assign(n,r)}return V}},{key:"isSupportedFacingMode",value:function(){return V.getNavigatorMediaDevices().getSupportedConstraints().facingMode}},{key:"getIdealConstraints",value:function(e,t){var n={audio:!1,video:{}};if(Object(r.c)(e,t))return i.d;var o=V.getNavigatorMediaDevices().getSupportedConstraints();return o.width&&o.height&&o.facingMode?(e&&i.e.includes(e)&&(n.video.facingMode=e),t&&t.width&&(n.video.width=t.width),t&&t.height&&(n.video.height=t.height),n):(console.error("Constraint width height or facingMode not supported!"),i.d)}},{key:"getMaxResolutionConstraints",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1],n=V.getIdealConstraints(e),r=n.video.facingMode,i=[{width:{min:640},ideal:{facingMode:r}},{width:{min:800},ideal:{facingMode:r}},{width:{min:900},ideal:{facingMode:r}},{width:{min:1024},ideal:{facingMode:r}},{width:{min:1080},ideal:{facingMode:r}},{width:{min:1280},ideal:{facingMode:r}},{width:{min:1920},ideal:{facingMode:r}},{width:{min:2560},ideal:{facingMode:r}},{width:{min:3840},ideal:{facingMode:r}}];if(t>=i.length)return null;var o=i.slice(0,-t);return n.video.advanced=o,n}},{key:"FACING_MODES",get:function(){return i.a}},{key:"IMAGE_TYPES",get:function(){return i.c}}]),V}();e.a=a},function(V,e,t){"use strict";function n(V,e){if(!(e>=0&&e<=1))throw new Error(e+" is invalid imageCompression, choose between: [0, 1]");if(!c.f.includes(V))throw new Error(V+" is invalid imageType, choose between: "+c.f.join(", "));return!0}function r(V,e){var t={};try{n(V,e),t.imageType=V,t.imageCompression=e}catch(V){console.error(V),console.error("default value of "+c.c.PNG+" is used"),t.imageType=c.c.PNG,t.imageCompression=null}return t}function i(V,e,t){var n=V*parseFloat(t);return{imageWidth:n,imageHeight:e/(V/n)}}function o(V,e,t){return r(e,t).imageType===c.c.JPG?t?V.toDataURL(c.b[c.c.JPG],t):V.toDataURL(c.b[c.c.JPG]):V.toDataURL(c.b[e])}function a(V){if("object"===("undefined"===typeof V?"undefined":u(V)))for(var e in V)if(V.hasOwnProperty(e))return!1;return!0}function A(V,e){return!(V||e&&!a(e))}e.b=i,e.a=o,e.c=A;var c=t(0),u="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(V){return typeof V}:function(V){return V&&"function"===typeof Symbol&&V.constructor===Symbol&&V!==Symbol.prototype?"symbol":typeof V}},function(V,e,t){"use strict";t.d(e,"c",function(){return n}),t.d(e,"a",function(){return r}),t.d(e,"b",function(){return i});var n=1,r=null,i=!1}])})},function(V,e,t){V.exports=t(4)},function(V,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=t(5);t.d(e,"Camera",function(){return n.c}),t.d(e,"FACING_MODES",function(){return n.a}),t.d(e,"IMAGE_TYPES",function(){return n.b}),e.default=n.c},function(V,e,t){"use strict";var n=t(6);t.d(e,"a",function(){return n.a}),t.d(e,"b",function(){return n.b}),e.c=n.c},function(V,e,t){"use strict";function n(V){function e(){d&&clearTimeout(d)}function t(){var t={sizeFactor:V.sizeFactor,imageType:V.imageType,imageCompression:V.imageCompression,isImageMirror:V.isImageMirror},n=j(t);V.isSilentMode||Object(l.c)(),"function"===typeof V.onTakePhoto&&V.onTakePhoto(n),A(n),v(!1),e(),d=setTimeout(function(){v(!0),"function"===typeof V.onTakePhotoAnimationDone&&V.onTakePhotoAnimationDone(n)},900)}var n=Object(r.useState)(""),o=p(n,2),a=o[0],A=o[1],h=Object(r.useState)(!0),g=p(h,2),m=g[0],v=g[1],y=Object(r.useState)(""),k=p(y,2),b=k[0],E=k[1],w=Object(r.useRef)(null),C=Object(c.a)(w,V.idealFacingMode,V.idealResolution,V.isMaxResolution),I=p(C,4),U=I[0],S=I[1],x=I[2],j=I[3];Object(r.useEffect)(function(){U?"function"===typeof V.onCameraStart&&V.onCameraStart(U):"function"===typeof V.onCameraStop&&V.onCameraStop()},[U]),Object(r.useEffect)(function(){S&&(E(S.name+" "+S.message),"function"===typeof V.onCameraError&&V.onCameraError(S))},[S]),Object(r.useEffect)(function(){x&&Object(l.d)(x.message)},[x]);var T=Object(l.b)(m,V.isImageMirror),R=Object(l.a)(!m),L=V.isFullscreen?"react-html5-camera-photo-fullscreen":"";return i.a.createElement("div",{className:"react-html5-camera-photo "+L},i.a.createElement(f.a,{cssClass:"display-error",isDisplayError:V.isDisplayStartCameraError,errorMsg:b}),i.a.createElement(s.a,{isShowWhiteFlash:!m}),i.a.createElement("img",{style:R,alt:"camera",src:a}),i.a.createElement("video",{style:T,ref:w,autoPlay:!0,muted:"muted",playsInline:!0}),i.a.createElement(u.a,{isClicked:!m,onClick:t}))}var r=t(0),i=t.n(r),o=t(1),a=t.n(o),A=t(2),c=(t.n(A),t(9)),u=t(13),s=t(15),f=t(17),l=t(19),h=t(21);t.n(h);t.o(A,"FACING_MODES")&&t.d(e,"a",function(){return A.FACING_MODES}),t.o(A,"IMAGE_TYPES")&&t.d(e,"b",function(){return A.IMAGE_TYPES});var p=function(){function V(V,e){var t=[],n=!0,r=!1,i=void 0;try{for(var o,a=V[Symbol.iterator]();!(n=(o=a.next()).done)&&(t.push(o.value),!e||t.length!==e);n=!0);}catch(V){r=!0,i=V}finally{try{!n&&a.return&&a.return()}finally{if(r)throw i}}return t}return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return V(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),d=null;e.c=n,n.propTypes={onTakePhoto:a.a.func,onTakePhotoAnimationDone:a.a.func,onCameraError:a.a.func,idealFacingMode:a.a.string,idealResolution:a.a.object,imageType:a.a.string,isImageMirror:a.a.bool,isSilentMode:a.a.bool,isDisplayStartCameraError:a.a.bool,imageCompression:a.a.number,isMaxResolution:a.a.bool,isFullscreen:a.a.bool,sizeFactor:a.a.number,onCameraStart:a.a.func,onCameraStop:a.a.func},n.defaultProps={isImageMirror:!0,isDisplayStartCameraError:!0}},function(V,e,t){"use strict";function n(){}function r(){}var i=t(8);r.resetWarningCache=n,V.exports=function(){function V(V,e,t,n,r,o){if(o!==i){var a=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw a.name="Invariant Violation",a}}function e(){return V}V.isRequired=V;var t={array:V,bool:V,func:V,number:V,object:V,string:V,symbol:V,any:V,arrayOf:e,element:V,elementType:V,instanceOf:e,node:V,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e,checkPropTypes:r,resetWarningCache:n};return t.PropTypes=t,t}},function(V,e,t){"use strict";V.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(V,e,t){"use strict";function n(V){return function(){var e=V.apply(this,arguments);return new Promise(function(V,t){function n(r,i){try{var o=e[r](i),a=o.value}catch(V){return void t(V)}if(!o.done)return Promise.resolve(a).then(function(V){n("next",V)},function(V){n("throw",V)});V(a)}return n("next")})}}function r(V,e,t,r){function i(V){return s.getDataUri(V)}var A=Object(a.useState)(null),l=u(A,2),h=l[0],p=l[1],d=Object(a.useState)(null),g=u(d,2),m=g[0],v=g[1],y=Object(a.useState)(null),k=u(y,2),b=k[0],E=k[1];return Object(a.useEffect)(function(){V&&V.current&&(s=new c.a(V.current))},[V]),Object(a.useEffect)(function(){var i=function(){var V=n(o.a.mark(function V(){var n;return o.a.wrap(function(V){for(;;)switch(V.prev=V.next){case 0:if(f=!0,V.prev=1,n=null,!r){V.next=9;break}return V.next=6,s.startCameraMaxResolution(e);case 6:n=V.sent,V.next=12;break;case 9:return V.next=11,s.startCamera(e,t);case 11:n=V.sent;case 12:p(n),v(null),V.next=19;break;case 16:V.prev=16,V.t0=V.catch(1),v(V.t0);case 19:case"end":return V.stop()}},V,this,[[1,16]])}));return function(){return V.apply(this,arguments)}}();if(h)return function(){function e(){return t.apply(this,arguments)}var t=n(o.a.mark(function e(){return o.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,!f){e.next=5;break}return f=!1,e.next=5,s.stopCamera();case 5:V&&V.current&&(p(null),E(null)),e.next=11;break;case 8:e.prev=8,e.t0=e.catch(0),E(e.t0);case 11:case"end":return e.stop()}},e,this,[[0,8]])}));return e}();i()},[V,h,e,t,r]),[h,m,b,i]}e.a=r;var i=t(10),o=t.n(i),a=t(0),A=(t.n(a),t(2)),c=t.n(A),u=function(){function V(V,e){var t=[],n=!0,r=!1,i=void 0;try{for(var o,a=V[Symbol.iterator]();!(n=(o=a.next()).done)&&(t.push(o.value),!e||t.length!==e);n=!0);}catch(V){r=!0,i=V}finally{try{!n&&a.return&&a.return()}finally{if(r)throw i}}return t}return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return V(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),s=null,f=!1},function(V,e,t){V.exports=t(11)},function(V,e,t){var n=function(){return this}()||Function("return this")(),r=n.regeneratorRuntime&&Object.getOwnPropertyNames(n).indexOf("regeneratorRuntime")>=0,i=r&&n.regeneratorRuntime;if(n.regeneratorRuntime=void 0,V.exports=t(12),r)n.regeneratorRuntime=i;else try{delete n.regeneratorRuntime}catch(V){n.regeneratorRuntime=void 0}},function(V,e){!function(e){"use strict";function t(V,e,t,n){var i=e&&e.prototype instanceof r?e:r,o=Object.create(i.prototype),a=new l(n||[]);return o._invoke=c(V,t,a),o}function n(V,e,t){try{return{type:"normal",arg:V.call(e,t)}}catch(V){return{type:"throw",arg:V}}}function r(){}function i(){}function o(){}function a(V){["next","throw","return"].forEach(function(e){V[e]=function(V){return this._invoke(e,V)}})}function A(V){function e(t,r,i,o){var a=n(V[t],V,r);if("throw"!==a.type){var A=a.arg,c=A.value;return c&&"object"===typeof c&&m.call(c,"__await")?Promise.resolve(c.__await).then(function(V){e("next",V,i,o)},function(V){e("throw",V,i,o)}):Promise.resolve(c).then(function(V){A.value=V,i(A)},o)}o(a.arg)}function t(V,t){function n(){return new Promise(function(n,r){e(V,t,n,r)})}return r=r?r.then(n,n):n()}var r;this._invoke=t}function c(V,e,t){var r=C;return function(i,o){if(r===U)throw new Error("Generator is already running");if(r===S){if("throw"===i)throw o;return p()}for(t.method=i,t.arg=o;;){var a=t.delegate;if(a){var A=u(a,t);if(A){if(A===x)continue;return A}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if(r===C)throw r=S,t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r=U;var c=n(V,e,t);if("normal"===c.type){if(r=t.done?S:I,c.arg===x)continue;return{value:c.arg,done:t.done}}"throw"===c.type&&(r=S,t.method="throw",t.arg=c.arg)}}}function u(V,e){var t=V.iterator[e.method];if(t===d){if(e.delegate=null,"throw"===e.method){if(V.iterator.return&&(e.method="return",e.arg=d,u(V,e),"throw"===e.method))return x;e.method="throw",e.arg=new TypeError("The iterator does not provide a \'throw\' method")}return x}var r=n(t,V.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,x;var i=r.arg;return i?i.done?(e[V.resultName]=i.value,e.next=V.nextLoc,"return"!==e.method&&(e.method="next",e.arg=d),e.delegate=null,x):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,x)}function s(V){var e={tryLoc:V[0]};1 in V&&(e.catchLoc=V[1]),2 in V&&(e.finallyLoc=V[2],e.afterLoc=V[3]),this.tryEntries.push(e)}function f(V){var e=V.completion||{};e.type="normal",delete e.arg,V.completion=e}function l(V){this.tryEntries=[{tryLoc:"root"}],V.forEach(s,this),this.reset(!0)}function h(V){if(V){var e=V[y];if(e)return e.call(V);if("function"===typeof V.next)return V;if(!isNaN(V.length)){var t=-1,n=function e(){for(;++t<V.length;)if(m.call(V,t))return e.value=V[t],e.done=!1,e;return e.value=d,e.done=!0,e};return n.next=n}}return{next:p}}function p(){return{value:d,done:!0}}var d,g=Object.prototype,m=g.hasOwnProperty,v="function"===typeof Symbol?Symbol:{},y=v.iterator||"@@iterator",k=v.asyncIterator||"@@asyncIterator",b=v.toStringTag||"@@toStringTag",E="object"===typeof V,w=e.regeneratorRuntime;if(w)return void(E&&(V.exports=w));w=e.regeneratorRuntime=E?V.exports:{},w.wrap=t;var C="suspendedStart",I="suspendedYield",U="executing",S="completed",x={},j={};j[y]=function(){return this};var T=Object.getPrototypeOf,R=T&&T(T(h([])));R&&R!==g&&m.call(R,y)&&(j=R);var L=o.prototype=r.prototype=Object.create(j);i.prototype=L.constructor=o,o.constructor=i,o[b]=i.displayName="GeneratorFunction",w.isGeneratorFunction=function(V){var e="function"===typeof V&&V.constructor;return!!e&&(e===i||"GeneratorFunction"===(e.displayName||e.name))},w.mark=function(V){return Object.setPrototypeOf?Object.setPrototypeOf(V,o):(V.__proto__=o,b in V||(V[b]="GeneratorFunction")),V.prototype=Object.create(L),V},w.awrap=function(V){return{__await:V}},a(A.prototype),A.prototype[k]=function(){return this},w.AsyncIterator=A,w.async=function(V,e,n,r){var i=new A(t(V,e,n,r));return w.isGeneratorFunction(e)?i:i.next().then(function(V){return V.done?V.value:i.next()})},a(L),L[b]="Generator",L[y]=function(){return this},L.toString=function(){return"[object Generator]"},w.keys=function(V){var e=[];for(var t in V)e.push(t);return e.reverse(),function t(){for(;e.length;){var n=e.pop();if(n in V)return t.value=n,t.done=!1,t}return t.done=!0,t}},w.values=h,l.prototype={constructor:l,reset:function(V){if(this.prev=0,this.next=0,this.sent=this._sent=d,this.done=!1,this.delegate=null,this.method="next",this.arg=d,this.tryEntries.forEach(f),!V)for(var e in this)"t"===e.charAt(0)&&m.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=d)},stop:function(){this.done=!0;var V=this.tryEntries[0],e=V.completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(V){function e(e,n){return i.type="throw",i.arg=V,t.next=e,n&&(t.method="next",t.arg=d),!!n}if(this.done)throw V;for(var t=this,n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n],i=r.completion;if("root"===r.tryLoc)return e("end");if(r.tryLoc<=this.prev){var o=m.call(r,"catchLoc"),a=m.call(r,"finallyLoc");if(o&&a){if(this.prev<r.catchLoc)return e(r.catchLoc,!0);if(this.prev<r.finallyLoc)return e(r.finallyLoc)}else if(o){if(this.prev<r.catchLoc)return e(r.catchLoc,!0)}else{if(!a)throw new Error("try statement without catch or finally");if(this.prev<r.finallyLoc)return e(r.finallyLoc)}}}},abrupt:function(V,e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc<=this.prev&&m.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var r=n;break}}r&&("break"===V||"continue"===V)&&r.tryLoc<=e&&e<=r.finallyLoc&&(r=null);var i=r?r.completion:{};return i.type=V,i.arg=e,r?(this.method="next",this.next=r.finallyLoc,x):this.complete(i)},complete:function(V,e){if("throw"===V.type)throw V.arg;return"break"===V.type||"continue"===V.type?this.next=V.arg:"return"===V.type?(this.rval=this.arg=V.arg,this.method="return",this.next="end"):"normal"===V.type&&e&&(this.next=e),x},finish:function(V){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.finallyLoc===V)return this.complete(t.completion,t.afterLoc),f(t),x}},catch:function(V){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.tryLoc===V){var n=t.completion;if("throw"===n.type){var r=n.arg;f(t)}return r}}throw new Error("illegal catch attempt")},delegateYield:function(V,e,t){return this.delegate={iterator:h(V),resultName:e,nextLoc:t},"next"===this.method&&(this.arg=d),x}}}(function(){return this}()||Function("return this")())},function(V,e,t){"use strict";var n=t(0),r=t.n(n),i=t(1),o=t.n(i),a=t(14),A=(t.n(a),function(V){var e=V.onClick,t=V.isClicked,n=t?"is-clicked":"";return r.a.createElement("div",{id:"container-circles"},r.a.createElement("div",{id:"outer-circle",onClick:function(V){t||e()}},r.a.createElement("div",{id:"inner-circle",className:n})))});A.propTypes={onClick:o.a.func.isRequired,isClicked:o.a.bool.isRequired},e.a=A},function(V,e){},function(V,e,t){"use strict";var n=t(0),r=t.n(n),i=t(1),o=t.n(i),a=t(16),A=(t.n(a),function(V){var e=V.isShowWhiteFlash,t=e?"do-transition":"",n=t+" normal";return r.a.createElement("div",{id:"white-flash",className:n})});A.propTypes={isShowWhiteFlash:o.a.bool.isRequired},e.a=A},function(V,e){},function(V,e,t){"use strict";function n(V,e){return V&&e&&e.length>0}var r=t(0),i=t.n(r),o=t(1),a=t.n(o),A=t(18),c=(t.n(A),function(V){var e=V.isDisplayError,t=V.errorMsg,r=V.cssClass;return n(e,t)?(console.log("cssClass",r),i.a.createElement("div",{className:r,id:"display-error"},i.a.createElement("h1",null,"Camera error: ",t))):null});c.propTypes={isDisplayError:a.a.bool,errorMsg:a.a.string,cssClass:a.a.string},e.a=c},function(V,e){},function(V,e,t){"use strict";function n(V){return V?{display:"inline-block"}:{display:"none"}}function r(V){return V?{transform:"rotateY(180deg)"}:{transform:"none"}}function i(V,e){return Object.assign({},r(e),n(V))}function o(){new Audio("data:audio/mp3;base64,"+c.a.base64).play()}function a(V){console.info("react-html5-camera-photo info:",V)}e.a=n,e.b=i,e.c=o,e.d=a;var A=t(20),c=t.n(A)},function(V,e){V.exports={base64:""}},function(V,e){}])});\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14\n')},function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__15__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcHRpbWFqZXQtZm9ybS9leHRlcm5hbCBcInJlYWN0LWdyaWQtbGF5b3V0XCI/NjA2YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIxNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMTVfXzsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///15\n")},function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__16__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcHRpbWFqZXQtZm9ybS9leHRlcm5hbCBcImRyYWZ0LWNvbnZlcnRcIj9jYzJlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjE2LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xNl9fOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///16\n")},function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__17__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcHRpbWFqZXQtZm9ybS9leHRlcm5hbCBcIm51bWVyYWxcIj8wZTUxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjE3LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xN19fOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///17\n")},function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__18__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcHRpbWFqZXQtZm9ybS9leHRlcm5hbCBcInJlYWN0LWRhdGVwaWNrZXJcIj80ZGJlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjE4LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xOF9fOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///18\n")},function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__19__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcHRpbWFqZXQtZm9ybS9leHRlcm5hbCBcInJlYWN0LWRyb3B6b25lLWNvbXBvbmVudFwiPzE2MDciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzE5X187Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///19\n")},function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__20__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcHRpbWFqZXQtZm9ybS9leHRlcm5hbCBcInJlYWN0LW51bWJlci1mb3JtYXRcIj80MmZiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18yMF9fOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///20\n")},function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__21__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcHRpbWFqZXQtZm9ybS9leHRlcm5hbCBcInJlYWN0LXNsaWNrXCI/OWM4MyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIyMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMjFfXzsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///21\n")},function(module,exports,__webpack_require__){eval('!function(e,t){ true?module.exports=t(__webpack_require__(26),__webpack_require__(0),__webpack_require__(29),__webpack_require__(30)):undefined}(this,function(e,t,n,r){return function(e){function t(r){if(n[r])return n[r].exports;var a=n[r]={exports:{},id:r,loaded:!1};return e[r].call(a.exports,a,a.exports,t),a.loaded=!0,a.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),f=n(1),p=r(f),l=n(2),d=r(l),v=n(3),h=r(v),_=n(4),g=r(_),m=function(e){function t(){var e,n,r,u;o(this,t);for(var s=arguments.length,c=Array(s),f=0;f<s;f++)c[f]=arguments[f];return n=r=i(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(c))),r._sigPad=null,r._excludeOurProps=function(){var e=r.props,t=(e.canvasProps,e.clearOnResize,a(e,["canvasProps","clearOnResize"]));return t},r.getCanvas=function(){return r._canvas},r.getTrimmedCanvas=function(){var e=document.createElement("canvas");return e.width=r._canvas.width,e.height=r._canvas.height,e.getContext("2d").drawImage(r._canvas,0,0),(0,g.default)(e)},r.getSignaturePad=function(){return r._sigPad},r._checkClearOnResize=function(){r.props.clearOnResize&&r._resizeCanvas()},r._resizeCanvas=function(){var e=r.props.canvasProps||{},t=e.width,n=e.height;if(!t||!n){var a=r._canvas,o=Math.max(window.devicePixelRatio||1,1);t||(a.width=a.offsetWidth*o),n||(a.height=a.offsetHeight*o),a.getContext("2d").scale(o,o),r.clear()}},r.on=function(){return window.addEventListener("resize",r._checkClearOnResize),r._sigPad.on()},r.off=function(){return window.removeEventListener("resize",r._checkClearOnResize),r._sigPad.off()},r.clear=function(){return r._sigPad.clear()},r.isEmpty=function(){return r._sigPad.isEmpty()},r.fromDataURL=function(e,t){return r._sigPad.fromDataURL(e,t)},r.toDataURL=function(e,t){return r._sigPad.toDataURL(e,t)},r.fromData=function(e){return r._sigPad.fromData(e)},r.toData=function(){return r._sigPad.toData()},u=n,i(r,u)}return u(t,e),c(t,[{key:"componentDidMount",value:function(){this._sigPad=new h.default(this._canvas,this._excludeOurProps()),this._resizeCanvas(),this.on()}},{key:"componentWillUnmount",value:function(){this.off()}},{key:"componentDidUpdate",value:function(){Object.assign(this._sigPad,this._excludeOurProps())}},{key:"render",value:function(){var e=this,t=this.props.canvasProps;return d.default.createElement("canvas",s({ref:function(t){e._canvas=t}},t))}}]),t}(l.Component);m.propTypes={velocityFilterWeight:p.default.number,minWidth:p.default.number,maxWidth:p.default.number,minDistance:p.default.number,dotSize:p.default.oneOfType([p.default.number,p.default.func]),penColor:p.default.string,throttle:p.default.number,onEnd:p.default.func,onBegin:p.default.func,canvasProps:p.default.object,clearOnResize:p.default.bool},m.defaultProps={clearOnResize:!0},t.default=m},function(t,n){t.exports=e},function(e,n){e.exports=t},function(e,t){e.exports=n},function(e,t){e.exports=r}])});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcHRpbWFqZXQtZm9ybS8uL25vZGVfbW9kdWxlcy9yZWFjdC1zaWduYXR1cmUtY2FudmFzL2J1aWxkL2luZGV4LmpzP2I4YzAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZSxLQUFpRCxrQkFBa0IsbUJBQU8sQ0FBQyxFQUFZLEVBQUUsbUJBQU8sQ0FBQyxDQUFPLEVBQUUsbUJBQU8sQ0FBQyxFQUFlLEVBQUUsbUJBQU8sQ0FBQyxFQUFhLEdBQUcsU0FBNlQsQ0FBQyx3QkFBd0IsbUJBQW1CLGNBQWMsNEJBQTRCLFlBQVksVUFBVSxpQkFBaUIsZ0VBQWdFLFNBQVMsK0JBQStCLGtCQUFrQixhQUFhLGNBQWMsMEJBQTBCLFdBQVcsZ0JBQWdCLFNBQVMsdUZBQXVGLFNBQVMsZ0JBQWdCLDhFQUE4RSxnQkFBZ0IsNEZBQTRGLHVEQUF1RCxnQkFBZ0IsMkhBQTJILDBDQUEwQyxhQUFhLG1EQUFtRCxzRUFBc0Usc0NBQXNDLFNBQVMsRUFBRSxpQ0FBaUMsWUFBWSxtQkFBbUIsS0FBSyxtQkFBbUIsc0VBQXNFLFNBQVMsY0FBYyxnQkFBZ0IsWUFBWSxXQUFXLEtBQUssV0FBVywrR0FBK0csdUJBQXVCLHdDQUF3Qyx5RUFBeUUsYUFBYSxZQUFZLFVBQVUsMENBQTBDLElBQUksc0JBQXNCLHlJQUF5SSxxRkFBcUYsU0FBUyx3QkFBd0IsaUJBQWlCLCtCQUErQix1Q0FBdUMsc0hBQXNILDhCQUE4QixpQkFBaUIsa0NBQWtDLHlDQUF5Qyw0QkFBNEIsNkJBQTZCLHNCQUFzQixXQUFXLHlEQUF5RCxxR0FBcUcsaUJBQWlCLDhFQUE4RSxrQkFBa0Isa0ZBQWtGLG9CQUFvQix5QkFBeUIsc0JBQXNCLDJCQUEyQiw2QkFBNkIsa0NBQWtDLDJCQUEyQixnQ0FBZ0Msd0JBQXdCLDZCQUE2QixxQkFBcUIsMEJBQTBCLFlBQVksb0JBQW9CLHlDQUF5QyxpR0FBaUcsRUFBRSw0Q0FBNEMsWUFBWSxFQUFFLDBDQUEwQyxxREFBcUQsRUFBRSw4QkFBOEIsb0NBQW9DLDJDQUEyQyxnQkFBZ0IsYUFBYSxNQUFNLEtBQUssY0FBYyxhQUFhLGdWQUFnVixpQkFBaUIsaUJBQWlCLGFBQWEsZUFBZSxZQUFZLGVBQWUsWUFBWSxlQUFlLFlBQVksZUFBZSxZQUFZLEdBQUciLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIhZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpLHJlcXVpcmUoXCJyZWFjdFwiKSxyZXF1aXJlKFwic2lnbmF0dXJlX3BhZFwiKSxyZXF1aXJlKFwidHJpbS1jYW52YXNcIikpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wicHJvcC10eXBlc1wiLFwicmVhY3RcIixcInNpZ25hdHVyZV9wYWRcIixcInRyaW0tY2FudmFzXCJdLHQpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHMuU2lnbmF0dXJlQ2FudmFzPXQocmVxdWlyZShcInByb3AtdHlwZXNcIikscmVxdWlyZShcInJlYWN0XCIpLHJlcXVpcmUoXCJzaWduYXR1cmVfcGFkXCIpLHJlcXVpcmUoXCJ0cmltLWNhbnZhc1wiKSk6ZS5TaWduYXR1cmVDYW52YXM9dChlW1wicHJvcC10eXBlc1wiXSxlLnJlYWN0LGUuc2lnbmF0dXJlX3BhZCxlW1widHJpbS1jYW52YXNcIl0pfSh0aGlzLGZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiBmdW5jdGlvbihlKXtmdW5jdGlvbiB0KHIpe2lmKG5bcl0pcmV0dXJuIG5bcl0uZXhwb3J0czt2YXIgYT1uW3JdPXtleHBvcnRzOnt9LGlkOnIsbG9hZGVkOiExfTtyZXR1cm4gZVtyXS5jYWxsKGEuZXhwb3J0cyxhLGEuZXhwb3J0cyx0KSxhLmxvYWRlZD0hMCxhLmV4cG9ydHN9dmFyIG49e307cmV0dXJuIHQubT1lLHQuYz1uLHQucD1cIlwiLHQoMCl9KFtmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19ZnVuY3Rpb24gYShlLHQpe3ZhciBuPXt9O2Zvcih2YXIgciBpbiBlKXQuaW5kZXhPZihyKT49MHx8T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUscikmJihuW3JdPWVbcl0pO3JldHVybiBufWZ1bmN0aW9uIG8oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWZ1bmN0aW9uIGkoZSx0KXtpZighZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0P2U6dH1mdW5jdGlvbiB1KGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCYmbnVsbCE9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIHQpO2UucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHQmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKGUsdCk6ZS5fX3Byb3RvX189dCl9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHM9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTE7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyl7dmFyIG49YXJndW1lbnRzW3RdO2Zvcih2YXIgciBpbiBuKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLHIpJiYoZVtyXT1uW3JdKX1yZXR1cm4gZX0sYz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIHI9dFtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsci5rZXkscil9fXJldHVybiBmdW5jdGlvbih0LG4scil7cmV0dXJuIG4mJmUodC5wcm90b3R5cGUsbiksciYmZSh0LHIpLHR9fSgpLGY9bigxKSxwPXIoZiksbD1uKDIpLGQ9cihsKSx2PW4oMyksaD1yKHYpLF89big0KSxnPXIoXyksbT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7dmFyIGUsbixyLHU7byh0aGlzLHQpO2Zvcih2YXIgcz1hcmd1bWVudHMubGVuZ3RoLGM9QXJyYXkocyksZj0wO2Y8cztmKyspY1tmXT1hcmd1bWVudHNbZl07cmV0dXJuIG49cj1pKHRoaXMsKGU9dC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KSkuY2FsbC5hcHBseShlLFt0aGlzXS5jb25jYXQoYykpKSxyLl9zaWdQYWQ9bnVsbCxyLl9leGNsdWRlT3VyUHJvcHM9ZnVuY3Rpb24oKXt2YXIgZT1yLnByb3BzLHQ9KGUuY2FudmFzUHJvcHMsZS5jbGVhck9uUmVzaXplLGEoZSxbXCJjYW52YXNQcm9wc1wiLFwiY2xlYXJPblJlc2l6ZVwiXSkpO3JldHVybiB0fSxyLmdldENhbnZhcz1mdW5jdGlvbigpe3JldHVybiByLl9jYW52YXN9LHIuZ2V0VHJpbW1lZENhbnZhcz1mdW5jdGlvbigpe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7cmV0dXJuIGUud2lkdGg9ci5fY2FudmFzLndpZHRoLGUuaGVpZ2h0PXIuX2NhbnZhcy5oZWlnaHQsZS5nZXRDb250ZXh0KFwiMmRcIikuZHJhd0ltYWdlKHIuX2NhbnZhcywwLDApLCgwLGcuZGVmYXVsdCkoZSl9LHIuZ2V0U2lnbmF0dXJlUGFkPWZ1bmN0aW9uKCl7cmV0dXJuIHIuX3NpZ1BhZH0sci5fY2hlY2tDbGVhck9uUmVzaXplPWZ1bmN0aW9uKCl7ci5wcm9wcy5jbGVhck9uUmVzaXplJiZyLl9yZXNpemVDYW52YXMoKX0sci5fcmVzaXplQ2FudmFzPWZ1bmN0aW9uKCl7dmFyIGU9ci5wcm9wcy5jYW52YXNQcm9wc3x8e30sdD1lLndpZHRoLG49ZS5oZWlnaHQ7aWYoIXR8fCFuKXt2YXIgYT1yLl9jYW52YXMsbz1NYXRoLm1heCh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpb3x8MSwxKTt0fHwoYS53aWR0aD1hLm9mZnNldFdpZHRoKm8pLG58fChhLmhlaWdodD1hLm9mZnNldEhlaWdodCpvKSxhLmdldENvbnRleHQoXCIyZFwiKS5zY2FsZShvLG8pLHIuY2xlYXIoKX19LHIub249ZnVuY3Rpb24oKXtyZXR1cm4gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIixyLl9jaGVja0NsZWFyT25SZXNpemUpLHIuX3NpZ1BhZC5vbigpfSxyLm9mZj1mdW5jdGlvbigpe3JldHVybiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLHIuX2NoZWNrQ2xlYXJPblJlc2l6ZSksci5fc2lnUGFkLm9mZigpfSxyLmNsZWFyPWZ1bmN0aW9uKCl7cmV0dXJuIHIuX3NpZ1BhZC5jbGVhcigpfSxyLmlzRW1wdHk9ZnVuY3Rpb24oKXtyZXR1cm4gci5fc2lnUGFkLmlzRW1wdHkoKX0sci5mcm9tRGF0YVVSTD1mdW5jdGlvbihlLHQpe3JldHVybiByLl9zaWdQYWQuZnJvbURhdGFVUkwoZSx0KX0sci50b0RhdGFVUkw9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gci5fc2lnUGFkLnRvRGF0YVVSTChlLHQpfSxyLmZyb21EYXRhPWZ1bmN0aW9uKGUpe3JldHVybiByLl9zaWdQYWQuZnJvbURhdGEoZSl9LHIudG9EYXRhPWZ1bmN0aW9uKCl7cmV0dXJuIHIuX3NpZ1BhZC50b0RhdGEoKX0sdT1uLGkocix1KX1yZXR1cm4gdSh0LGUpLGModCxbe2tleTpcImNvbXBvbmVudERpZE1vdW50XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLl9zaWdQYWQ9bmV3IGguZGVmYXVsdCh0aGlzLl9jYW52YXMsdGhpcy5fZXhjbHVkZU91clByb3BzKCkpLHRoaXMuX3Jlc2l6ZUNhbnZhcygpLHRoaXMub24oKX19LHtrZXk6XCJjb21wb25lbnRXaWxsVW5tb3VudFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5vZmYoKX19LHtrZXk6XCJjb21wb25lbnREaWRVcGRhdGVcIix2YWx1ZTpmdW5jdGlvbigpe09iamVjdC5hc3NpZ24odGhpcy5fc2lnUGFkLHRoaXMuX2V4Y2x1ZGVPdXJQcm9wcygpKX19LHtrZXk6XCJyZW5kZXJcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD10aGlzLnByb3BzLmNhbnZhc1Byb3BzO3JldHVybiBkLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiLHMoe3JlZjpmdW5jdGlvbih0KXtlLl9jYW52YXM9dH19LHQpKX19XSksdH0obC5Db21wb25lbnQpO20ucHJvcFR5cGVzPXt2ZWxvY2l0eUZpbHRlcldlaWdodDpwLmRlZmF1bHQubnVtYmVyLG1pbldpZHRoOnAuZGVmYXVsdC5udW1iZXIsbWF4V2lkdGg6cC5kZWZhdWx0Lm51bWJlcixtaW5EaXN0YW5jZTpwLmRlZmF1bHQubnVtYmVyLGRvdFNpemU6cC5kZWZhdWx0Lm9uZU9mVHlwZShbcC5kZWZhdWx0Lm51bWJlcixwLmRlZmF1bHQuZnVuY10pLHBlbkNvbG9yOnAuZGVmYXVsdC5zdHJpbmcsdGhyb3R0bGU6cC5kZWZhdWx0Lm51bWJlcixvbkVuZDpwLmRlZmF1bHQuZnVuYyxvbkJlZ2luOnAuZGVmYXVsdC5mdW5jLGNhbnZhc1Byb3BzOnAuZGVmYXVsdC5vYmplY3QsY2xlYXJPblJlc2l6ZTpwLmRlZmF1bHQuYm9vbH0sbS5kZWZhdWx0UHJvcHM9e2NsZWFyT25SZXNpemU6ITB9LHQuZGVmYXVsdD1tfSxmdW5jdGlvbih0LG4pe3QuZXhwb3J0cz1lfSxmdW5jdGlvbihlLG4pe2UuZXhwb3J0cz10fSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1ufSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1yfV0pfSk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///22\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Headers\", function() { return Headers; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Request\", function() { return Request; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Response\", function() { return Response; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DOMException\", function() { return DOMException; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fetch\", function() { return fetch; });\nvar global =\n  (typeof globalThis !== 'undefined' && globalThis) ||\n  (typeof self !== 'undefined' && self) ||\n  (typeof global !== 'undefined' && global)\n\nvar support = {\n  searchParams: 'URLSearchParams' in global,\n  iterable: 'Symbol' in global && 'iterator' in Symbol,\n  blob:\n    'FileReader' in global &&\n    'Blob' in global &&\n    (function() {\n      try {\n        new Blob()\n        return true\n      } catch (e) {\n        return false\n      }\n    })(),\n  formData: 'FormData' in global,\n  arrayBuffer: 'ArrayBuffer' in global\n}\n\nfunction isDataView(obj) {\n  return obj && DataView.prototype.isPrototypeOf(obj)\n}\n\nif (support.arrayBuffer) {\n  var viewClasses = [\n    '[object Int8Array]',\n    '[object Uint8Array]',\n    '[object Uint8ClampedArray]',\n    '[object Int16Array]',\n    '[object Uint16Array]',\n    '[object Int32Array]',\n    '[object Uint32Array]',\n    '[object Float32Array]',\n    '[object Float64Array]'\n  ]\n\n  var isArrayBufferView =\n    ArrayBuffer.isView ||\n    function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n}\n\nfunction normalizeName(name) {\n  if (typeof name !== 'string') {\n    name = String(name)\n  }\n  if (/[^a-z0-9\\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {\n    throw new TypeError('Invalid character in header field name: \"' + name + '\"')\n  }\n  return name.toLowerCase()\n}\n\nfunction normalizeValue(value) {\n  if (typeof value !== 'string') {\n    value = String(value)\n  }\n  return value\n}\n\n// Build a destructive iterator for the value list\nfunction iteratorFor(items) {\n  var iterator = {\n    next: function() {\n      var value = items.shift()\n      return {done: value === undefined, value: value}\n    }\n  }\n\n  if (support.iterable) {\n    iterator[Symbol.iterator] = function() {\n      return iterator\n    }\n  }\n\n  return iterator\n}\n\nfunction Headers(headers) {\n  this.map = {}\n\n  if (headers instanceof Headers) {\n    headers.forEach(function(value, name) {\n      this.append(name, value)\n    }, this)\n  } else if (Array.isArray(headers)) {\n    headers.forEach(function(header) {\n      this.append(header[0], header[1])\n    }, this)\n  } else if (headers) {\n    Object.getOwnPropertyNames(headers).forEach(function(name) {\n      this.append(name, headers[name])\n    }, this)\n  }\n}\n\nHeaders.prototype.append = function(name, value) {\n  name = normalizeName(name)\n  value = normalizeValue(value)\n  var oldValue = this.map[name]\n  this.map[name] = oldValue ? oldValue + ', ' + value : value\n}\n\nHeaders.prototype['delete'] = function(name) {\n  delete this.map[normalizeName(name)]\n}\n\nHeaders.prototype.get = function(name) {\n  name = normalizeName(name)\n  return this.has(name) ? this.map[name] : null\n}\n\nHeaders.prototype.has = function(name) {\n  return this.map.hasOwnProperty(normalizeName(name))\n}\n\nHeaders.prototype.set = function(name, value) {\n  this.map[normalizeName(name)] = normalizeValue(value)\n}\n\nHeaders.prototype.forEach = function(callback, thisArg) {\n  for (var name in this.map) {\n    if (this.map.hasOwnProperty(name)) {\n      callback.call(thisArg, this.map[name], name, this)\n    }\n  }\n}\n\nHeaders.prototype.keys = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push(name)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.values = function() {\n  var items = []\n  this.forEach(function(value) {\n    items.push(value)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.entries = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push([name, value])\n  })\n  return iteratorFor(items)\n}\n\nif (support.iterable) {\n  Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n}\n\nfunction consumed(body) {\n  if (body.bodyUsed) {\n    return Promise.reject(new TypeError('Already read'))\n  }\n  body.bodyUsed = true\n}\n\nfunction fileReaderReady(reader) {\n  return new Promise(function(resolve, reject) {\n    reader.onload = function() {\n      resolve(reader.result)\n    }\n    reader.onerror = function() {\n      reject(reader.error)\n    }\n  })\n}\n\nfunction readBlobAsArrayBuffer(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsArrayBuffer(blob)\n  return promise\n}\n\nfunction readBlobAsText(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsText(blob)\n  return promise\n}\n\nfunction readArrayBufferAsText(buf) {\n  var view = new Uint8Array(buf)\n  var chars = new Array(view.length)\n\n  for (var i = 0; i < view.length; i++) {\n    chars[i] = String.fromCharCode(view[i])\n  }\n  return chars.join('')\n}\n\nfunction bufferClone(buf) {\n  if (buf.slice) {\n    return buf.slice(0)\n  } else {\n    var view = new Uint8Array(buf.byteLength)\n    view.set(new Uint8Array(buf))\n    return view.buffer\n  }\n}\n\nfunction Body() {\n  this.bodyUsed = false\n\n  this._initBody = function(body) {\n    /*\n      fetch-mock wraps the Response object in an ES6 Proxy to\n      provide useful test harness features such as flush. However, on\n      ES5 browsers without fetch or Proxy support pollyfills must be used;\n      the proxy-pollyfill is unable to proxy an attribute unless it exists\n      on the object before the Proxy is created. This change ensures\n      Response.bodyUsed exists on the instance, while maintaining the\n      semantic of setting Request.bodyUsed in the constructor before\n      _initBody is called.\n    */\n    this.bodyUsed = this.bodyUsed\n    this._bodyInit = body\n    if (!body) {\n      this._bodyText = ''\n    } else if (typeof body === 'string') {\n      this._bodyText = body\n    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n      this._bodyBlob = body\n    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n      this._bodyFormData = body\n    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n      this._bodyText = body.toString()\n    } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n      this._bodyArrayBuffer = bufferClone(body.buffer)\n      // IE 10-11 can't handle a DataView body.\n      this._bodyInit = new Blob([this._bodyArrayBuffer])\n    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n      this._bodyArrayBuffer = bufferClone(body)\n    } else {\n      this._bodyText = body = Object.prototype.toString.call(body)\n    }\n\n    if (!this.headers.get('content-type')) {\n      if (typeof body === 'string') {\n        this.headers.set('content-type', 'text/plain;charset=UTF-8')\n      } else if (this._bodyBlob && this._bodyBlob.type) {\n        this.headers.set('content-type', this._bodyBlob.type)\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n      }\n    }\n  }\n\n  if (support.blob) {\n    this.blob = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return Promise.resolve(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as blob')\n      } else {\n        return Promise.resolve(new Blob([this._bodyText]))\n      }\n    }\n\n    this.arrayBuffer = function() {\n      if (this._bodyArrayBuffer) {\n        var isConsumed = consumed(this)\n        if (isConsumed) {\n          return isConsumed\n        }\n        if (ArrayBuffer.isView(this._bodyArrayBuffer)) {\n          return Promise.resolve(\n            this._bodyArrayBuffer.buffer.slice(\n              this._bodyArrayBuffer.byteOffset,\n              this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength\n            )\n          )\n        } else {\n          return Promise.resolve(this._bodyArrayBuffer)\n        }\n      } else {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n    }\n  }\n\n  this.text = function() {\n    var rejected = consumed(this)\n    if (rejected) {\n      return rejected\n    }\n\n    if (this._bodyBlob) {\n      return readBlobAsText(this._bodyBlob)\n    } else if (this._bodyArrayBuffer) {\n      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n    } else if (this._bodyFormData) {\n      throw new Error('could not read FormData body as text')\n    } else {\n      return Promise.resolve(this._bodyText)\n    }\n  }\n\n  if (support.formData) {\n    this.formData = function() {\n      return this.text().then(decode)\n    }\n  }\n\n  this.json = function() {\n    return this.text().then(JSON.parse)\n  }\n\n  return this\n}\n\n// HTTP methods whose capitalization should be normalized\nvar methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\nfunction normalizeMethod(method) {\n  var upcased = method.toUpperCase()\n  return methods.indexOf(upcased) > -1 ? upcased : method\n}\n\nfunction Request(input, options) {\n  if (!(this instanceof Request)) {\n    throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.')\n  }\n\n  options = options || {}\n  var body = options.body\n\n  if (input instanceof Request) {\n    if (input.bodyUsed) {\n      throw new TypeError('Already read')\n    }\n    this.url = input.url\n    this.credentials = input.credentials\n    if (!options.headers) {\n      this.headers = new Headers(input.headers)\n    }\n    this.method = input.method\n    this.mode = input.mode\n    this.signal = input.signal\n    if (!body && input._bodyInit != null) {\n      body = input._bodyInit\n      input.bodyUsed = true\n    }\n  } else {\n    this.url = String(input)\n  }\n\n  this.credentials = options.credentials || this.credentials || 'same-origin'\n  if (options.headers || !this.headers) {\n    this.headers = new Headers(options.headers)\n  }\n  this.method = normalizeMethod(options.method || this.method || 'GET')\n  this.mode = options.mode || this.mode || null\n  this.signal = options.signal || this.signal\n  this.referrer = null\n\n  if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n    throw new TypeError('Body not allowed for GET or HEAD requests')\n  }\n  this._initBody(body)\n\n  if (this.method === 'GET' || this.method === 'HEAD') {\n    if (options.cache === 'no-store' || options.cache === 'no-cache') {\n      // Search for a '_' parameter in the query string\n      var reParamSearch = /([?&])_=[^&]*/\n      if (reParamSearch.test(this.url)) {\n        // If it already exists then set the value with the current time\n        this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime())\n      } else {\n        // Otherwise add a new '_' parameter to the end with the current time\n        var reQueryString = /\\?/\n        this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime()\n      }\n    }\n  }\n}\n\nRequest.prototype.clone = function() {\n  return new Request(this, {body: this._bodyInit})\n}\n\nfunction decode(body) {\n  var form = new FormData()\n  body\n    .trim()\n    .split('&')\n    .forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n  return form\n}\n\nfunction parseHeaders(rawHeaders) {\n  var headers = new Headers()\n  // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n  // https://tools.ietf.org/html/rfc7230#section-3.2\n  var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\n  // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill\n  // https://github.com/github/fetch/issues/748\n  // https://github.com/zloirock/core-js/issues/751\n  preProcessedHeaders\n    .split('\\r')\n    .map(function(header) {\n      return header.indexOf('\\n') === 0 ? header.substr(1, header.length) : header\n    })\n    .forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n  return headers\n}\n\nBody.call(Request.prototype)\n\nfunction Response(bodyInit, options) {\n  if (!(this instanceof Response)) {\n    throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.')\n  }\n  if (!options) {\n    options = {}\n  }\n\n  this.type = 'default'\n  this.status = options.status === undefined ? 200 : options.status\n  this.ok = this.status >= 200 && this.status < 300\n  this.statusText = options.statusText === undefined ? '' : '' + options.statusText\n  this.headers = new Headers(options.headers)\n  this.url = options.url || ''\n  this._initBody(bodyInit)\n}\n\nBody.call(Response.prototype)\n\nResponse.prototype.clone = function() {\n  return new Response(this._bodyInit, {\n    status: this.status,\n    statusText: this.statusText,\n    headers: new Headers(this.headers),\n    url: this.url\n  })\n}\n\nResponse.error = function() {\n  var response = new Response(null, {status: 0, statusText: ''})\n  response.type = 'error'\n  return response\n}\n\nvar redirectStatuses = [301, 302, 303, 307, 308]\n\nResponse.redirect = function(url, status) {\n  if (redirectStatuses.indexOf(status) === -1) {\n    throw new RangeError('Invalid status code')\n  }\n\n  return new Response(null, {status: status, headers: {location: url}})\n}\n\nvar DOMException = global.DOMException\ntry {\n  new DOMException()\n} catch (err) {\n  DOMException = function(message, name) {\n    this.message = message\n    this.name = name\n    var error = Error(message)\n    this.stack = error.stack\n  }\n  DOMException.prototype = Object.create(Error.prototype)\n  DOMException.prototype.constructor = DOMException\n}\n\nfunction fetch(input, init) {\n  return new Promise(function(resolve, reject) {\n    var request = new Request(input, init)\n\n    if (request.signal && request.signal.aborted) {\n      return reject(new DOMException('Aborted', 'AbortError'))\n    }\n\n    var xhr = new XMLHttpRequest()\n\n    function abortXhr() {\n      xhr.abort()\n    }\n\n    xhr.onload = function() {\n      var options = {\n        status: xhr.status,\n        statusText: xhr.statusText,\n        headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n      }\n      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n      var body = 'response' in xhr ? xhr.response : xhr.responseText\n      setTimeout(function() {\n        resolve(new Response(body, options))\n      }, 0)\n    }\n\n    xhr.onerror = function() {\n      setTimeout(function() {\n        reject(new TypeError('Network request failed'))\n      }, 0)\n    }\n\n    xhr.ontimeout = function() {\n      setTimeout(function() {\n        reject(new TypeError('Network request failed'))\n      }, 0)\n    }\n\n    xhr.onabort = function() {\n      setTimeout(function() {\n        reject(new DOMException('Aborted', 'AbortError'))\n      }, 0)\n    }\n\n    function fixUrl(url) {\n      try {\n        return url === '' && global.location.href ? global.location.href : url\n      } catch (e) {\n        return url\n      }\n    }\n\n    xhr.open(request.method, fixUrl(request.url), true)\n\n    if (request.credentials === 'include') {\n      xhr.withCredentials = true\n    } else if (request.credentials === 'omit') {\n      xhr.withCredentials = false\n    }\n\n    if ('responseType' in xhr) {\n      if (support.blob) {\n        xhr.responseType = 'blob'\n      } else if (\n        support.arrayBuffer &&\n        request.headers.get('Content-Type') &&\n        request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1\n      ) {\n        xhr.responseType = 'arraybuffer'\n      }\n    }\n\n    if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers)) {\n      Object.getOwnPropertyNames(init.headers).forEach(function(name) {\n        xhr.setRequestHeader(name, normalizeValue(init.headers[name]))\n      })\n    } else {\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n    }\n\n    if (request.signal) {\n      request.signal.addEventListener('abort', abortXhr)\n\n      xhr.onreadystatechange = function() {\n        // DONE (success or failure)\n        if (xhr.readyState === 4) {\n          request.signal.removeEventListener('abort', abortXhr)\n        }\n      }\n    }\n\n    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n  })\n}\n\nfetch.polyfill = true\n\nif (!global.fetch) {\n  global.fetch = fetch\n  global.Headers = Headers\n  global.Request = Request\n  global.Response = Response\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///23\n")},function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (factory) {\n   true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) :\n  undefined;\n}((function () { 'use strict';\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n  }\n\n  function _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n      return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n  }\n\n  function _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    };\n\n    return _setPrototypeOf(o, p);\n  }\n\n  function _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n\n    try {\n      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return self;\n  }\n\n  function _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n      return call;\n    }\n\n    return _assertThisInitialized(self);\n  }\n\n  function _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n    return function _createSuperInternal() {\n      var Super = _getPrototypeOf(Derived),\n          result;\n\n      if (hasNativeReflectConstruct) {\n        var NewTarget = _getPrototypeOf(this).constructor;\n\n        result = Reflect.construct(Super, arguments, NewTarget);\n      } else {\n        result = Super.apply(this, arguments);\n      }\n\n      return _possibleConstructorReturn(this, result);\n    };\n  }\n\n  function _superPropBase(object, property) {\n    while (!Object.prototype.hasOwnProperty.call(object, property)) {\n      object = _getPrototypeOf(object);\n      if (object === null) break;\n    }\n\n    return object;\n  }\n\n  function _get(target, property, receiver) {\n    if (typeof Reflect !== \"undefined\" && Reflect.get) {\n      _get = Reflect.get;\n    } else {\n      _get = function _get(target, property, receiver) {\n        var base = _superPropBase(target, property);\n\n        if (!base) return;\n        var desc = Object.getOwnPropertyDescriptor(base, property);\n\n        if (desc.get) {\n          return desc.get.call(receiver);\n        }\n\n        return desc.value;\n      };\n    }\n\n    return _get(target, property, receiver || target);\n  }\n\n  var Emitter = /*#__PURE__*/function () {\n    function Emitter() {\n      _classCallCheck(this, Emitter);\n\n      Object.defineProperty(this, 'listeners', {\n        value: {},\n        writable: true,\n        configurable: true\n      });\n    }\n\n    _createClass(Emitter, [{\n      key: \"addEventListener\",\n      value: function addEventListener(type, callback) {\n        if (!(type in this.listeners)) {\n          this.listeners[type] = [];\n        }\n\n        this.listeners[type].push(callback);\n      }\n    }, {\n      key: \"removeEventListener\",\n      value: function removeEventListener(type, callback) {\n        if (!(type in this.listeners)) {\n          return;\n        }\n\n        var stack = this.listeners[type];\n\n        for (var i = 0, l = stack.length; i < l; i++) {\n          if (stack[i] === callback) {\n            stack.splice(i, 1);\n            return;\n          }\n        }\n      }\n    }, {\n      key: \"dispatchEvent\",\n      value: function dispatchEvent(event) {\n        var _this = this;\n\n        if (!(event.type in this.listeners)) {\n          return;\n        }\n\n        var debounce = function debounce(callback) {\n          setTimeout(function () {\n            return callback.call(_this, event);\n          });\n        };\n\n        var stack = this.listeners[event.type];\n\n        for (var i = 0, l = stack.length; i < l; i++) {\n          debounce(stack[i]);\n        }\n\n        return !event.defaultPrevented;\n      }\n    }]);\n\n    return Emitter;\n  }();\n\n  var AbortSignal = /*#__PURE__*/function (_Emitter) {\n    _inherits(AbortSignal, _Emitter);\n\n    var _super = _createSuper(AbortSignal);\n\n    function AbortSignal() {\n      var _this2;\n\n      _classCallCheck(this, AbortSignal);\n\n      _this2 = _super.call(this); // Some versions of babel does not transpile super() correctly for IE <= 10, if the parent\n      // constructor has failed to run, then \"this.listeners\" will still be undefined and then we call\n      // the parent constructor directly instead as a workaround. For general details, see babel bug:\n      // https://github.com/babel/babel/issues/3041\n      // This hack was added as a fix for the issue described here:\n      // https://github.com/Financial-Times/polyfill-library/pull/59#issuecomment-477558042\n\n      if (!_this2.listeners) {\n        Emitter.call(_assertThisInitialized(_this2));\n      } // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and\n      // we want Object.keys(new AbortController().signal) to be [] for compat with the native impl\n\n\n      Object.defineProperty(_assertThisInitialized(_this2), 'aborted', {\n        value: false,\n        writable: true,\n        configurable: true\n      });\n      Object.defineProperty(_assertThisInitialized(_this2), 'onabort', {\n        value: null,\n        writable: true,\n        configurable: true\n      });\n      return _this2;\n    }\n\n    _createClass(AbortSignal, [{\n      key: \"toString\",\n      value: function toString() {\n        return '[object AbortSignal]';\n      }\n    }, {\n      key: \"dispatchEvent\",\n      value: function dispatchEvent(event) {\n        if (event.type === 'abort') {\n          this.aborted = true;\n\n          if (typeof this.onabort === 'function') {\n            this.onabort.call(this, event);\n          }\n        }\n\n        _get(_getPrototypeOf(AbortSignal.prototype), \"dispatchEvent\", this).call(this, event);\n      }\n    }]);\n\n    return AbortSignal;\n  }(Emitter);\n  var AbortController = /*#__PURE__*/function () {\n    function AbortController() {\n      _classCallCheck(this, AbortController);\n\n      // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and\n      // we want Object.keys(new AbortController()) to be [] for compat with the native impl\n      Object.defineProperty(this, 'signal', {\n        value: new AbortSignal(),\n        writable: true,\n        configurable: true\n      });\n    }\n\n    _createClass(AbortController, [{\n      key: \"abort\",\n      value: function abort() {\n        var event;\n\n        try {\n          event = new Event('abort');\n        } catch (e) {\n          if (typeof document !== 'undefined') {\n            if (!document.createEvent) {\n              // For Internet Explorer 8:\n              event = document.createEventObject();\n              event.type = 'abort';\n            } else {\n              // For Internet Explorer 11:\n              event = document.createEvent('Event');\n              event.initEvent('abort', false, false);\n            }\n          } else {\n            // Fallback where document isn't available:\n            event = {\n              type: 'abort',\n              bubbles: false,\n              cancelable: false\n            };\n          }\n        }\n\n        this.signal.dispatchEvent(event);\n      }\n    }, {\n      key: \"toString\",\n      value: function toString() {\n        return '[object AbortController]';\n      }\n    }]);\n\n    return AbortController;\n  }();\n\n  if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n    // These are necessary to make sure that we get correct output for:\n    // Object.prototype.toString.call(new AbortController())\n    AbortController.prototype[Symbol.toStringTag] = 'AbortController';\n    AbortSignal.prototype[Symbol.toStringTag] = 'AbortSignal';\n  }\n\n  function polyfillNeeded(self) {\n    if (self.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL) {\n      console.log('__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL=true is set, will force install polyfill');\n      return true;\n    } // Note that the \"unfetch\" minimal fetch polyfill defines fetch() without\n    // defining window.Request, and this polyfill need to work on top of unfetch\n    // so the below feature detection needs the !self.AbortController part.\n    // The Request.prototype check is also needed because Safari versions 11.1.2\n    // up to and including 12.1.x has a window.AbortController present but still\n    // does NOT correctly implement abortable fetch:\n    // https://bugs.webkit.org/show_bug.cgi?id=174980#c2\n\n\n    return typeof self.Request === 'function' && !self.Request.prototype.hasOwnProperty('signal') || !self.AbortController;\n  }\n\n  (function (self) {\n\n    if (!polyfillNeeded(self)) {\n      return;\n    }\n\n    self.AbortController = AbortController;\n    self.AbortSignal = AbortSignal;\n  })(typeof self !== 'undefined' ? self : global);\n\n})));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(25)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcHRpbWFqZXQtZm9ybS8uLi9vcHRpbWFqZXQtYnVpbGRlci1zaGFyZWQvbm9kZV9tb2R1bGVzL2Fib3J0Y29udHJvbGxlci1wb2x5ZmlsbC9kaXN0L2Fib3J0Y29udHJvbGxlci1wb2x5ZmlsbC1vbmx5LmpzP2JlZTMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxFQUFFLEtBQTBDLEdBQUcsb0NBQU8sT0FBTztBQUFBO0FBQUE7QUFBQTtBQUFBLG9HQUFDO0FBQzlELEVBQUUsU0FBUztBQUNYLENBQUMsZUFBZTs7QUFFaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQixrQkFBa0I7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNkVBQTZFO0FBQzdFO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSx5Q0FBeUMsT0FBTztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7O0FBRUEseUNBQXlDLE9BQU87QUFDaEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSCxDQUFDIiwiZmlsZSI6IjI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIChmYWN0b3J5KSB7XG4gIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gIGZhY3RvcnkoKTtcbn0oKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuXG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XG4gICAgfTtcbiAgICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xuICB9XG5cbiAgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICAgIG8uX19wcm90b19fID0gcDtcbiAgICAgIHJldHVybiBvO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xuICB9XG5cbiAgZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTtcbiAgICBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlO1xuXG4gICAgdHJ5IHtcbiAgICAgIERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gICAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmO1xuICB9XG5cbiAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgIGlmIChjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgICAgcmV0dXJuIGNhbGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7XG4gIH1cblxuICBmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkge1xuICAgIHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkge1xuICAgICAgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLFxuICAgICAgICAgIHJlc3VsdDtcblxuICAgICAgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHtcbiAgICAgICAgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjtcblxuICAgICAgICByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9zdXBlclByb3BCYXNlKG9iamVjdCwgcHJvcGVydHkpIHtcbiAgICB3aGlsZSAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSkge1xuICAgICAgb2JqZWN0ID0gX2dldFByb3RvdHlwZU9mKG9iamVjdCk7XG4gICAgICBpZiAob2JqZWN0ID09PSBudWxsKSBicmVhaztcbiAgICB9XG5cbiAgICByZXR1cm4gb2JqZWN0O1xuICB9XG5cbiAgZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikge1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBSZWZsZWN0LmdldCkge1xuICAgICAgX2dldCA9IFJlZmxlY3QuZ2V0O1xuICAgIH0gZWxzZSB7XG4gICAgICBfZ2V0ID0gZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikge1xuICAgICAgICB2YXIgYmFzZSA9IF9zdXBlclByb3BCYXNlKHRhcmdldCwgcHJvcGVydHkpO1xuXG4gICAgICAgIGlmICghYmFzZSkgcmV0dXJuO1xuICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZSwgcHJvcGVydHkpO1xuXG4gICAgICAgIGlmIChkZXNjLmdldCkge1xuICAgICAgICAgIHJldHVybiBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkZXNjLnZhbHVlO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlciB8fCB0YXJnZXQpO1xuICB9XG5cbiAgdmFyIEVtaXR0ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEVtaXR0ZXIoKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRW1pdHRlcik7XG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnbGlzdGVuZXJzJywge1xuICAgICAgICB2YWx1ZToge30sXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhFbWl0dGVyLCBbe1xuICAgICAga2V5OiBcImFkZEV2ZW50TGlzdGVuZXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghKHR5cGUgaW4gdGhpcy5saXN0ZW5lcnMpKSB7XG4gICAgICAgICAgdGhpcy5saXN0ZW5lcnNbdHlwZV0gPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubGlzdGVuZXJzW3R5cGVdLnB1c2goY2FsbGJhY2spO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJyZW1vdmVFdmVudExpc3RlbmVyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoISh0eXBlIGluIHRoaXMubGlzdGVuZXJzKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzdGFjayA9IHRoaXMubGlzdGVuZXJzW3R5cGVdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gc3RhY2subGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgaWYgKHN0YWNrW2ldID09PSBjYWxsYmFjaykge1xuICAgICAgICAgICAgc3RhY2suc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkaXNwYXRjaEV2ZW50XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZGlzcGF0Y2hFdmVudChldmVudCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIGlmICghKGV2ZW50LnR5cGUgaW4gdGhpcy5saXN0ZW5lcnMpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRlYm91bmNlID0gZnVuY3Rpb24gZGVib3VuY2UoY2FsbGJhY2spIHtcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKF90aGlzLCBldmVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHN0YWNrID0gdGhpcy5saXN0ZW5lcnNbZXZlbnQudHlwZV07XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBzdGFjay5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBkZWJvdW5jZShzdGFja1tpXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQ7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEVtaXR0ZXI7XG4gIH0oKTtcblxuICB2YXIgQWJvcnRTaWduYWwgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9FbWl0dGVyKSB7XG4gICAgX2luaGVyaXRzKEFib3J0U2lnbmFsLCBfRW1pdHRlcik7XG5cbiAgICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEFib3J0U2lnbmFsKTtcblxuICAgIGZ1bmN0aW9uIEFib3J0U2lnbmFsKCkge1xuICAgICAgdmFyIF90aGlzMjtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFib3J0U2lnbmFsKTtcblxuICAgICAgX3RoaXMyID0gX3N1cGVyLmNhbGwodGhpcyk7IC8vIFNvbWUgdmVyc2lvbnMgb2YgYmFiZWwgZG9lcyBub3QgdHJhbnNwaWxlIHN1cGVyKCkgY29ycmVjdGx5IGZvciBJRSA8PSAxMCwgaWYgdGhlIHBhcmVudFxuICAgICAgLy8gY29uc3RydWN0b3IgaGFzIGZhaWxlZCB0byBydW4sIHRoZW4gXCJ0aGlzLmxpc3RlbmVyc1wiIHdpbGwgc3RpbGwgYmUgdW5kZWZpbmVkIGFuZCB0aGVuIHdlIGNhbGxcbiAgICAgIC8vIHRoZSBwYXJlbnQgY29uc3RydWN0b3IgZGlyZWN0bHkgaW5zdGVhZCBhcyBhIHdvcmthcm91bmQuIEZvciBnZW5lcmFsIGRldGFpbHMsIHNlZSBiYWJlbCBidWc6XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYmFiZWwvYmFiZWwvaXNzdWVzLzMwNDFcbiAgICAgIC8vIFRoaXMgaGFjayB3YXMgYWRkZWQgYXMgYSBmaXggZm9yIHRoZSBpc3N1ZSBkZXNjcmliZWQgaGVyZTpcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9GaW5hbmNpYWwtVGltZXMvcG9seWZpbGwtbGlicmFyeS9wdWxsLzU5I2lzc3VlY29tbWVudC00Nzc1NTgwNDJcblxuICAgICAgaWYgKCFfdGhpczIubGlzdGVuZXJzKSB7XG4gICAgICAgIEVtaXR0ZXIuY2FsbChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMikpO1xuICAgICAgfSAvLyBDb21wYXJlZCB0byBhc3NpZ25tZW50LCBPYmplY3QuZGVmaW5lUHJvcGVydHkgbWFrZXMgcHJvcGVydGllcyBub24tZW51bWVyYWJsZSBieSBkZWZhdWx0IGFuZFxuICAgICAgLy8gd2Ugd2FudCBPYmplY3Qua2V5cyhuZXcgQWJvcnRDb250cm9sbGVyKCkuc2lnbmFsKSB0byBiZSBbXSBmb3IgY29tcGF0IHdpdGggdGhlIG5hdGl2ZSBpbXBsXG5cblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMyKSwgJ2Fib3J0ZWQnLCB7XG4gICAgICAgIHZhbHVlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczIpLCAnb25hYm9ydCcsIHtcbiAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIF90aGlzMjtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoQWJvcnRTaWduYWwsIFt7XG4gICAgICBrZXk6IFwidG9TdHJpbmdcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuICdbb2JqZWN0IEFib3J0U2lnbmFsXSc7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImRpc3BhdGNoRXZlbnRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNwYXRjaEV2ZW50KGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC50eXBlID09PSAnYWJvcnQnKSB7XG4gICAgICAgICAgdGhpcy5hYm9ydGVkID0gdHJ1ZTtcblxuICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5vbmFib3J0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLm9uYWJvcnQuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoQWJvcnRTaWduYWwucHJvdG90eXBlKSwgXCJkaXNwYXRjaEV2ZW50XCIsIHRoaXMpLmNhbGwodGhpcywgZXZlbnQpO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBBYm9ydFNpZ25hbDtcbiAgfShFbWl0dGVyKTtcbiAgdmFyIEFib3J0Q29udHJvbGxlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQWJvcnRDb250cm9sbGVyKCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFib3J0Q29udHJvbGxlcik7XG5cbiAgICAgIC8vIENvbXBhcmVkIHRvIGFzc2lnbm1lbnQsIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBtYWtlcyBwcm9wZXJ0aWVzIG5vbi1lbnVtZXJhYmxlIGJ5IGRlZmF1bHQgYW5kXG4gICAgICAvLyB3ZSB3YW50IE9iamVjdC5rZXlzKG5ldyBBYm9ydENvbnRyb2xsZXIoKSkgdG8gYmUgW10gZm9yIGNvbXBhdCB3aXRoIHRoZSBuYXRpdmUgaW1wbFxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdzaWduYWwnLCB7XG4gICAgICAgIHZhbHVlOiBuZXcgQWJvcnRTaWduYWwoKSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKEFib3J0Q29udHJvbGxlciwgW3tcbiAgICAgIGtleTogXCJhYm9ydFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFib3J0KCkge1xuICAgICAgICB2YXIgZXZlbnQ7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBldmVudCA9IG5ldyBFdmVudCgnYWJvcnQnKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBpZiAoIWRvY3VtZW50LmNyZWF0ZUV2ZW50KSB7XG4gICAgICAgICAgICAgIC8vIEZvciBJbnRlcm5ldCBFeHBsb3JlciA4OlxuICAgICAgICAgICAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50T2JqZWN0KCk7XG4gICAgICAgICAgICAgIGV2ZW50LnR5cGUgPSAnYWJvcnQnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gRm9yIEludGVybmV0IEV4cGxvcmVyIDExOlxuICAgICAgICAgICAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgICAgICAgICAgICBldmVudC5pbml0RXZlbnQoJ2Fib3J0JywgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRmFsbGJhY2sgd2hlcmUgZG9jdW1lbnQgaXNuJ3QgYXZhaWxhYmxlOlxuICAgICAgICAgICAgZXZlbnQgPSB7XG4gICAgICAgICAgICAgIHR5cGU6ICdhYm9ydCcsXG4gICAgICAgICAgICAgIGJ1YmJsZXM6IGZhbHNlLFxuICAgICAgICAgICAgICBjYW5jZWxhYmxlOiBmYWxzZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNpZ25hbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwidG9TdHJpbmdcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuICdbb2JqZWN0IEFib3J0Q29udHJvbGxlcl0nO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBBYm9ydENvbnRyb2xsZXI7XG4gIH0oKTtcblxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gICAgLy8gVGhlc2UgYXJlIG5lY2Vzc2FyeSB0byBtYWtlIHN1cmUgdGhhdCB3ZSBnZXQgY29ycmVjdCBvdXRwdXQgZm9yOlxuICAgIC8vIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXcgQWJvcnRDb250cm9sbGVyKCkpXG4gICAgQWJvcnRDb250cm9sbGVyLnByb3RvdHlwZVtTeW1ib2wudG9TdHJpbmdUYWddID0gJ0Fib3J0Q29udHJvbGxlcic7XG4gICAgQWJvcnRTaWduYWwucHJvdG90eXBlW1N5bWJvbC50b1N0cmluZ1RhZ10gPSAnQWJvcnRTaWduYWwnO1xuICB9XG5cbiAgZnVuY3Rpb24gcG9seWZpbGxOZWVkZWQoc2VsZikge1xuICAgIGlmIChzZWxmLl9fRk9SQ0VfSU5TVEFMTF9BQk9SVENPTlRST0xMRVJfUE9MWUZJTEwpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdfX0ZPUkNFX0lOU1RBTExfQUJPUlRDT05UUk9MTEVSX1BPTFlGSUxMPXRydWUgaXMgc2V0LCB3aWxsIGZvcmNlIGluc3RhbGwgcG9seWZpbGwnKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gLy8gTm90ZSB0aGF0IHRoZSBcInVuZmV0Y2hcIiBtaW5pbWFsIGZldGNoIHBvbHlmaWxsIGRlZmluZXMgZmV0Y2goKSB3aXRob3V0XG4gICAgLy8gZGVmaW5pbmcgd2luZG93LlJlcXVlc3QsIGFuZCB0aGlzIHBvbHlmaWxsIG5lZWQgdG8gd29yayBvbiB0b3Agb2YgdW5mZXRjaFxuICAgIC8vIHNvIHRoZSBiZWxvdyBmZWF0dXJlIGRldGVjdGlvbiBuZWVkcyB0aGUgIXNlbGYuQWJvcnRDb250cm9sbGVyIHBhcnQuXG4gICAgLy8gVGhlIFJlcXVlc3QucHJvdG90eXBlIGNoZWNrIGlzIGFsc28gbmVlZGVkIGJlY2F1c2UgU2FmYXJpIHZlcnNpb25zIDExLjEuMlxuICAgIC8vIHVwIHRvIGFuZCBpbmNsdWRpbmcgMTIuMS54IGhhcyBhIHdpbmRvdy5BYm9ydENvbnRyb2xsZXIgcHJlc2VudCBidXQgc3RpbGxcbiAgICAvLyBkb2VzIE5PVCBjb3JyZWN0bHkgaW1wbGVtZW50IGFib3J0YWJsZSBmZXRjaDpcbiAgICAvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTc0OTgwI2MyXG5cblxuICAgIHJldHVybiB0eXBlb2Ygc2VsZi5SZXF1ZXN0ID09PSAnZnVuY3Rpb24nICYmICFzZWxmLlJlcXVlc3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KCdzaWduYWwnKSB8fCAhc2VsZi5BYm9ydENvbnRyb2xsZXI7XG4gIH1cblxuICAoZnVuY3Rpb24gKHNlbGYpIHtcblxuICAgIGlmICghcG9seWZpbGxOZWVkZWQoc2VsZikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzZWxmLkFib3J0Q29udHJvbGxlciA9IEFib3J0Q29udHJvbGxlcjtcbiAgICBzZWxmLkFib3J0U2lnbmFsID0gQWJvcnRTaWduYWw7XG4gIH0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiBnbG9iYWwpO1xuXG59KSkpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///24\n")},function(module,exports){eval('var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function("return this")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === "object") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcHRpbWFqZXQtZm9ybS8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanM/Y2QwMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///25\n')},function(module,exports,__webpack_require__){eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (false) { var throwOnDirectAccess, ReactIs; } else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = __webpack_require__(27)();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcHRpbWFqZXQtZm9ybS8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzP2Q3YmMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLElBQUksS0FBcUMsRUFBRSxxQ0FPMUM7QUFDRDtBQUNBO0FBQ0EsbUJBQW1CLG1CQUFPLENBQUMsRUFBNEI7QUFDdkQiLCJmaWxlIjoiMjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///26\n")},function(module,exports,__webpack_require__){"use strict";eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nvar ReactPropTypesSecret = __webpack_require__(28);\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcHRpbWFqZXQtZm9ybS8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcz9kN2EwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFYTs7QUFFYiwyQkFBMkIsbUJBQU8sQ0FBQyxFQUE0Qjs7QUFFL0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EiLCJmaWxlIjoiMjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgZWxlbWVudFR5cGU6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbSxcblxuICAgIGNoZWNrUHJvcFR5cGVzOiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///27\n")},function(module,exports,__webpack_require__){"use strict";eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcHRpbWFqZXQtZm9ybS8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcz81OWIwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFYTs7QUFFYjs7QUFFQSIsImZpbGUiOiIyOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///28\n")},function(__webpack_module__,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/*!\n * Signature Pad v2.3.2\n * https://github.com/szimek/signature_pad\n *\n * Copyright 2017 Szymon Nowak\n * Released under the MIT license\n *\n * The main idea and some parts of the code (e.g. drawing variable width Bézier curve) are taken from:\n * http://corner.squareup.com/2012/07/smoother-signatures.html\n *\n * Implementation of interpolation using cubic Bézier curves is taken from:\n * http://benknowscode.wordpress.com/2012/09/14/path-interpolation-using-cubic-bezier-and-control-point-estimation-in-javascript\n *\n * Algorithm for approximated length of a Bézier curve is taken from:\n * http://www.lemoda.net/maths/bezier-length/index.html\n *\n */\n\nfunction Point(x, y, time) {\n  this.x = x;\n  this.y = y;\n  this.time = time || new Date().getTime();\n}\n\nPoint.prototype.velocityFrom = function (start) {\n  return this.time !== start.time ? this.distanceTo(start) / (this.time - start.time) : 1;\n};\n\nPoint.prototype.distanceTo = function (start) {\n  return Math.sqrt(Math.pow(this.x - start.x, 2) + Math.pow(this.y - start.y, 2));\n};\n\nPoint.prototype.equals = function (other) {\n  return this.x === other.x && this.y === other.y && this.time === other.time;\n};\n\nfunction Bezier(startPoint, control1, control2, endPoint) {\n  this.startPoint = startPoint;\n  this.control1 = control1;\n  this.control2 = control2;\n  this.endPoint = endPoint;\n}\n\n// Returns approximated length.\nBezier.prototype.length = function () {\n  var steps = 10;\n  var length = 0;\n  var px = void 0;\n  var py = void 0;\n\n  for (var i = 0; i <= steps; i += 1) {\n    var t = i / steps;\n    var cx = this._point(t, this.startPoint.x, this.control1.x, this.control2.x, this.endPoint.x);\n    var cy = this._point(t, this.startPoint.y, this.control1.y, this.control2.y, this.endPoint.y);\n    if (i > 0) {\n      var xdiff = cx - px;\n      var ydiff = cy - py;\n      length += Math.sqrt(xdiff * xdiff + ydiff * ydiff);\n    }\n    px = cx;\n    py = cy;\n  }\n\n  return length;\n};\n\n/* eslint-disable no-multi-spaces, space-in-parens */\nBezier.prototype._point = function (t, start, c1, c2, end) {\n  return start * (1.0 - t) * (1.0 - t) * (1.0 - t) + 3.0 * c1 * (1.0 - t) * (1.0 - t) * t + 3.0 * c2 * (1.0 - t) * t * t + end * t * t * t;\n};\n\n/* eslint-disable */\n\n// http://stackoverflow.com/a/27078401/815507\nfunction throttle(func, wait, options) {\n  var context, args, result;\n  var timeout = null;\n  var previous = 0;\n  if (!options) options = {};\n  var later = function later() {\n    previous = options.leading === false ? 0 : Date.now();\n    timeout = null;\n    result = func.apply(context, args);\n    if (!timeout) context = args = null;\n  };\n  return function () {\n    var now = Date.now();\n    if (!previous && options.leading === false) previous = now;\n    var remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n      previous = now;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n    return result;\n  };\n}\n\nfunction SignaturePad(canvas, options) {\n  var self = this;\n  var opts = options || {};\n\n  this.velocityFilterWeight = opts.velocityFilterWeight || 0.7;\n  this.minWidth = opts.minWidth || 0.5;\n  this.maxWidth = opts.maxWidth || 2.5;\n  this.throttle = 'throttle' in opts ? opts.throttle : 16; // in miliseconds\n  this.minDistance = 'minDistance' in opts ? opts.minDistance : 5;\n\n  if (this.throttle) {\n    this._strokeMoveUpdate = throttle(SignaturePad.prototype._strokeUpdate, this.throttle);\n  } else {\n    this._strokeMoveUpdate = SignaturePad.prototype._strokeUpdate;\n  }\n\n  this.dotSize = opts.dotSize || function () {\n    return (this.minWidth + this.maxWidth) / 2;\n  };\n  this.penColor = opts.penColor || 'black';\n  this.backgroundColor = opts.backgroundColor || 'rgba(0,0,0,0)';\n  this.onBegin = opts.onBegin;\n  this.onEnd = opts.onEnd;\n\n  this._canvas = canvas;\n  this._ctx = canvas.getContext('2d');\n  this.clear();\n\n  // We need add these inline so they are available to unbind while still having\n  // access to 'self' we could use _.bind but it's not worth adding a dependency.\n  this._handleMouseDown = function (event) {\n    if (event.which === 1) {\n      self._mouseButtonDown = true;\n      self._strokeBegin(event);\n    }\n  };\n\n  this._handleMouseMove = function (event) {\n    if (self._mouseButtonDown) {\n      self._strokeMoveUpdate(event);\n    }\n  };\n\n  this._handleMouseUp = function (event) {\n    if (event.which === 1 && self._mouseButtonDown) {\n      self._mouseButtonDown = false;\n      self._strokeEnd(event);\n    }\n  };\n\n  this._handleTouchStart = function (event) {\n    if (event.targetTouches.length === 1) {\n      var touch = event.changedTouches[0];\n      self._strokeBegin(touch);\n    }\n  };\n\n  this._handleTouchMove = function (event) {\n    // Prevent scrolling.\n    event.preventDefault();\n\n    var touch = event.targetTouches[0];\n    self._strokeMoveUpdate(touch);\n  };\n\n  this._handleTouchEnd = function (event) {\n    var wasCanvasTouched = event.target === self._canvas;\n    if (wasCanvasTouched) {\n      event.preventDefault();\n      self._strokeEnd(event);\n    }\n  };\n\n  // Enable mouse and touch event handlers\n  this.on();\n}\n\n// Public methods\nSignaturePad.prototype.clear = function () {\n  var ctx = this._ctx;\n  var canvas = this._canvas;\n\n  ctx.fillStyle = this.backgroundColor;\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n  this._data = [];\n  this._reset();\n  this._isEmpty = true;\n};\n\nSignaturePad.prototype.fromDataURL = function (dataUrl) {\n  var _this = this;\n\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var image = new Image();\n  var ratio = options.ratio || window.devicePixelRatio || 1;\n  var width = options.width || this._canvas.width / ratio;\n  var height = options.height || this._canvas.height / ratio;\n\n  this._reset();\n  image.src = dataUrl;\n  image.onload = function () {\n    _this._ctx.drawImage(image, 0, 0, width, height);\n  };\n  this._isEmpty = false;\n};\n\nSignaturePad.prototype.toDataURL = function (type) {\n  var _canvas;\n\n  switch (type) {\n    case 'image/svg+xml':\n      return this._toSVG();\n    default:\n      for (var _len = arguments.length, options = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        options[_key - 1] = arguments[_key];\n      }\n\n      return (_canvas = this._canvas).toDataURL.apply(_canvas, [type].concat(options));\n  }\n};\n\nSignaturePad.prototype.on = function () {\n  this._handleMouseEvents();\n  this._handleTouchEvents();\n};\n\nSignaturePad.prototype.off = function () {\n  this._canvas.removeEventListener('mousedown', this._handleMouseDown);\n  this._canvas.removeEventListener('mousemove', this._handleMouseMove);\n  document.removeEventListener('mouseup', this._handleMouseUp);\n\n  this._canvas.removeEventListener('touchstart', this._handleTouchStart);\n  this._canvas.removeEventListener('touchmove', this._handleTouchMove);\n  this._canvas.removeEventListener('touchend', this._handleTouchEnd);\n};\n\nSignaturePad.prototype.isEmpty = function () {\n  return this._isEmpty;\n};\n\n// Private methods\nSignaturePad.prototype._strokeBegin = function (event) {\n  this._data.push([]);\n  this._reset();\n  this._strokeUpdate(event);\n\n  if (typeof this.onBegin === 'function') {\n    this.onBegin(event);\n  }\n};\n\nSignaturePad.prototype._strokeUpdate = function (event) {\n  var x = event.clientX;\n  var y = event.clientY;\n\n  var point = this._createPoint(x, y);\n  var lastPointGroup = this._data[this._data.length - 1];\n  var lastPoint = lastPointGroup && lastPointGroup[lastPointGroup.length - 1];\n  var isLastPointTooClose = lastPoint && point.distanceTo(lastPoint) < this.minDistance;\n\n  // Skip this point if it's too close to the previous one\n  if (!(lastPoint && isLastPointTooClose)) {\n    var _addPoint = this._addPoint(point),\n        curve = _addPoint.curve,\n        widths = _addPoint.widths;\n\n    if (curve && widths) {\n      this._drawCurve(curve, widths.start, widths.end);\n    }\n\n    this._data[this._data.length - 1].push({\n      x: point.x,\n      y: point.y,\n      time: point.time,\n      color: this.penColor\n    });\n  }\n};\n\nSignaturePad.prototype._strokeEnd = function (event) {\n  var canDrawCurve = this.points.length > 2;\n  var point = this.points[0]; // Point instance\n\n  if (!canDrawCurve && point) {\n    this._drawDot(point);\n  }\n\n  if (point) {\n    var lastPointGroup = this._data[this._data.length - 1];\n    var lastPoint = lastPointGroup[lastPointGroup.length - 1]; // plain object\n\n    // When drawing a dot, there's only one point in a group, so without this check\n    // such group would end up with exactly the same 2 points.\n    if (!point.equals(lastPoint)) {\n      lastPointGroup.push({\n        x: point.x,\n        y: point.y,\n        time: point.time,\n        color: this.penColor\n      });\n    }\n  }\n\n  if (typeof this.onEnd === 'function') {\n    this.onEnd(event);\n  }\n};\n\nSignaturePad.prototype._handleMouseEvents = function () {\n  this._mouseButtonDown = false;\n\n  this._canvas.addEventListener('mousedown', this._handleMouseDown);\n  this._canvas.addEventListener('mousemove', this._handleMouseMove);\n  document.addEventListener('mouseup', this._handleMouseUp);\n};\n\nSignaturePad.prototype._handleTouchEvents = function () {\n  // Pass touch events to canvas element on mobile IE11 and Edge.\n  this._canvas.style.msTouchAction = 'none';\n  this._canvas.style.touchAction = 'none';\n\n  this._canvas.addEventListener('touchstart', this._handleTouchStart);\n  this._canvas.addEventListener('touchmove', this._handleTouchMove);\n  this._canvas.addEventListener('touchend', this._handleTouchEnd);\n};\n\nSignaturePad.prototype._reset = function () {\n  this.points = [];\n  this._lastVelocity = 0;\n  this._lastWidth = (this.minWidth + this.maxWidth) / 2;\n  this._ctx.fillStyle = this.penColor;\n};\n\nSignaturePad.prototype._createPoint = function (x, y, time) {\n  var rect = this._canvas.getBoundingClientRect();\n\n  return new Point(x - rect.left, y - rect.top, time || new Date().getTime());\n};\n\nSignaturePad.prototype._addPoint = function (point) {\n  var points = this.points;\n  var tmp = void 0;\n\n  points.push(point);\n\n  if (points.length > 2) {\n    // To reduce the initial lag make it work with 3 points\n    // by copying the first point to the beginning.\n    if (points.length === 3) points.unshift(points[0]);\n\n    tmp = this._calculateCurveControlPoints(points[0], points[1], points[2]);\n    var c2 = tmp.c2;\n    tmp = this._calculateCurveControlPoints(points[1], points[2], points[3]);\n    var c3 = tmp.c1;\n    var curve = new Bezier(points[1], c2, c3, points[2]);\n    var widths = this._calculateCurveWidths(curve);\n\n    // Remove the first element from the list,\n    // so that we always have no more than 4 points in points array.\n    points.shift();\n\n    return { curve: curve, widths: widths };\n  }\n\n  return {};\n};\n\nSignaturePad.prototype._calculateCurveControlPoints = function (s1, s2, s3) {\n  var dx1 = s1.x - s2.x;\n  var dy1 = s1.y - s2.y;\n  var dx2 = s2.x - s3.x;\n  var dy2 = s2.y - s3.y;\n\n  var m1 = { x: (s1.x + s2.x) / 2.0, y: (s1.y + s2.y) / 2.0 };\n  var m2 = { x: (s2.x + s3.x) / 2.0, y: (s2.y + s3.y) / 2.0 };\n\n  var l1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);\n  var l2 = Math.sqrt(dx2 * dx2 + dy2 * dy2);\n\n  var dxm = m1.x - m2.x;\n  var dym = m1.y - m2.y;\n\n  var k = l2 / (l1 + l2);\n  var cm = { x: m2.x + dxm * k, y: m2.y + dym * k };\n\n  var tx = s2.x - cm.x;\n  var ty = s2.y - cm.y;\n\n  return {\n    c1: new Point(m1.x + tx, m1.y + ty),\n    c2: new Point(m2.x + tx, m2.y + ty)\n  };\n};\n\nSignaturePad.prototype._calculateCurveWidths = function (curve) {\n  var startPoint = curve.startPoint;\n  var endPoint = curve.endPoint;\n  var widths = { start: null, end: null };\n\n  var velocity = this.velocityFilterWeight * endPoint.velocityFrom(startPoint) + (1 - this.velocityFilterWeight) * this._lastVelocity;\n\n  var newWidth = this._strokeWidth(velocity);\n\n  widths.start = this._lastWidth;\n  widths.end = newWidth;\n\n  this._lastVelocity = velocity;\n  this._lastWidth = newWidth;\n\n  return widths;\n};\n\nSignaturePad.prototype._strokeWidth = function (velocity) {\n  return Math.max(this.maxWidth / (velocity + 1), this.minWidth);\n};\n\nSignaturePad.prototype._drawPoint = function (x, y, size) {\n  var ctx = this._ctx;\n\n  ctx.moveTo(x, y);\n  ctx.arc(x, y, size, 0, 2 * Math.PI, false);\n  this._isEmpty = false;\n};\n\nSignaturePad.prototype._drawCurve = function (curve, startWidth, endWidth) {\n  var ctx = this._ctx;\n  var widthDelta = endWidth - startWidth;\n  var drawSteps = Math.floor(curve.length());\n\n  ctx.beginPath();\n\n  for (var i = 0; i < drawSteps; i += 1) {\n    // Calculate the Bezier (x, y) coordinate for this step.\n    var t = i / drawSteps;\n    var tt = t * t;\n    var ttt = tt * t;\n    var u = 1 - t;\n    var uu = u * u;\n    var uuu = uu * u;\n\n    var x = uuu * curve.startPoint.x;\n    x += 3 * uu * t * curve.control1.x;\n    x += 3 * u * tt * curve.control2.x;\n    x += ttt * curve.endPoint.x;\n\n    var y = uuu * curve.startPoint.y;\n    y += 3 * uu * t * curve.control1.y;\n    y += 3 * u * tt * curve.control2.y;\n    y += ttt * curve.endPoint.y;\n\n    var width = startWidth + ttt * widthDelta;\n    this._drawPoint(x, y, width);\n  }\n\n  ctx.closePath();\n  ctx.fill();\n};\n\nSignaturePad.prototype._drawDot = function (point) {\n  var ctx = this._ctx;\n  var width = typeof this.dotSize === 'function' ? this.dotSize() : this.dotSize;\n\n  ctx.beginPath();\n  this._drawPoint(point.x, point.y, width);\n  ctx.closePath();\n  ctx.fill();\n};\n\nSignaturePad.prototype._fromData = function (pointGroups, drawCurve, drawDot) {\n  for (var i = 0; i < pointGroups.length; i += 1) {\n    var group = pointGroups[i];\n\n    if (group.length > 1) {\n      for (var j = 0; j < group.length; j += 1) {\n        var rawPoint = group[j];\n        var point = new Point(rawPoint.x, rawPoint.y, rawPoint.time);\n        var color = rawPoint.color;\n\n        if (j === 0) {\n          // First point in a group. Nothing to draw yet.\n\n          // All points in the group have the same color, so it's enough to set\n          // penColor just at the beginning.\n          this.penColor = color;\n          this._reset();\n\n          this._addPoint(point);\n        } else if (j !== group.length - 1) {\n          // Middle point in a group.\n          var _addPoint2 = this._addPoint(point),\n              curve = _addPoint2.curve,\n              widths = _addPoint2.widths;\n\n          if (curve && widths) {\n            drawCurve(curve, widths, color);\n          }\n        } else {\n          // Last point in a group. Do nothing.\n        }\n      }\n    } else {\n      this._reset();\n      var _rawPoint = group[0];\n      drawDot(_rawPoint);\n    }\n  }\n};\n\nSignaturePad.prototype._toSVG = function () {\n  var _this2 = this;\n\n  var pointGroups = this._data;\n  var canvas = this._canvas;\n  var ratio = Math.max(window.devicePixelRatio || 1, 1);\n  var minX = 0;\n  var minY = 0;\n  var maxX = canvas.width / ratio;\n  var maxY = canvas.height / ratio;\n  var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n\n  svg.setAttributeNS(null, 'width', canvas.width);\n  svg.setAttributeNS(null, 'height', canvas.height);\n\n  this._fromData(pointGroups, function (curve, widths, color) {\n    var path = document.createElement('path');\n\n    // Need to check curve for NaN values, these pop up when drawing\n    // lines on the canvas that are not continuous. E.g. Sharp corners\n    // or stopping mid-stroke and than continuing without lifting mouse.\n    if (!isNaN(curve.control1.x) && !isNaN(curve.control1.y) && !isNaN(curve.control2.x) && !isNaN(curve.control2.y)) {\n      var attr = 'M ' + curve.startPoint.x.toFixed(3) + ',' + curve.startPoint.y.toFixed(3) + ' ' + ('C ' + curve.control1.x.toFixed(3) + ',' + curve.control1.y.toFixed(3) + ' ') + (curve.control2.x.toFixed(3) + ',' + curve.control2.y.toFixed(3) + ' ') + (curve.endPoint.x.toFixed(3) + ',' + curve.endPoint.y.toFixed(3));\n\n      path.setAttribute('d', attr);\n      path.setAttribute('stroke-width', (widths.end * 2.25).toFixed(3));\n      path.setAttribute('stroke', color);\n      path.setAttribute('fill', 'none');\n      path.setAttribute('stroke-linecap', 'round');\n\n      svg.appendChild(path);\n    }\n  }, function (rawPoint) {\n    var circle = document.createElement('circle');\n    var dotSize = typeof _this2.dotSize === 'function' ? _this2.dotSize() : _this2.dotSize;\n    circle.setAttribute('r', dotSize);\n    circle.setAttribute('cx', rawPoint.x);\n    circle.setAttribute('cy', rawPoint.y);\n    circle.setAttribute('fill', rawPoint.color);\n\n    svg.appendChild(circle);\n  });\n\n  var prefix = 'data:image/svg+xml;base64,';\n  var header = '<svg' + ' xmlns=\"http://www.w3.org/2000/svg\"' + ' xmlns:xlink=\"http://www.w3.org/1999/xlink\"' + (' viewBox=\"' + minX + ' ' + minY + ' ' + maxX + ' ' + maxY + '\"') + (' width=\"' + maxX + '\"') + (' height=\"' + maxY + '\"') + '>';\n  var body = svg.innerHTML;\n\n  // IE hack for missing innerHTML property on SVGElement\n  if (body === undefined) {\n    var dummy = document.createElement('dummy');\n    var nodes = svg.childNodes;\n    dummy.innerHTML = '';\n\n    for (var i = 0; i < nodes.length; i += 1) {\n      dummy.appendChild(nodes[i].cloneNode(true));\n    }\n\n    body = dummy.innerHTML;\n  }\n\n  var footer = '</svg>';\n  var data = header + body + footer;\n\n  return prefix + btoa(data);\n};\n\nSignaturePad.prototype.fromData = function (pointGroups) {\n  var _this3 = this;\n\n  this.clear();\n\n  this._fromData(pointGroups, function (curve, widths) {\n    return _this3._drawCurve(curve, widths.start, widths.end);\n  }, function (rawPoint) {\n    return _this3._drawDot(rawPoint);\n  });\n\n  this._data = pointGroups;\n};\n\nSignaturePad.prototype.toData = function () {\n  return this._data;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (SignaturePad);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///29\n")},function(module,exports,__webpack_require__){eval('!function(e,t){ true?module.exports=t():undefined}(this,function(){return function(e){function t(n){if(r[n])return r[n].exports;var o=r[n]={exports:{},id:n,loaded:!1};return e[n].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var r={};return t.m=e,t.c=r,t.p="",t(0)}([function(e,t){"use strict";function r(e){var t=e.getContext("2d"),r=e.width,n=e.height,o=t.getImageData(0,0,r,n).data,f=a(!0,r,n,o),i=a(!1,r,n,o),c=u(!0,r,n,o),d=u(!1,r,n,o),p=d-c+1,l=i-f+1,s=t.getImageData(c,f,p,l);return e.width=p,e.height=l,t.clearRect(0,0,p,l),t.putImageData(s,0,0),e}function n(e,t,r,n){return{red:n[4*(r*t+e)],green:n[4*(r*t+e)+1],blue:n[4*(r*t+e)+2],alpha:n[4*(r*t+e)+3]}}function o(e,t,r,o){return n(e,t,r,o).alpha}function a(e,t,r,n){for(var a=e?1:-1,u=e?0:r-1,f=u;e?f<r:f>-1;f+=a)for(var i=0;i<t;i++)if(o(i,f,t,n))return f;return null}function u(e,t,r,n){for(var a=e?1:-1,u=e?0:t-1,f=u;e?f<t:f>-1;f+=a)for(var i=0;i<r;i++)if(o(f,i,t,n))return f;return null}Object.defineProperty(t,"__esModule",{value:!0}),t.default=r}])});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcHRpbWFqZXQtZm9ybS8uL25vZGVfbW9kdWxlcy90cmltLWNhbnZhcy9idWlsZC9pbmRleC5qcz8zNjFlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGVBQWUsS0FBaUQsb0JBQW9CLFNBQW1ILENBQUMsaUJBQWlCLG1CQUFtQixjQUFjLDRCQUE0QixZQUFZLFVBQVUsaUJBQWlCLGdFQUFnRSxTQUFTLCtCQUErQixnQkFBZ0IsYUFBYSxjQUFjLCtLQUErSyx5RUFBeUUsb0JBQW9CLE9BQU8sZ0ZBQWdGLG9CQUFvQix3QkFBd0Isb0JBQW9CLCtCQUErQixXQUFXLGlCQUFpQixJQUFJLDJCQUEyQixZQUFZLG9CQUFvQiwrQkFBK0IsV0FBVyxpQkFBaUIsSUFBSSwyQkFBMkIsWUFBWSxzQ0FBc0MsU0FBUyxjQUFjLEdBQUciLCJmaWxlIjoiMzAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIhZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXSx0KTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzLnRyaW1DYW52YXM9dCgpOmUudHJpbUNhbnZhcz10KCl9KHRoaXMsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChuKXtpZihyW25dKXJldHVybiByW25dLmV4cG9ydHM7dmFyIG89cltuXT17ZXhwb3J0czp7fSxpZDpuLGxvYWRlZDohMX07cmV0dXJuIGVbbl0uY2FsbChvLmV4cG9ydHMsbyxvLmV4cG9ydHMsdCksby5sb2FkZWQ9ITAsby5leHBvcnRzfXZhciByPXt9O3JldHVybiB0Lm09ZSx0LmM9cix0LnA9XCJcIix0KDApfShbZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe3ZhciB0PWUuZ2V0Q29udGV4dChcIjJkXCIpLHI9ZS53aWR0aCxuPWUuaGVpZ2h0LG89dC5nZXRJbWFnZURhdGEoMCwwLHIsbikuZGF0YSxmPWEoITAscixuLG8pLGk9YSghMSxyLG4sbyksYz11KCEwLHIsbixvKSxkPXUoITEscixuLG8pLHA9ZC1jKzEsbD1pLWYrMSxzPXQuZ2V0SW1hZ2VEYXRhKGMsZixwLGwpO3JldHVybiBlLndpZHRoPXAsZS5oZWlnaHQ9bCx0LmNsZWFyUmVjdCgwLDAscCxsKSx0LnB1dEltYWdlRGF0YShzLDAsMCksZX1mdW5jdGlvbiBuKGUsdCxyLG4pe3JldHVybntyZWQ6bls0KihyKnQrZSldLGdyZWVuOm5bNCoocip0K2UpKzFdLGJsdWU6bls0KihyKnQrZSkrMl0sYWxwaGE6bls0KihyKnQrZSkrM119fWZ1bmN0aW9uIG8oZSx0LHIsbyl7cmV0dXJuIG4oZSx0LHIsbykuYWxwaGF9ZnVuY3Rpb24gYShlLHQscixuKXtmb3IodmFyIGE9ZT8xOi0xLHU9ZT8wOnItMSxmPXU7ZT9mPHI6Zj4tMTtmKz1hKWZvcih2YXIgaT0wO2k8dDtpKyspaWYobyhpLGYsdCxuKSlyZXR1cm4gZjtyZXR1cm4gbnVsbH1mdW5jdGlvbiB1KGUsdCxyLG4pe2Zvcih2YXIgYT1lPzE6LTEsdT1lPzA6dC0xLGY9dTtlP2Y8dDpmPi0xO2YrPWEpZm9yKHZhciBpPTA7aTxyO2krKylpZihvKGYsaSx0LG4pKXJldHVybiBmO3JldHVybiBudWxsfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuZGVmYXVsdD1yfV0pfSk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///30\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, "DWKitForm", function() { return /* reexport */ DWKitForm; });\n__webpack_require__.d(__webpack_exports__, "GridView", function() { return /* reexport */ grid_view_GridView; });\n__webpack_require__.d(__webpack_exports__, "CollectionEditor", function() { return /* reexport */ collection_editor_CollectionEditor; });\n__webpack_require__.d(__webpack_exports__, "BaseEditControl", function() { return /* reexport */ base_edit_control_BaseEditControl; });\n__webpack_require__.d(__webpack_exports__, "initDefaultState", function() { return /* reexport */ formdata["initDefaultState"]; });\n__webpack_require__.d(__webpack_exports__, "initDefaultStateFormUrl", function() { return /* reexport */ formdata["initDefaultStateFormUrl"]; });\n__webpack_require__.d(__webpack_exports__, "validate", function() { return /* reexport */ formdata["validate"]; });\n__webpack_require__.d(__webpack_exports__, "checkConditions", function() { return /* reexport */ formdata["checkConditions"]; });\n\n// EXTERNAL MODULE: external "react"\nvar external_react_ = __webpack_require__(0);\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/collection-editor/base-control.js\nfunction _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nvar isEqual = __webpack_require__(7);\n\nvar BaseControl = /*#__PURE__*/function (_Component) {\n  _inherits(BaseControl, _Component);\n\n  var _super = _createSuper(BaseControl);\n\n  function BaseControl() {\n    var _this;\n\n    _classCallCheck(this, BaseControl);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), "handleChange", function (e, data) {\n      _this.props.handleChange(_this.props.row, e, data);\n    });\n\n    return _this;\n  }\n\n  _createClass(BaseControl, [{\n    key: "shouldComponentUpdate",\n    value: function shouldComponentUpdate(nextProps) {\n      return !isEqual(this.props, nextProps);\n    }\n  }]);\n\n  return BaseControl;\n}(external_react_["Component"]);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/component-render-registry.js\nfunction component_render_registry_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction component_render_registry_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction component_render_registry_createClass(Constructor, protoProps, staticProps) { if (protoProps) component_render_registry_defineProperties(Constructor.prototype, protoProps); if (staticProps) component_render_registry_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction component_render_registry_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Renderers registry\n */\nvar ComponentRendererRegistry = /*#__PURE__*/function () {\n  function ComponentRendererRegistry() {\n    component_render_registry_classCallCheck(this, ComponentRendererRegistry);\n\n    component_render_registry_defineProperty(this, "map", {});\n  }\n\n  component_render_registry_createClass(ComponentRendererRegistry, [{\n    key: "register",\n    value: function register(name, renderer) {\n      if (registry.map[name]) {\n        throw new Error(\'Component \' + name + \' already registered!\');\n      }\n\n      registry.map[name] = renderer;\n    }\n  }, {\n    key: "draw",\n    value: function draw(name, options) {\n      var fn = registry.map[name];\n\n      if (!fn) {\n        fn = registry.map[\'null-control\'];\n        var nullOpts = {\n          \'data-buildertype\': name,\n          text: "".concat(name, " is unsupported")\n        };\n        return fn(nullOpts);\n      }\n\n      return fn(options);\n    }\n  }]);\n\n  return ComponentRendererRegistry;\n}();\n\nvar registry = new ComponentRendererRegistry();\nvar register = registry.register;\nvar draw = registry.draw;\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/collection-editor/checkbox-control.js\nfunction checkbox_control_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { checkbox_control_typeof = function _typeof(obj) { return typeof obj; }; } else { checkbox_control_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return checkbox_control_typeof(obj); }\n\nfunction checkbox_control_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction checkbox_control_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction checkbox_control_createClass(Constructor, protoProps, staticProps) { if (protoProps) checkbox_control_defineProperties(Constructor.prototype, protoProps); if (staticProps) checkbox_control_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction checkbox_control_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) checkbox_control_setPrototypeOf(subClass, superClass); }\n\nfunction checkbox_control_setPrototypeOf(o, p) { checkbox_control_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return checkbox_control_setPrototypeOf(o, p); }\n\nfunction checkbox_control_createSuper(Derived) { var hasNativeReflectConstruct = checkbox_control_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = checkbox_control_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = checkbox_control_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return checkbox_control_possibleConstructorReturn(this, result); }; }\n\nfunction checkbox_control_possibleConstructorReturn(self, call) { if (call && (checkbox_control_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return checkbox_control_assertThisInitialized(self); }\n\nfunction checkbox_control_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction checkbox_control_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction checkbox_control_getPrototypeOf(o) { checkbox_control_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return checkbox_control_getPrototypeOf(o); }\n\n\n\n\nvar checkbox_control_CheckboxControl = /*#__PURE__*/function (_BaseControl) {\n  checkbox_control_inherits(CheckboxControl, _BaseControl);\n\n  var _super = checkbox_control_createSuper(CheckboxControl);\n\n  function CheckboxControl() {\n    checkbox_control_classCallCheck(this, CheckboxControl);\n\n    return _super.apply(this, arguments);\n  }\n\n  checkbox_control_createClass(CheckboxControl, [{\n    key: "render",\n    value: function render() {\n      return draw(\'collection-checkbox\', {\n        me: this,\n        props: this.props\n      });\n    }\n  }]);\n\n  return CheckboxControl;\n}(BaseControl);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/collection-editor/custom-control.js\nfunction custom_control_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { custom_control_typeof = function _typeof(obj) { return typeof obj; }; } else { custom_control_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return custom_control_typeof(obj); }\n\nfunction custom_control_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction custom_control_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction custom_control_createClass(Constructor, protoProps, staticProps) { if (protoProps) custom_control_defineProperties(Constructor.prototype, protoProps); if (staticProps) custom_control_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction custom_control_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) custom_control_setPrototypeOf(subClass, superClass); }\n\nfunction custom_control_setPrototypeOf(o, p) { custom_control_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return custom_control_setPrototypeOf(o, p); }\n\nfunction custom_control_createSuper(Derived) { var hasNativeReflectConstruct = custom_control_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = custom_control_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = custom_control_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return custom_control_possibleConstructorReturn(this, result); }; }\n\nfunction custom_control_possibleConstructorReturn(self, call) { if (call && (custom_control_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return custom_control_assertThisInitialized(self); }\n\nfunction custom_control_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction custom_control_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction custom_control_getPrototypeOf(o) { custom_control_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return custom_control_getPrototypeOf(o); }\n\nfunction custom_control_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar custom_control_CustomControl = /*#__PURE__*/function (_Component) {\n  custom_control_inherits(CustomControl, _Component);\n\n  var _super = custom_control_createSuper(CustomControl);\n\n  function CustomControl() {\n    var _this;\n\n    custom_control_classCallCheck(this, CustomControl);\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(_args));\n\n    custom_control_defineProperty(custom_control_assertThisInitialized(_this), "handleEvent", function (args) {\n      if (!args.parameters) {\n        args.parameters = {};\n      }\n\n      if (!args.parameters.row) {\n        args.parameters.row = _this.props.row;\n      }\n\n      if (args.eventName === \'onChange\') {\n        _this.props.handleChange(_this.props.row, args.syntheticEvent, args);\n      } else {\n        _this.props.handleEvent(args);\n      }\n    });\n\n    custom_control_defineProperty(custom_control_assertThisInitialized(_this), "getAdditionalDataForControl", function (control, parameters, callback) {\n      if (!parameters) {\n        parameters = {};\n      }\n\n      if (!parameters.row) {\n        parameters.row = _this.props.row;\n      }\n\n      return _this.props.getAdditionalDataForControl(control, parameters, callback);\n    });\n\n    return _this;\n  }\n\n  custom_control_createClass(CustomControl, [{\n    key: "render",\n    value: function render() {\n      return draw(\'collection-custom-control\', {\n        getAdditionalDataForControl: this.getAdditionalDataForControl,\n        handleEvent: this.handleEvent,\n        props: this.props\n      });\n    }\n  }]);\n\n  return CustomControl;\n}(external_react_["Component"]);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/collection-editor/date-time-control.js\nfunction date_time_control_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { date_time_control_typeof = function _typeof(obj) { return typeof obj; }; } else { date_time_control_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return date_time_control_typeof(obj); }\n\nfunction date_time_control_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction date_time_control_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction date_time_control_createClass(Constructor, protoProps, staticProps) { if (protoProps) date_time_control_defineProperties(Constructor.prototype, protoProps); if (staticProps) date_time_control_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction date_time_control_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) date_time_control_setPrototypeOf(subClass, superClass); }\n\nfunction date_time_control_setPrototypeOf(o, p) { date_time_control_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return date_time_control_setPrototypeOf(o, p); }\n\nfunction date_time_control_createSuper(Derived) { var hasNativeReflectConstruct = date_time_control_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = date_time_control_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = date_time_control_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return date_time_control_possibleConstructorReturn(this, result); }; }\n\nfunction date_time_control_possibleConstructorReturn(self, call) { if (call && (date_time_control_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return date_time_control_assertThisInitialized(self); }\n\nfunction date_time_control_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction date_time_control_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction date_time_control_getPrototypeOf(o) { date_time_control_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return date_time_control_getPrototypeOf(o); }\n\n\n\n\nvar date_time_control_DateTimeControl = /*#__PURE__*/function (_BaseControl) {\n  date_time_control_inherits(DateTimeControl, _BaseControl);\n\n  var _super = date_time_control_createSuper(DateTimeControl);\n\n  function DateTimeControl() {\n    date_time_control_classCallCheck(this, DateTimeControl);\n\n    return _super.apply(this, arguments);\n  }\n\n  date_time_control_createClass(DateTimeControl, [{\n    key: "render",\n    value: function render() {\n      return draw(\'collection-date-time\', {\n        me: this,\n        props: this.props\n      });\n    }\n  }]);\n\n  return DateTimeControl;\n}(BaseControl);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/collection-editor/dropdown-control.js\nfunction dropdown_control_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { dropdown_control_typeof = function _typeof(obj) { return typeof obj; }; } else { dropdown_control_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return dropdown_control_typeof(obj); }\n\nfunction dropdown_control_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction dropdown_control_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction dropdown_control_createClass(Constructor, protoProps, staticProps) { if (protoProps) dropdown_control_defineProperties(Constructor.prototype, protoProps); if (staticProps) dropdown_control_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction dropdown_control_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) dropdown_control_setPrototypeOf(subClass, superClass); }\n\nfunction dropdown_control_setPrototypeOf(o, p) { dropdown_control_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return dropdown_control_setPrototypeOf(o, p); }\n\nfunction dropdown_control_createSuper(Derived) { var hasNativeReflectConstruct = dropdown_control_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = dropdown_control_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = dropdown_control_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return dropdown_control_possibleConstructorReturn(this, result); }; }\n\nfunction dropdown_control_possibleConstructorReturn(self, call) { if (call && (dropdown_control_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return dropdown_control_assertThisInitialized(self); }\n\nfunction dropdown_control_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction dropdown_control_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction dropdown_control_getPrototypeOf(o) { dropdown_control_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return dropdown_control_getPrototypeOf(o); }\n\n\n\n\nvar dropdown_control_DropdownControl = /*#__PURE__*/function (_BaseControl) {\n  dropdown_control_inherits(DropdownControl, _BaseControl);\n\n  var _super = dropdown_control_createSuper(DropdownControl);\n\n  function DropdownControl() {\n    dropdown_control_classCallCheck(this, DropdownControl);\n\n    return _super.apply(this, arguments);\n  }\n\n  dropdown_control_createClass(DropdownControl, [{\n    key: "render",\n    value: function render() {\n      return draw(\'collection-dropdown\', {\n        me: this,\n        props: this.props\n      });\n    }\n  }]);\n\n  return DropdownControl;\n}(BaseControl);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/collection-editor/input-control.js\nfunction input_control_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { input_control_typeof = function _typeof(obj) { return typeof obj; }; } else { input_control_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return input_control_typeof(obj); }\n\nfunction input_control_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction input_control_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction input_control_createClass(Constructor, protoProps, staticProps) { if (protoProps) input_control_defineProperties(Constructor.prototype, protoProps); if (staticProps) input_control_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction input_control_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) input_control_setPrototypeOf(subClass, superClass); }\n\nfunction input_control_setPrototypeOf(o, p) { input_control_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return input_control_setPrototypeOf(o, p); }\n\nfunction input_control_createSuper(Derived) { var hasNativeReflectConstruct = input_control_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = input_control_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = input_control_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return input_control_possibleConstructorReturn(this, result); }; }\n\nfunction input_control_possibleConstructorReturn(self, call) { if (call && (input_control_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return input_control_assertThisInitialized(self); }\n\nfunction input_control_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction input_control_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction input_control_getPrototypeOf(o) { input_control_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return input_control_getPrototypeOf(o); }\n\n\n\n\nvar input_control_InputControl = /*#__PURE__*/function (_BaseControl) {\n  input_control_inherits(InputControl, _BaseControl);\n\n  var _super = input_control_createSuper(InputControl);\n\n  function InputControl() {\n    input_control_classCallCheck(this, InputControl);\n\n    return _super.apply(this, arguments);\n  }\n\n  input_control_createClass(InputControl, [{\n    key: "render",\n    value: function render() {\n      return draw(\'collection-input\', {\n        me: this,\n        props: this.props\n      });\n    }\n  }]);\n\n  return InputControl;\n}(BaseControl);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/collection-editor/upload-control.js\nfunction upload_control_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { upload_control_typeof = function _typeof(obj) { return typeof obj; }; } else { upload_control_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return upload_control_typeof(obj); }\n\nfunction upload_control_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction upload_control_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction upload_control_createClass(Constructor, protoProps, staticProps) { if (protoProps) upload_control_defineProperties(Constructor.prototype, protoProps); if (staticProps) upload_control_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction upload_control_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) upload_control_setPrototypeOf(subClass, superClass); }\n\nfunction upload_control_setPrototypeOf(o, p) { upload_control_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return upload_control_setPrototypeOf(o, p); }\n\nfunction upload_control_createSuper(Derived) { var hasNativeReflectConstruct = upload_control_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = upload_control_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = upload_control_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return upload_control_possibleConstructorReturn(this, result); }; }\n\nfunction upload_control_possibleConstructorReturn(self, call) { if (call && (upload_control_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return upload_control_assertThisInitialized(self); }\n\nfunction upload_control_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction upload_control_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction upload_control_getPrototypeOf(o) { upload_control_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return upload_control_getPrototypeOf(o); }\n\n\n\n\nvar upload_control_UploadControl = /*#__PURE__*/function (_BaseControl) {\n  upload_control_inherits(UploadControl, _BaseControl);\n\n  var _super = upload_control_createSuper(UploadControl);\n\n  function UploadControl() {\n    upload_control_classCallCheck(this, UploadControl);\n\n    return _super.apply(this, arguments);\n  }\n\n  upload_control_createClass(UploadControl, [{\n    key: "render",\n    value: function render() {\n      return draw(\'collection-upload\', {\n        me: this,\n        props: this.props\n      });\n    }\n  }]);\n\n  return UploadControl;\n}(BaseControl);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/collection-editor/camera-control.js\nfunction camera_control_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { camera_control_typeof = function _typeof(obj) { return typeof obj; }; } else { camera_control_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return camera_control_typeof(obj); }\n\nfunction camera_control_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction camera_control_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction camera_control_createClass(Constructor, protoProps, staticProps) { if (protoProps) camera_control_defineProperties(Constructor.prototype, protoProps); if (staticProps) camera_control_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction camera_control_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) camera_control_setPrototypeOf(subClass, superClass); }\n\nfunction camera_control_setPrototypeOf(o, p) { camera_control_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return camera_control_setPrototypeOf(o, p); }\n\nfunction camera_control_createSuper(Derived) { var hasNativeReflectConstruct = camera_control_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = camera_control_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = camera_control_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return camera_control_possibleConstructorReturn(this, result); }; }\n\nfunction camera_control_possibleConstructorReturn(self, call) { if (call && (camera_control_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return camera_control_assertThisInitialized(self); }\n\nfunction camera_control_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction camera_control_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction camera_control_getPrototypeOf(o) { camera_control_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return camera_control_getPrototypeOf(o); }\n\n\n\n\nvar camera_control_CameraControl = /*#__PURE__*/function (_BaseControl) {\n  camera_control_inherits(CameraControl, _BaseControl);\n\n  var _super = camera_control_createSuper(CameraControl);\n\n  function CameraControl() {\n    camera_control_classCallCheck(this, CameraControl);\n\n    return _super.apply(this, arguments);\n  }\n\n  camera_control_createClass(CameraControl, [{\n    key: "render",\n    value: function render() {\n      return draw(\'collection-camera\', {\n        me: this,\n        props: this.props\n      });\n    }\n  }]);\n\n  return CameraControl;\n}(BaseControl);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/collection-editor/signature-control.js\nfunction signature_control_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { signature_control_typeof = function _typeof(obj) { return typeof obj; }; } else { signature_control_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return signature_control_typeof(obj); }\n\nfunction signature_control_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction signature_control_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction signature_control_createClass(Constructor, protoProps, staticProps) { if (protoProps) signature_control_defineProperties(Constructor.prototype, protoProps); if (staticProps) signature_control_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction signature_control_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) signature_control_setPrototypeOf(subClass, superClass); }\n\nfunction signature_control_setPrototypeOf(o, p) { signature_control_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return signature_control_setPrototypeOf(o, p); }\n\nfunction signature_control_createSuper(Derived) { var hasNativeReflectConstruct = signature_control_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = signature_control_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = signature_control_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return signature_control_possibleConstructorReturn(this, result); }; }\n\nfunction signature_control_possibleConstructorReturn(self, call) { if (call && (signature_control_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return signature_control_assertThisInitialized(self); }\n\nfunction signature_control_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction signature_control_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction signature_control_getPrototypeOf(o) { signature_control_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return signature_control_getPrototypeOf(o); }\n\n\n\n\nvar signature_control_SignatureControl = /*#__PURE__*/function (_BaseControl) {\n  signature_control_inherits(SignatureControl, _BaseControl);\n\n  var _super = signature_control_createSuper(SignatureControl);\n\n  function SignatureControl() {\n    signature_control_classCallCheck(this, SignatureControl);\n\n    return _super.apply(this, arguments);\n  }\n\n  signature_control_createClass(SignatureControl, [{\n    key: "render",\n    value: function render() {\n      return draw(\'collection-signature\', {\n        me: this,\n        props: this.props\n      });\n    }\n  }]);\n\n  return SignatureControl;\n}(BaseControl);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/camera.js\nfunction camera_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { camera_typeof = function _typeof(obj) { return typeof obj; }; } else { camera_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return camera_typeof(obj); }\n\nfunction camera_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction camera_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction camera_createClass(Constructor, protoProps, staticProps) { if (protoProps) camera_defineProperties(Constructor.prototype, protoProps); if (staticProps) camera_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction camera_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) camera_setPrototypeOf(subClass, superClass); }\n\nfunction camera_setPrototypeOf(o, p) { camera_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return camera_setPrototypeOf(o, p); }\n\nfunction camera_createSuper(Derived) { var hasNativeReflectConstruct = camera_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = camera_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = camera_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return camera_possibleConstructorReturn(this, result); }; }\n\nfunction camera_possibleConstructorReturn(self, call) { if (call && (camera_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return camera_assertThisInitialized(self); }\n\nfunction camera_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction camera_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction camera_getPrototypeOf(o) { camera_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return camera_getPrototypeOf(o); }\n\nfunction camera_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable react/no-direct-mutation-state */\n\n/* eslint-disable eqeqeq */\n\n\n\nvar camera_Camera = /*#__PURE__*/function (_Component) {\n  camera_inherits(Camera, _Component);\n\n  var _super = camera_createSuper(Camera);\n\n  function Camera() {\n    var _this;\n\n    camera_classCallCheck(this, Camera);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    camera_defineProperty(camera_assertThisInitialized(_this), "onUpload", function (file, response) {\n      var me = camera_assertThisInitialized(_this);\n\n      var parameters = {\n        name: file.name,\n        token: response.result.properties[\'Token\'],\n        success: response.success,\n        properties: response.result.properties\n      };\n\n      if (response.success) {\n        if (me.props.onChange) {\n          me.props.onChange(null, {\n            name: me.props.name,\n            propertyName: me.props.propertyName,\n            value: response.result.properties[\'Token\'],\n            parameters: parameters\n          });\n        }\n      } else {\n        if (me.props.onUploadFail) {\n          me.props.onUploadFail(null, {\n            name: me.props.name,\n            propertyName: me.props.propertyName,\n            message: response.result.message,\n            details: response.result.details,\n            success: false\n          });\n        }\n      }\n    });\n\n    camera_defineProperty(camera_assertThisInitialized(_this), "onClear", function (e) {\n      var me = camera_assertThisInitialized(_this);\n\n      if (me.props.onChange) {\n        me.props.onChange(null, {\n          name: me.props.name,\n          propertyName: me.props.propertyName,\n          value: null\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  camera_createClass(Camera, [{\n    key: "render",\n    value: function render() {\n      var onClear = this.onClear,\n          onUpload = this.onUpload;\n      return draw(\'camera\', {\n        handleChange: this.handleChange,\n        me: this,\n        onClear: onClear,\n        onUpload: onUpload,\n        props: this.props,\n        state: this.state\n      });\n    }\n  }]);\n\n  return Camera;\n}(external_react_["Component"]);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/helpers.js\nfunction isUndefined(variable) {\n  return typeof variable === \'undefined\';\n}\n\nfunction isDefined(variable) {\n  return !isUndefined(variable) && variable !== null;\n}\n\nfunction isNotEmptyString(variable) {\n  return isDefined(variable) && variable !== \'\';\n}\n\nfunction isEmptyObj(obj) {\n  if (!obj) return true;\n\n  for (var prop in obj) {\n    if (obj.hasOwnProperty(prop)) {\n      return false;\n    }\n  }\n\n  return JSON.stringify(obj) === JSON.stringify({});\n}\n\nvar values = function values(obj) {\n  return Object.values(obj || {});\n};\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/chart-view.js\nfunction chart_view_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { chart_view_typeof = function _typeof(obj) { return typeof obj; }; } else { chart_view_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return chart_view_typeof(obj); }\n\nfunction chart_view_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction chart_view_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction chart_view_createClass(Constructor, protoProps, staticProps) { if (protoProps) chart_view_defineProperties(Constructor.prototype, protoProps); if (staticProps) chart_view_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction chart_view_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) chart_view_setPrototypeOf(subClass, superClass); }\n\nfunction chart_view_setPrototypeOf(o, p) { chart_view_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return chart_view_setPrototypeOf(o, p); }\n\nfunction chart_view_createSuper(Derived) { var hasNativeReflectConstruct = chart_view_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = chart_view_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = chart_view_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return chart_view_possibleConstructorReturn(this, result); }; }\n\nfunction chart_view_possibleConstructorReturn(self, call) { if (call && (chart_view_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return chart_view_assertThisInitialized(self); }\n\nfunction chart_view_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction chart_view_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction chart_view_getPrototypeOf(o) { chart_view_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return chart_view_getPrototypeOf(o); }\n\n\n\n\n\nvar chart_view_isEqual = __webpack_require__(7);\n\nvar chart_view_ChartView = /*#__PURE__*/function (_Component) {\n  chart_view_inherits(ChartView, _Component);\n\n  var _super = chart_view_createSuper(ChartView);\n\n  function ChartView(props) {\n    var _this;\n\n    chart_view_classCallCheck(this, ChartView);\n\n    _this = _super.call(this, props);\n    _this.state = {};\n    return _this;\n  }\n\n  chart_view_createClass(ChartView, [{\n    key: "componentDidMount",\n    value: function componentDidMount() {\n      this.redrawChart();\n    }\n  }, {\n    key: "shouldComponentUpdate",\n    value: function shouldComponentUpdate(nextProps) {\n      return !chart_view_isEqual(this.props, nextProps);\n    }\n  }, {\n    key: "componentDidUpdate",\n    value: function componentDidUpdate() {\n      this.redrawChart();\n    }\n  }, {\n    key: "componentWillUnmount",\n    value: function componentWillUnmount() {\n      if (isDefined(this.state.chart)) {\n        this.state.chart.destroy();\n      }\n    }\n  }, {\n    key: "redrawChart",\n    value: function redrawChart() {\n      return draw(\'chart-view-redraw-chart\', {\n        chartData: this.getChartData(),\n        divId: this.getDivId(),\n        props: this.props,\n        state: this.state\n      });\n    }\n  }, {\n    key: "getDivId",\n    value: function getDivId() {\n      return \'dwkit-chart-\' + this.props.name;\n    }\n  }, {\n    key: "getChartData",\n    value: function getChartData() {\n      var data = [];\n\n      try {\n        data = typeof this.props.value == \'string\' ? JSON.parse(this.props.value) : this.props.value;\n      } catch (e) {\n        console.log(\'Can\\\'t parse to JSON\', this.props.value, this);\n      }\n\n      if (this.props.datasetCustom) {\n        var me = this;\n        var labels = [];\n\n        if (isDefined(me.props.dataLabels)) {\n          labels = me.props.dataLabels.split(\',\');\n        }\n\n        return {\n          labels: labels,\n          datasets: [{\n            label: me.props.datasetLabel,\n            steppedLine: me.props.datasetSteppedLine,\n            borderColor: me.props.datasetBorderColor,\n            backgroundColor: me.props.datasetBackgroundColor,\n            fill: me.props.datasetFill,\n            borderWidth: me.props.datasetBorderWidth,\n            data: data\n          }]\n        };\n      }\n\n      return this.copyObj(data);\n    }\n  }, {\n    key: "copyObj",\n    value: function copyObj(obj) {\n      if (null == obj || \'object\' != chart_view_typeof(obj)) {\n        return obj;\n      }\n\n      var copy = obj.constructor();\n\n      for (var attr in obj) {\n        if (obj.hasOwnProperty(attr)) {\n          copy[attr] = this.copyObj(obj[attr]);\n        }\n      }\n\n      return copy;\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      return draw(\'chart-view\', {\n        divId: this.getDivId(),\n        props: this.props,\n        state: this.state\n      });\n    }\n  }]);\n\n  return ChartView;\n}(external_react_["Component"]);\n\n\n// EXTERNAL MODULE: external "json5"\nvar external_json5_ = __webpack_require__(3);\nvar external_json5_default = /*#__PURE__*/__webpack_require__.n(external_json5_);\n\n// EXTERNAL MODULE: external "uuid"\nvar external_uuid_ = __webpack_require__(8);\nvar external_uuid_default = /*#__PURE__*/__webpack_require__.n(external_uuid_);\n\n// EXTERNAL MODULE: external "jquery"\nvar external_jquery_ = __webpack_require__(2);\nvar external_jquery_default = /*#__PURE__*/__webpack_require__.n(external_jquery_);\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/collection-editor.js\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { collection_editor_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction collection_editor_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { collection_editor_typeof = function _typeof(obj) { return typeof obj; }; } else { collection_editor_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return collection_editor_typeof(obj); }\n\nfunction collection_editor_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction collection_editor_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction collection_editor_createClass(Constructor, protoProps, staticProps) { if (protoProps) collection_editor_defineProperties(Constructor.prototype, protoProps); if (staticProps) collection_editor_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction collection_editor_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) collection_editor_setPrototypeOf(subClass, superClass); }\n\nfunction collection_editor_setPrototypeOf(o, p) { collection_editor_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return collection_editor_setPrototypeOf(o, p); }\n\nfunction collection_editor_createSuper(Derived) { var hasNativeReflectConstruct = collection_editor_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = collection_editor_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = collection_editor_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return collection_editor_possibleConstructorReturn(this, result); }; }\n\nfunction collection_editor_possibleConstructorReturn(self, call) { if (call && (collection_editor_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return collection_editor_assertThisInitialized(self); }\n\nfunction collection_editor_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction collection_editor_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction collection_editor_getPrototypeOf(o) { collection_editor_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return collection_editor_getPrototypeOf(o); }\n\nfunction collection_editor_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable react/no-direct-mutation-state */\n\n/* eslint-disable eqeqeq */\n\n\n\n\n\n\n\nvar collection_editor_isEqual = __webpack_require__(7);\n\nvar clone = __webpack_require__(10);\n\nvar collection_editor_CollectionEditor = /*#__PURE__*/function (_Component) {\n  collection_editor_inherits(CollectionEditor, _Component);\n\n  var _super = collection_editor_createSuper(CollectionEditor);\n\n  function CollectionEditor(props) {\n    var _this;\n\n    collection_editor_classCallCheck(this, CollectionEditor);\n\n    _this = _super.call(this, props);\n\n    collection_editor_defineProperty(collection_editor_assertThisInitialized(_this), "btnAdd", function () {\n      var obj = isUndefined(_this.props.defaultrow) ? {} : _this.props.defaultrow; //set temporary id to the new row\n\n      obj.__id = \'CLIENT_\' + external_uuid_default.a.v1();\n\n      _this.fillDefaultValues(obj, _this.props.columns, _this.props.placeholders);\n\n      _this.state.data.push(obj);\n\n      if (_this.props.handleEvent) {\n        _this.props.handleEvent({\n          key: _this.props.name,\n          propertyName: _this.props.propertyName,\n          eventName: \'onAdd\',\n          parameters: {\n            rowIdx: _this.state.data.length - 1,\n            row: obj\n          }\n        });\n      }\n\n      _this.sendChangesToParent();\n    });\n\n    collection_editor_defineProperty(collection_editor_assertThisInitialized(_this), "handleChange", function (item, e, _ref) {\n      var name = _ref.name,\n          propertyName = _ref.propertyName,\n          value = _ref.value,\n          checked = _ref.checked,\n          additionalValues = _ref.additionalValues;\n\n      if (!_this.props.handleEvent && !_this.props.onChange) {\n        return;\n      }\n\n      var pn = propertyName ? propertyName : name;\n\n      if (isUndefined(value) && isDefined(checked)) {\n        item[pn] = checked;\n      } else {\n        item[pn] = value;\n      }\n\n      if (collection_editor_typeof(additionalValues) == "object") {\n        for (var p in additionalValues) {\n          var field = pn + "_" + p;\n          item[field] = additionalValues[p];\n        }\n      }\n\n      _this.sendChangesToParent();\n\n      if (e && e.preventDefault) {\n        e.preventDefault();\n      } else {\n        _this.forceUpdate();\n      }\n    });\n\n    _this.state = {\n      expanded: {},\n      data: []\n    };\n    return _this;\n  }\n\n  collection_editor_createClass(CollectionEditor, [{\n    key: "applyCollapseAll",\n    value: function applyCollapseAll(data) {\n      for (var p in data) {\n        if (isUndefined(this.state.expanded[p])) {\n          this.state.expanded[p] = false;\n        }\n      }\n    }\n  }, {\n    key: "getFilteredItems",\n    value: function getFilteredItems(array, filter) {\n      var items = [];\n\n      if (array === undefined) {\n        return items;\n      }\n\n      if (filter !== undefined) {\n        return array.filter(function (r) {\n          return filter.IsRowMatched(r);\n        });\n      }\n\n      return array;\n    }\n  }, {\n    key: "btnDelete",\n    value: function btnDelete(index, rows) {\n      if (!this.props.handleEvent && !this.props.onChange) {\n        return;\n      }\n\n      if (rows === undefined) {\n        rows = this.state.data;\n      }\n\n      var obj = rows[index];\n      rows.splice(index, 1);\n\n      if (this.props.handleEvent) {\n        this.props.handleEvent({\n          key: this.props.name,\n          propertyName: this.props.propertyName,\n          eventName: \'onDelete\',\n          parameters: {\n            rowIdx: index,\n            row: obj\n          }\n        });\n      }\n\n      this.sendChangesToParent();\n    }\n  }, {\n    key: "btnAddChild",\n    value: function btnAddChild(index, rows) {\n      if (rows === undefined) {\n        rows = isUndefined(this.state.data) ? [] : this.state.data;\n      }\n\n      var objParent = rows[index];\n      var obj = isUndefined(this.props.defaultrow) ? {} : _objectSpread({}, this.props.defaultrow); //set temporary id to the new row\n\n      obj.__id = \'CLIENT_\' + external_uuid_default.a.v1();\n      this.fillDefaultValues(obj, this.props.columns, this.props.placeholders);\n\n      if (this.props.parentIdField) {\n        obj[this.props.parentIdField] = objParent[this.props.idField] || objParent[\'__id\'];\n        rows.push(obj);\n      } else {\n        if (!Array.isArray(objParent[this.props.childrenField])) // parent has no child elements\n          {\n            objParent[this.props.childrenField] = [];\n          }\n\n        objParent[this.props.childrenField].push(obj);\n      }\n\n      if (this.props.handleEvent) {\n        this.props.handleEvent({\n          key: this.props.name,\n          propertyName: this.props.propertyName,\n          eventName: \'onAddChild\',\n          parameters: {\n            rowIdx: rows.length - 1,\n            row: obj\n          }\n        });\n      }\n\n      this.sendChangesToParent();\n    }\n  }, {\n    key: "fillDefaultValues",\n    value: function fillDefaultValues(obj, columns, placeholders) {\n      if (!columns || !placeholders) {\n        return;\n      }\n\n      for (var j = 0; j < columns.length; j++) {\n        var colName = undefined;\n\n        if (collection_editor_typeof(columns[j]) === \'object\') {\n          colName = columns[j].key;\n        } else {\n          colName = columns[j];\n        }\n\n        var ps = placeholders[colName];\n\n        if (Array.isArray(ps) && ps.length > 0) {\n          var model = ps[0];\n\n          if (model) {\n            var propertyName = colName;\n\n            if (model.propertyName) {\n              propertyName = model.propertyName;\n            }\n\n            if (model.defaultValue) {\n              obj[propertyName] = model.defaultValue;\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: "copyForParentId",\n    value: function copyForParentId(rows, sourceObj, newParentId) {\n      var _this2 = this;\n\n      var copied = clone(sourceObj);\n      copied[\'__id\'] = \'CLIENT_\' + external_uuid_default.a.v1();\n      delete copied[this.props.idField];\n      copied[this.props.parentIdField] = newParentId;\n      rows.filter(function (r) {\n        return r[_this2.props.parentIdField] === (sourceObj[_this2.props.idField] || sourceObj[\'__id\']);\n      }).forEach(function (r) {\n        return _this2.copyForParentId(rows, r, copied[\'__id\']);\n      });\n      rows.push(copied);\n      return copied;\n    }\n  }, {\n    key: "resetIdsRecursive",\n    value: function resetIdsRecursive(obj) {\n      var _this3 = this;\n\n      obj[\'__id\'] = \'CLIENT_\' + external_uuid_default.a.v1();\n      delete obj[this.props.idField];\n\n      if (Array.isArray(obj[this.props.childrenField])) {\n        obj[this.props.childrenField].forEach(function (c) {\n          return _this3.resetIdsRecursive(c);\n        });\n      }\n    }\n  }, {\n    key: "btnCopy",\n    value: function btnCopy(index, rows) {\n      if (!rows) {\n        rows = this.state.data;\n      }\n\n      var sourceObj = rows[index];\n      var copied;\n\n      if (this.props.parentIdField && sourceObj.hasOwnProperty(this.props.parentIdField)) {\n        copied = this.copyForParentId(rows, sourceObj, sourceObj[this.props.parentIdField]);\n      } else {\n        copied = clone(sourceObj);\n        this.resetIdsRecursive(copied);\n        rows.push(copied);\n      }\n\n      if (this.props.handleEvent) {\n        this.props.handleEvent({\n          key: this.props.name,\n          propertyName: this.props.propertyName,\n          eventName: \'onCopy\',\n          parameters: {\n            rowIdx: rows.length - 1,\n            row: copied\n          }\n        });\n      }\n\n      this.sendChangesToParent();\n    }\n  }, {\n    key: "onExpand",\n    value: function onExpand(i, value) {\n      this.state.expanded[i] = value;\n      this.forceUpdate();\n    }\n  }, {\n    key: "onDragOver",\n    value: function onDragOver(e) {\n      e.preventDefault();\n    }\n  }, {\n    key: "onDragStart",\n    value: function onDragStart(index, rows, e) {\n      e.dataTransfer.setData(\'index\', index);\n      var image = e.target;\n      if (image) image = image.parentElement;\n      if (image) image = image.parentElement;\n      if (image) e.dataTransfer.setDragImage(external_jquery_default()(e.target).parent().parent()[0], 0, 0);\n      this.state.dragElementIndex = index;\n      this.state.dragRows = rows;\n    }\n  }, {\n    key: "onDragEnd",\n    value: function onDragEnd(index, e) {\n      this.state.dragElementIndex = undefined;\n      this.state.dragRows = undefined;\n    }\n  }, {\n    key: "onDrop",\n    value: function onDrop(index, rows, e) {\n      var rowIndexA = this.state.dragElementIndex;\n      var rowsA = this.state.dragRows;\n      var rowIndexB = index;\n      var rowsB = rows;\n\n      if (isDefined(rowIndexA)) {\n        if (rowIndexB !== rowIndexA) {\n          if (this.props.parentIdField !== undefined && this.props.parentIdField !== \'\') {\n            rowsA[rowIndexA][this.props.parentIdField] = rowsB[rowIndexB][this.props.parentIdField];\n          }\n\n          rowsB.splice(rowIndexB, 0, rowsA.splice(rowIndexA, 1)[0]);\n          this.sendChangesToParent();\n        }\n\n        e.preventDefault();\n      }\n\n      return false;\n    }\n  }, {\n    key: "sendChangesToParent",\n    value: function sendChangesToParent() {\n      var rows = this.state.data;\n      var res = this.state.stringmode ? rows.length ? external_json5_default.a.stringify(rows) : [] : rows;\n\n      if (this.props.buildermode) {// do nothing, this.props.value is read only\n        // this.props.value = res;\n      } else {\n        if (this.props.onChange) {\n          this.props.onChange(null, {\n            name: this.props.name,\n            propertyName: this.props.propertyName,\n            value: res\n          });\n        } else {\n          this.props.handleEvent({\n            syntheticEvent: null,\n            key: this.props.name,\n            eventName: \'onChange\',\n            name: this.props.name,\n            value: res,\n            propertyName: this.props.propertyName\n          });\n        }\n      }\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      return draw(\'collection-editor\', {\n        applyCollapseAll: this.applyCollapseAll,\n        btnAdd: this.btnAdd,\n        btnAddChild: this.btnAddChild,\n        btnCopy: this.btnCopy,\n        btnDelete: this.btnDelete,\n        getFilteredItems: this.getFilteredItems,\n        handleChange: this.handleChange,\n        me: this,\n        onExpand: this.onExpand,\n        onDragStart: this.onDragStart,\n        onDragEnd: this.onDragEnd,\n        onDragOver: this.onDragOver,\n        onDrop: this.onDrop,\n        props: this.props,\n        state: this.state\n      });\n    }\n  }], [{\n    key: "getDerivedStateFromProps",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var newState = null;\n\n      if (!collection_editor_isEqual(prevState.originalValue, nextProps.value)) {\n        newState = {};\n        newState.originalValue = clone(nextProps.value);\n        var rows = nextProps.value == undefined ? [] : nextProps.value;\n\n        if (!Array.isArray(rows)) {\n          newState.data = rows.length ? external_json5_default.a.parse(rows) : [];\n          newState.stringmode = true;\n        } else {\n          newState.data = clone(rows);\n          newState.stringmode = false;\n        }\n      }\n\n      return newState;\n    }\n  }]);\n\n  return CollectionEditor;\n}(external_react_["Component"]);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/container.js\nfunction container_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { container_typeof = function _typeof(obj) { return typeof obj; }; } else { container_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return container_typeof(obj); }\n\nfunction container_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction container_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction container_createClass(Constructor, protoProps, staticProps) { if (protoProps) container_defineProperties(Constructor.prototype, protoProps); if (staticProps) container_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction container_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) container_setPrototypeOf(subClass, superClass); }\n\nfunction container_setPrototypeOf(o, p) { container_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return container_setPrototypeOf(o, p); }\n\nfunction container_createSuper(Derived) { var hasNativeReflectConstruct = container_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = container_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = container_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return container_possibleConstructorReturn(this, result); }; }\n\nfunction container_possibleConstructorReturn(self, call) { if (call && (container_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return container_assertThisInitialized(self); }\n\nfunction container_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction container_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction container_getPrototypeOf(o) { container_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return container_getPrototypeOf(o); }\n\n\n\n\nvar container_Container = /*#__PURE__*/function (_Component) {\n  container_inherits(Container, _Component);\n\n  var _super = container_createSuper(Container);\n\n  function Container(props) {\n    var _this;\n\n    container_classCallCheck(this, Container);\n\n    _this = _super.call(this, props);\n    _this.state = {};\n    return _this;\n  }\n\n  container_createClass(Container, [{\n    key: "render",\n    value: function render() {\n      return draw(\'container\', {\n        props: this.props\n      });\n    }\n  }]);\n\n  return Container;\n}(external_react_["Component"]);\n\n\n// EXTERNAL MODULE: external "moment"\nvar external_moment_ = __webpack_require__(6);\nvar external_moment_default = /*#__PURE__*/__webpack_require__.n(external_moment_);\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/dwkit-util.js\nfunction dwKitDateFormat(defaultValue) {\n  if (window.DWKitLang && window.DWKitLang.common && window.DWKitLang.common.dateFormat) {\n    return window.DWKitLang.common.dateFormat;\n  }\n\n  return defaultValue;\n}\n\nfunction dwKitTimeFormat(defaultValue) {\n  if (window.DWKitLang && window.DWKitLang.common && window.DWKitLang.common.timeFormat) {\n    return window.DWKitLang.common.timeFormat;\n  }\n\n  return defaultValue;\n}\n\nfunction dwKitExternalControlList() {\n  if (window.DWKitFormSettings) {\n    return window.DWKitFormSettings.externalControlList;\n  }\n}\n\nfunction dwKitExternalControlRender() {\n  if (window.DWKitFormSettings) {\n    return window.DWKitFormSettings.externalControlRender;\n  }\n}\n\nfunction dwKitExternalControlsOnly() {\n  if (window.DWKitFormSettings) {\n    return window.DWKitFormSettings.externalControlsOnly;\n  }\n}\n\nfunction dwKitAdminLangCollectionEditor() {\n  if (window.DWKitAdminLang && window.DWKitAdminLang.collectioneditor) {\n    return window.DWKitAdminLang.collectioneditor;\n  }\n}\n\nfunction dwKitAdminLangButton() {\n  if (window.DWKitAdminLang && window.DWKitAdminLang.button) {\n    return window.DWKitAdminLang.button;\n  }\n}\n\nfunction dwKitAdminLangWorkflowBar() {\n  if (window.DWKitAdminLang && window.DWKitAdminLang.workflowbar) {\n    return window.DWKitAdminLang.workflowbar;\n  }\n}\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/date-picker.js\nfunction date_picker_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { date_picker_typeof = function _typeof(obj) { return typeof obj; }; } else { date_picker_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return date_picker_typeof(obj); }\n\nfunction date_picker_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction date_picker_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction date_picker_createClass(Constructor, protoProps, staticProps) { if (protoProps) date_picker_defineProperties(Constructor.prototype, protoProps); if (staticProps) date_picker_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction date_picker_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) date_picker_setPrototypeOf(subClass, superClass); }\n\nfunction date_picker_setPrototypeOf(o, p) { date_picker_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return date_picker_setPrototypeOf(o, p); }\n\nfunction date_picker_createSuper(Derived) { var hasNativeReflectConstruct = date_picker_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = date_picker_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = date_picker_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return date_picker_possibleConstructorReturn(this, result); }; }\n\nfunction date_picker_possibleConstructorReturn(self, call) { if (call && (date_picker_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return date_picker_assertThisInitialized(self); }\n\nfunction date_picker_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction date_picker_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction date_picker_getPrototypeOf(o) { date_picker_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return date_picker_getPrototypeOf(o); }\n\nfunction date_picker_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable react/no-direct-mutation-state */\n\n\n\n\n\n\nvar date_picker_DatePicker = /*#__PURE__*/function (_Component) {\n  date_picker_inherits(DatePicker, _Component);\n\n  var _super = date_picker_createSuper(DatePicker);\n\n  function DatePicker(props) {\n    var _this;\n\n    date_picker_classCallCheck(this, DatePicker);\n\n    _this = _super.call(this, props);\n\n    date_picker_defineProperty(date_picker_assertThisInitialized(_this), "handleChangeRaw", function (e) {\n      var value = e.target.value;\n      var result = value ? external_moment_default()(value, _this.state.dateFormat) : value;\n\n      _this.onChange(result);\n    });\n\n    date_picker_defineProperty(date_picker_assertThisInitialized(_this), "onChange", function (date) {\n      if (_this.props.readOnly) {\n        return;\n      }\n\n      if (isDefined(_this.props.onChange)) {\n        var value = null;\n\n        if (date) {\n          var type = _this.props.type;\n\n          if (type === \'date\') {\n            value = date.format(\'YYYY-MM-DD\');\n          } else {\n            value = date.isValid() ? date.toJSON() : \'Invalid date\';\n          }\n        }\n\n        _this.props.onChange(null, {\n          propertyName: _this.props.propertyName,\n          name: _this.props.name,\n          value: value\n        });\n      }\n    });\n\n    _this.state = {};\n    return _this;\n  }\n\n  date_picker_createClass(DatePicker, [{\n    key: "render",\n    value: function render() {\n      var type = this.props.type;\n      var date = this.props.value && type !== \'time\' ? external_moment_default()(this.props.value) : undefined;\n\n      if (date && !date.isValid()) {\n        date = undefined;\n      }\n\n      var controlProps = {\n        style: this.props.style,\n        className: this.props.className,\n        onBlur: this.props.onBlur,\n        onClick: this.props.onClick,\n        onFocus: this.props.onFocus,\n        onMouseEnter: this.props.onMouseEnter,\n        onMouseLeave: this.props.onMouseLeave\n      };\n      var datePickerProps = {};\n\n      if (type === \'date\') {\n        datePickerProps.dateFormat = dwKitDateFormat(\'DD.MM.YYYY\');\n      } else if (type === \'time\') {\n        datePickerProps.showTimeSelect = true;\n        datePickerProps.showTimeSelectOnly = true;\n        datePickerProps.timeIntervals = 10;\n        datePickerProps.dateFormat = dwKitTimeFormat();\n\n        if (!datePickerProps.dateFormat) {\n          datePickerProps.dateFormat = \'HH:mm\';\n          datePickerProps.timeFormat = \'HH:mm\';\n        }\n      } else if (type === \'datetime\') {\n        datePickerProps.showTimeSelect = true;\n\n        if (dwKitDateFormat()) {\n          datePickerProps.dateFormat = dwKitDateFormat() + \' \' + dwKitTimeFormat(\'HH:ss\');\n        } else {\n          datePickerProps.dateFormat = \'DD.MM.YYYY HH:mm\';\n          datePickerProps.timeFormat = \'HH:mm\';\n        }\n      }\n\n      this.state.dateFormat = datePickerProps.dateFormat;\n      return draw(\'date-picker\', {\n        controlProps: controlProps,\n        date: date,\n        datePickerProps: datePickerProps,\n        handleChangeRaw: this.handleChangeRaw,\n        onChange: this.onChange,\n        state: this.state,\n        placeholder: this.placeholder,\n        props: this.props\n      });\n    }\n  }]);\n\n  return DatePicker;\n}(external_react_["Component"]);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/dictionary.js\nfunction dictionary_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { dictionary_typeof = function _typeof(obj) { return typeof obj; }; } else { dictionary_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return dictionary_typeof(obj); }\n\nfunction dictionary_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction dictionary_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction dictionary_createClass(Constructor, protoProps, staticProps) { if (protoProps) dictionary_defineProperties(Constructor.prototype, protoProps); if (staticProps) dictionary_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction dictionary_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) dictionary_setPrototypeOf(subClass, superClass); }\n\nfunction dictionary_setPrototypeOf(o, p) { dictionary_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return dictionary_setPrototypeOf(o, p); }\n\nfunction dictionary_createSuper(Derived) { var hasNativeReflectConstruct = dictionary_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = dictionary_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = dictionary_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return dictionary_possibleConstructorReturn(this, result); }; }\n\nfunction dictionary_possibleConstructorReturn(self, call) { if (call && (dictionary_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return dictionary_assertThisInitialized(self); }\n\nfunction dictionary_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction dictionary_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction dictionary_getPrototypeOf(o) { dictionary_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return dictionary_getPrototypeOf(o); }\n\n/* eslint-disable react/no-direct-mutation-state */\n\n/* eslint-disable eqeqeq */\n\n\n\n\nvar dictionary_isEqual = __webpack_require__(7);\n\nvar dictionary_clone = __webpack_require__(10);\n\nvar dictionary_Dictionary = /*#__PURE__*/function (_Component) {\n  dictionary_inherits(Dictionary, _Component);\n\n  var _super = dictionary_createSuper(Dictionary);\n\n  function Dictionary(props) {\n    var _this;\n\n    dictionary_classCallCheck(this, Dictionary);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      options: [],\n      value: _this.props.value\n    };\n    _this.pageSize = props.pageSize;\n\n    if (!_this.pageSize) {\n      _this.pageSize = 100;\n    }\n\n    return _this;\n  }\n\n  dictionary_createClass(Dictionary, [{\n    key: "componentDidMount",\n    value: function componentDidMount() {\n      this.GetAdditionalData();\n    }\n  }, {\n    key: "shouldComponentUpdate",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      if (!dictionary_isEqual(this.state, nextState)) {\n        return true;\n      }\n\n      return !dictionary_isEqual(this.props, nextProps);\n    }\n  }, {\n    key: "componentDidUpdate",\n    value: function componentDidUpdate(prevProps, prevState) {\n      this.GetAdditionalData();\n    }\n  }, {\n    key: "GetAdditionalData",\n    value: function GetAdditionalData() {\n      var _this2 = this;\n\n      if (this.state.dataModel === undefined) {\n        if (console !== undefined && this.props.buildermode === true) {\n          console.log(\'Dictionary: Set DataModel label!\');\n        }\n      } else if (this.state.getAdditionalDataForControl === undefined) {\n        if (console !== undefined && this.props.buildermode === true) {\n          console.log(\'Dictionary: For paging on server need to set getAdditionalDataForControl func!\');\n        }\n      } else {\n        if (this.state.needFetch) {\n          var me = this;\n          var settings = {\n            model: this.state.dataModel,\n            filters: this.state.filters\n          };\n          var lastLoadPage = 0;\n\n          if (this.props.paging) {\n            settings.startIndex = 0;\n            settings.pageSize = this.pageSize;\n          }\n\n          this.state.isFetching = true;\n          this.state.needFetch = false;\n          this.state.getAdditionalDataForControl(this, settings, function (_ref) {\n            var items = _ref.items,\n                rowsCount = _ref.rowsCount;\n            //TODO cancellation token from async request\n            me.setData({\n              items: items,\n              rowsCount: rowsCount,\n              page: lastLoadPage\n            }, true);\n\n            if (_this2.state.needValueFetch) {\n              _this2.state.needValueFetch = false;\n\n              _this2.loadCurrentValue();\n            }\n          });\n        } else if (this.state.needValueFetch) {\n          this.state.needValueFetch = false;\n          this.loadCurrentValue();\n        }\n      }\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      var me = this;\n      var controlProps = {};\n\n      for (var p in this.props) {\n        if (p === \'parentIsForm\' || p === \'getAdditionalDataForControl\' || p === \'dataModel\' || p === \'clearable\' || p === \'columns\' || p === \'paging\' || p === \'pageSize\' || p === \'handleEvent\' || p === \'propertyName\' || p === \'textAsValue\') {\n          continue;\n        }\n\n        controlProps[p] = this.props[p];\n      }\n\n      if (this.props.readOnly) {\n        controlProps.disabled = true;\n      }\n\n      controlProps.options = this.state.options;\n      controlProps.onChange = this.onChange.bind(this);\n\n      if (this.props.paging) {\n        controlProps.onSearchChange = this.handleSearchChange.bind(this);\n        controlProps.onClose = this.onClose.bind(this);\n\n        if (this.state.open != undefined) {\n          if (this.state.open) {\n            controlProps.open = true;\n          } else {\n            controlProps.open = false;\n            this.state.open = undefined;\n            setTimeout(function () {\n              me.forceUpdate();\n            });\n          }\n        }\n      }\n\n      if (controlProps.multiple) {\n        if (controlProps.value === undefined || controlProps.value === null) {\n          controlProps.value = [];\n        }\n\n        if (!Array.isArray(controlProps.value)) {\n          controlProps.value = this.getArrayValues(controlProps.value);\n        }\n      }\n\n      controlProps.loading = this.state.isFetching;\n      controlProps.searchQuery = this.state.searchQuery;\n      return draw(\'dictionary\', {\n        propsControl: controlProps,\n        props: this.props\n      });\n    }\n  }, {\n    key: "onChange",\n    value: function onChange(e, _ref2) {\n      var _this3 = this;\n\n      var name = _ref2.name,\n          value = _ref2.value;\n      var loadFlag = false;\n\n      if (this.props.multiple) {\n        if (Array.isArray(value)) {\n          var isFind = false;\n          value.forEach(function (v) {\n            if (typeof v === "string" && v.lastIndexOf("__load", 0) === 0) {\n              isFind = true;\n            }\n          });\n\n          if (isFind) {\n            loadFlag = true;\n          }\n        }\n      } else if (typeof value === "string" && value.lastIndexOf("__load", 0) === 0) {\n        loadFlag = true;\n      }\n\n      if (loadFlag) {\n        this.state.open = true;\n        this.setState({\n          isFetching: true\n        });\n        this.loadNextPage();\n        value = this.props.value;\n      } else if (isDefined(this.state.open)) {\n        this.state.open = false;\n      }\n\n      var additionalValues = null;\n\n      if (!this.props.textAsValue) {\n        if (Array.isArray(value)) {\n          additionalValues = new Array();\n          value.forEach(function (v) {\n            if (typeof v === "string" && v.lastIndexOf("__load", 0) === 0) {\n              var filtered = _this3.state.options.filter(function (o) {\n                return o.key === v;\n              });\n\n              if (filtered.length > 0) {\n                additionalValues.push(filtered[0].values);\n              }\n            }\n          });\n        } else {\n          var filtered = this.state.options.filter(function (o) {\n            return o.key === value;\n          });\n\n          if (filtered.length > 0) {\n            additionalValues = filtered[0].values;\n          } else {\n            var columnsList = this.getCollumnsForFilter();\n\n            if (columnsList) {\n              additionalValues = {};\n              columnsList.split(",").forEach(function (k) {\n                additionalValues[k] = null;\n              });\n            }\n          }\n        }\n      }\n\n      if (this.props.handleEvent) {\n        this.props.handleEvent({\n          syntheticEvent: e,\n          key: this.props.name,\n          eventName: \'onChange\',\n          name: this.props.name,\n          propertyName: this.props.propertyName,\n          value: value,\n          additionalValues: additionalValues\n        });\n      }\n    }\n  }, {\n    key: "onClose",\n    value: function onClose() {\n      if (this.state.open != true && this.state.searchQuery) {\n        this.state.isFetching = true;\n        this.state.searchQuery = \'\';\n        this.state.lastLoadPage = -1;\n        this.loadNextPage(true);\n      } else if (this.state.open === false) {\n        this.forceUpdate();\n      }\n    }\n  }, {\n    key: "handleSearchChange",\n    value: function handleSearchChange(e, _ref3) {\n      var searchQuery = _ref3.searchQuery;\n      var me = this;\n\n      if (me.searchTimeout) {\n        clearTimeout(me.searchTimeout);\n      }\n\n      me.searchTimeout = setTimeout(function () {\n        me.searchTimeout = undefined;\n        me.setState({\n          isFetching: true,\n          searchQuery: searchQuery,\n          lastLoadPage: -1\n        });\n        me.loadNextPage(true);\n      }, 100);\n    }\n  }, {\n    key: "loadNextPage",\n    value: function loadNextPage(reset) {\n      var me = this;\n      var settings = {\n        model: this.state.dataModel\n      };\n      var page = this.state.lastLoadPage + 1;\n      settings.filters = me.state.filters;\n\n      if (me.state.searchQuery) {\n        settings.filters = [{\n          column: this.getCollumnsForFilter(),\n          term: \'like\',\n          value: me.state.searchQuery\n        }];\n      }\n\n      settings.startIndex = page * this.pageSize;\n      settings.pageSize = this.pageSize;\n      this.state.getAdditionalDataForControl(this, settings, function (_ref4) {\n        var items = _ref4.items,\n            rowsCount = _ref4.rowsCount;\n        me.setData({\n          items: items,\n          rowsCount: rowsCount,\n          page: page\n        }, reset);\n\n        if (reset) {\n          me.loadCurrentValue();\n        }\n      });\n    }\n  }, {\n    key: "setData",\n    value: function setData(_ref5, reset) {\n      var items = _ref5.items,\n          rowsCount = _ref5.rowsCount,\n          page = _ref5.page;\n      var options;\n\n      if (reset) {\n        options = dictionary_clone(items);\n\n        if (rowsCount > options.length) {\n          var text = (this.state.searchQuery != undefined ? this.state.searchQuery : \'\') + \'...\';\n          options.push({\n            key: \'__load\',\n            value: \'__load\',\n            text: text\n          });\n        }\n\n        if (this.props.clearable && !this.props.multiple) {\n          options.unshift({\n            key: \'__reset\',\n            value: \'\',\n            text: \'   \'\n          });\n        }\n\n        if (this.props.multiple) {\n          var values = this.getArrayValues(this.props.value);\n\n          for (var i = 0; i < values.length; i++) {\n            var value = values[i];\n\n            for (var j = 0; j < this.state.options.length; j++) {\n              var option = this.state.options[j];\n\n              if (value == option.value) {\n                options.unshift(option);\n              }\n            }\n          }\n        }\n      } else {\n        options = this.state.options;\n        var loadingItem = undefined;\n\n        if (options.length > 0 && options[options.length - 1].key === \'__load\') {\n          loadingItem = options.pop();\n          loadingItem.value = "__load_" + page;\n        }\n\n        for (var _i = 0; _i < items.length; _i++) {\n          var item = items[_i];\n\n          for (var _j = 0; _j < options.length; _j++) {\n            var _option = options[_j];\n\n            if (_option.key === item.key) {\n              options.splice(_j, 1);\n              break;\n            }\n          }\n\n          options.push(item);\n        }\n\n        if (loadingItem !== undefined && rowsCount > options.length) {\n          options.push(loadingItem);\n        }\n      }\n\n      if (this.props.textAsValue) {\n        options.forEach(function (o) {\n          if (o.key != "__load") {\n            o.value = o.text;\n          }\n        });\n      }\n\n      this.setState({\n        needFetch: false,\n        options: options,\n        rowsCount: rowsCount,\n        isFetching: false,\n        lastLoadPage: page\n      });\n\n      if (this.props.handleEvent) {\n        this.props.handleEvent({\n          syntheticEvent: undefined,\n          key: this.props.name,\n          eventName: \'onDataReceived\',\n          name: this.props.name,\n          propertyName: this.props.propertyName,\n          value: this.props.value,\n          parameters: {\n            options: options\n          }\n        });\n      }\n    }\n  }, {\n    key: "getArrayValues",\n    value: function getArrayValues(value) {\n      var res = value;\n\n      if (!Array.isArray(res)) {\n        var valueArray;\n\n        try {\n          valueArray = JSON.parse(res);\n        } catch (e) {}\n\n        if (!Array.isArray(valueArray)) {\n          valueArray = [res];\n        }\n\n        res = valueArray;\n      }\n\n      return res;\n    }\n  }, {\n    key: "loadCurrentValue",\n    value: function loadCurrentValue() {\n      var me = this;\n\n      if (this.props.value) {\n        if (this.props.multiple) {\n          var values = this.getArrayValues(this.props.value);\n          var unfindedValues = [];\n\n          for (var i = 0; i < values.length; i++) {\n            var value = values[i];\n            var isFind = false;\n\n            for (var j = 0; j < this.state.options.length; j++) {\n              var option = this.state.options[j];\n\n              if (option.value == value) {\n                isFind = true;\n                break;\n              }\n            }\n\n            if (!isFind) {\n              unfindedValues.push(value);\n            }\n          }\n\n          if (unfindedValues.length > 0) {\n            if (this.props.textAsValue) {\n              var options = this.state.options;\n              unfindedValues.forEach(function (value) {\n                options.push({\n                  value: value,\n                  text: value\n                });\n              });\n            } else {\n              var settings = {\n                model: this.state.dataModel\n              };\n              settings.filters = [{\n                column: "__id",\n                term: \'in\',\n                value: unfindedValues\n              }];\n              this.state.isFetching = true;\n              this.state.getAdditionalDataForControl(this, settings, function (_ref6) {\n                var items = _ref6.items;\n                me.addAdditionalOptions(items);\n              });\n            }\n          }\n        } else {\n          var _isFind = false;\n\n          for (var _i2 = 0; _i2 < this.state.options.length; _i2++) {\n            var _option2 = this.state.options[_i2];\n\n            if (_option2.value == this.props.value) {\n              _isFind = true;\n              break;\n            }\n          }\n\n          if (!_isFind) {\n            if (this.props.textAsValue) {\n              this.state.options.push({\n                value: me.props.value,\n                text: me.props.value\n              });\n            } else {\n              var _settings = {\n                model: this.state.dataModel\n              };\n              _settings.filters = [{\n                column: "__id",\n                term: \'=\',\n                value: me.props.value\n              }];\n              this.state.isFetching = true;\n              this.state.getAdditionalDataForControl(this, _settings, function (_ref7) {\n                var items = _ref7.items;\n                me.addAdditionalOptions(items);\n              });\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: "addAdditionalOptions",\n    value: function addAdditionalOptions(items) {\n      this.state.isFetching = false;\n\n      if (!Array.isArray(items) || !items.length) {\n        return;\n      }\n\n      var options = this.state.options;\n\n      for (var i = items.length - 1; i >= 0; i--) {\n        var isFind = false;\n\n        for (var j = 0; j < options.length; j++) {\n          if (options[j].key == items[i].key) {\n            isFind = true;\n            break;\n          }\n        }\n\n        if (!isFind) {\n          options.unshift(items[i]);\n        }\n      }\n\n      this.forceUpdate();\n    }\n  }, {\n    key: "getCollumnsForFilter",\n    value: function getCollumnsForFilter() {\n      if (!this.props.columns) {\n        return undefined;\n      }\n\n      var pattern = new RegExp(\' asc\', \'gi\');\n      var res = this.props.columns.replace(pattern, \'\');\n      pattern = new RegExp(\' desc\', \'gi\');\n      res = res.replace(pattern, \'\');\n      pattern = new RegExp(\' \', \'gi\');\n      res = res.replace(pattern, \'\');\n      return res;\n    }\n  }], [{\n    key: "getDerivedStateFromProps",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.dataModel !== prevState.dataModel) {\n        return {\n          getAdditionalDataForControl: nextProps.getAdditionalDataForControl,\n          dataModel: nextProps.dataModel,\n          needFetch: true,\n          needValueFetch: true,\n          filters: nextProps.filters\n        };\n      }\n\n      if (nextProps.paging && nextProps.value !== prevState.value && nextProps.value !== undefined) {\n        return {\n          needValueFetch: true,\n          value: nextProps.value\n        };\n      }\n\n      if (nextProps.filters != prevState.filters) {\n        return {\n          needFetch: true,\n          filters: nextProps.filters\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return Dictionary;\n}(external_react_["Component"]);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/dropdown-trigger.js\nfunction dropdown_trigger_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { dropdown_trigger_typeof = function _typeof(obj) { return typeof obj; }; } else { dropdown_trigger_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return dropdown_trigger_typeof(obj); }\n\nfunction dropdown_trigger_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction dropdown_trigger_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction dropdown_trigger_createClass(Constructor, protoProps, staticProps) { if (protoProps) dropdown_trigger_defineProperties(Constructor.prototype, protoProps); if (staticProps) dropdown_trigger_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction dropdown_trigger_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) dropdown_trigger_setPrototypeOf(subClass, superClass); }\n\nfunction dropdown_trigger_setPrototypeOf(o, p) { dropdown_trigger_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return dropdown_trigger_setPrototypeOf(o, p); }\n\nfunction dropdown_trigger_createSuper(Derived) { var hasNativeReflectConstruct = dropdown_trigger_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = dropdown_trigger_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = dropdown_trigger_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return dropdown_trigger_possibleConstructorReturn(this, result); }; }\n\nfunction dropdown_trigger_possibleConstructorReturn(self, call) { if (call && (dropdown_trigger_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return dropdown_trigger_assertThisInitialized(self); }\n\nfunction dropdown_trigger_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction dropdown_trigger_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction dropdown_trigger_getPrototypeOf(o) { dropdown_trigger_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return dropdown_trigger_getPrototypeOf(o); }\n\nfunction dropdown_trigger_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nvar dropdown_trigger_DropdownTrigger = /*#__PURE__*/function (_Component) {\n  dropdown_trigger_inherits(DropdownTrigger, _Component);\n\n  var _super = dropdown_trigger_createSuper(DropdownTrigger);\n\n  function DropdownTrigger(props) {\n    var _this;\n\n    dropdown_trigger_classCallCheck(this, DropdownTrigger);\n\n    _this = _super.call(this, props);\n\n    dropdown_trigger_defineProperty(dropdown_trigger_assertThisInitialized(_this), "onChange", function (e, _ref) {\n      var name = _ref.name,\n          value = _ref.value;\n\n      if (_this.state.opendialog == true) {\n        _this.state.opendialog = false;\n        return;\n      }\n\n      if (isDefined(_this.props.handleEvent)) {\n        _this.props.handleEvent({\n          e: e,\n          key: _this.props.name,\n          propertyName: _this.props.propertyName,\n          eventName: \'onItemClick\',\n          parameters: {\n            target: value\n          }\n        });\n      }\n    });\n\n    dropdown_trigger_defineProperty(dropdown_trigger_assertThisInitialized(_this), "onMouseDown", function (e) {\n      _this.state.opendialog = !Boolean(_this.state.opendialog);\n    });\n\n    _this.state = {};\n    return _this;\n  }\n\n  dropdown_trigger_createClass(DropdownTrigger, [{\n    key: "render",\n    value: function render() {\n      var controlProps = {};\n\n      for (var p in this.props) {\n        if (p === \'imageUrl\' || p === \'defaultValue\' || p === \'value\' || p === \'handleEvent\' || p === \'items\' || p === \'propertyName\') {\n          continue;\n        }\n\n        controlProps[p] = this.props[p];\n      }\n\n      controlProps.options = [];\n      this.props.items.forEach(function (item) {\n        var isSkip = false;\n\n        if (item.visibleCondition !== undefined && item.visibleCondition !== null && item.visibleCondition !== \'\') {\n          var args = \'\';\n          var body = \'return \' + item.visibleCondition;\n\n          try {\n            if (!new Function(args, body)()) {\n              isSkip = true;\n            }\n          } catch (e) {}\n        }\n\n        if (!isSkip) {\n          controlProps.options.push({\n            value: item.target,\n            text: item.title,\n            target: item.target\n          });\n        }\n      });\n      controlProps.value = \'\';\n      controlProps.onChange = this.onChange;\n      return draw(\'dropdown-trigger\', {\n        controlProps: controlProps,\n        onMouseDown: this.onMouseDown,\n        props: this.props\n      });\n    }\n  }]);\n\n  return DropdownTrigger;\n}(external_react_["Component"]);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/dropzone.js\nfunction dropzone_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { dropzone_typeof = function _typeof(obj) { return typeof obj; }; } else { dropzone_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return dropzone_typeof(obj); }\n\nfunction dropzone_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction dropzone_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction dropzone_createClass(Constructor, protoProps, staticProps) { if (protoProps) dropzone_defineProperties(Constructor.prototype, protoProps); if (staticProps) dropzone_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction dropzone_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) dropzone_setPrototypeOf(subClass, superClass); }\n\nfunction dropzone_setPrototypeOf(o, p) { dropzone_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return dropzone_setPrototypeOf(o, p); }\n\nfunction dropzone_createSuper(Derived) { var hasNativeReflectConstruct = dropzone_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = dropzone_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = dropzone_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return dropzone_possibleConstructorReturn(this, result); }; }\n\nfunction dropzone_possibleConstructorReturn(self, call) { if (call && (dropzone_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return dropzone_assertThisInitialized(self); }\n\nfunction dropzone_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction dropzone_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction dropzone_getPrototypeOf(o) { dropzone_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return dropzone_getPrototypeOf(o); }\n\nfunction dropzone_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nvar dropzone_Dropzone = /*#__PURE__*/function (_Component) {\n  dropzone_inherits(Dropzone, _Component);\n\n  var _super = dropzone_createSuper(Dropzone);\n\n  function Dropzone(props) {\n    var _this;\n\n    dropzone_classCallCheck(this, Dropzone);\n\n    _this = _super.call(this, props);\n\n    dropzone_defineProperty(dropzone_assertThisInitialized(_this), "fileUploadSuccess", function (file, response) {\n      var handleEvent = _this.props.additionalParams.handleEvent;\n      var onSuccess = _this.props.onSuccess;\n      var onFail = _this.props.onFail;\n\n      if (handleEvent || onSuccess || onFail) {\n        if (response.success) {\n          var parameters = {\n            name: file.name,\n            size: file.size,\n            token: response.result.properties[\'Token\'],\n            success: response.success,\n            properties: response.result.properties\n          };\n\n          if (onSuccess) {\n            onSuccess(_this.props.name, _this.props.propertyName, parameters);\n          } else if (handleEvent) {\n            handleEvent({\n              key: _this.props.name,\n              eventName: \'success\',\n              name: _this.props.name,\n              propertyName: _this.props.propertyName,\n              value: response.message,\n              parameters: parameters\n            });\n          }\n        } else {\n          var _parameters = {\n            name: file.name,\n            size: file.size,\n            message: response.message,\n            success: response.success,\n            details: response.details\n          };\n\n          if (onFail) {\n            onFail(_this.props.name, _this.props.propertyName, _parameters);\n          } else if (handleEvent) {\n            handleEvent({\n              key: _this.props.name,\n              eventName: \'fail\',\n              name: _this.props.name,\n              propertyName: _this.props.propertyName,\n              parameters: _parameters\n            });\n          }\n        }\n\n        if (_this.props.addRemoveLinks) {\n          setTimeout(function () {\n            file._removeLink.click();\n          }, 500);\n        }\n      }\n    });\n\n    _this.state = {\n      commands: props.commands,\n      states: props.states\n    };\n    return _this;\n  }\n\n  dropzone_createClass(Dropzone, [{\n    key: "componentDidMount",\n    value: function componentDidMount() {\n      this.isMount = true;\n    }\n  }, {\n    key: "componentWillUnmount",\n    value: function componentWillUnmount() {\n      this.isMount = false;\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      var me = this;\n      var parentItem = this.props.additionalParams.parentItem;\n      var iconFiletypes = undefined;\n\n      if (this.props.iconFiletypes) {\n        var types = this.props.iconFiletypes.split(\',\');\n\n        if (Array.isArray(types) && types.length > 0) {\n          iconFiletypes = [];\n          types.forEach(function (t) {\n            iconFiletypes.push(t.trim());\n          });\n        }\n      }\n\n      var djsConfig = {\n        addRemoveLinks: this.props.addRemoveLinks,\n        autoProcessQueue: this.props.autoProcessQueue && isDefined(this.props.postUrl)\n      };\n      var componentConfig = {\n        iconFiletypes: iconFiletypes,\n        showFiletypeIcon: this.props.showFiletypeIcon,\n        postUrl: isUndefined(this.props.postUrl) ? \'no-url\' : this.props.postUrl\n      };\n      var eventHandlers = {\n        success: me.fileUploadSuccess\n      };\n      return draw(\'dropzone\', {\n        componentConfig: componentConfig,\n        djsConfig: djsConfig,\n        eventHandlers: eventHandlers,\n        isForm: this.isForm(parentItem),\n        props: this.props\n      });\n    }\n  }, {\n    key: "isForm",\n    value: function isForm(m) {\n      return m && (m[\'data-buildertype\'] === \'form\' || m[\'data-buildertype\'] === \'formgroup\');\n    }\n  }, {\n    key: "getEvents",\n    value: function getEvents() {\n      return [\'drop\', \'dragstart\', \'dragend\', \'dragenter\', \'dragover\', \'dragleave\', \'addedfile\', \'removedfile\', \'thumbnail\', \'error\', \'processing\', \'uploadprogress\', \'sending\', \'success\', \'complete\', \'canceled\', \'maxfilesreached\', \'maxfilesexceeded\', \'processingmultiple\', \'sendingmultiple\', \'successmultiple\', \'completemultiple\', \'canceledmultiple\', \'totaluploadprogress\', \'reset\', \'queuecompleted\'];\n    }\n  }]);\n\n  return Dropzone;\n}(external_react_["Component"]);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/events-editor.js\nfunction events_editor_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { events_editor_typeof = function _typeof(obj) { return typeof obj; }; } else { events_editor_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return events_editor_typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction events_editor_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction events_editor_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { events_editor_ownKeys(Object(source), true).forEach(function (key) { events_editor_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { events_editor_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction events_editor_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction events_editor_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction events_editor_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction events_editor_createClass(Constructor, protoProps, staticProps) { if (protoProps) events_editor_defineProperties(Constructor.prototype, protoProps); if (staticProps) events_editor_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction events_editor_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) events_editor_setPrototypeOf(subClass, superClass); }\n\nfunction events_editor_setPrototypeOf(o, p) { events_editor_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return events_editor_setPrototypeOf(o, p); }\n\nfunction events_editor_createSuper(Derived) { var hasNativeReflectConstruct = events_editor_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = events_editor_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = events_editor_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return events_editor_possibleConstructorReturn(this, result); }; }\n\nfunction events_editor_possibleConstructorReturn(self, call) { if (call && (events_editor_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return events_editor_assertThisInitialized(self); }\n\nfunction events_editor_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction events_editor_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction events_editor_getPrototypeOf(o) { events_editor_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return events_editor_getPrototypeOf(o); }\n\n\n\n\n\nvar events_editor_EventsEditor = /*#__PURE__*/function (_Component) {\n  events_editor_inherits(EventsEditor, _Component);\n\n  var _super = events_editor_createSuper(EventsEditor);\n\n  function EventsEditor(props) {\n    var _this;\n\n    events_editor_classCallCheck(this, EventsEditor);\n\n    _this = _super.call(this, props);\n    _this.state = {};\n\n    var isOldData = function isOldData(event) {\n      return !!(event.actions || event.parameters || event.targets);\n    };\n\n    _this.props.events.forEach(function (eventName) {\n      var event = _this.props.data[eventName] || {\n        triggers: []\n      };\n\n      if (isUndefined(event) || isOldData(event) || isUndefined(event.triggers[0])) {\n        event = _this.props.data[eventName] = {\n          active: event.active || false,\n          triggers: [{\n            actions: event.actions || [],\n            parameters: event.parameters || [{\n              name: \'\',\n              value: \'\'\n            }],\n            targets: event.targets || []\n          }]\n        };\n\n        _this.handleChange(eventName, {}, {\n          name: \'triggers\',\n          checked: event.active || false,\n          value: event.triggers\n        });\n      }\n\n      ;\n    });\n\n    return _this;\n  }\n\n  events_editor_createClass(EventsEditor, [{\n    key: "render",\n    value: function render() {\n      var actionOptions = [];\n\n      if (Array.isArray(this.props.actions)) {\n        this.props.actions.forEach(function (a) {\n          if (typeof a == \'string\') {\n            actionOptions.push({\n              text: a,\n              value: a\n            });\n          } else {\n            actionOptions.push(events_editor_objectSpread(events_editor_objectSpread({}, a), {}, {\n              value: a.text\n            }));\n          }\n        });\n      }\n\n      var data = this.props.data;\n      var events = this.props.events;\n\n      var targetOptions = _toConsumableArray(this.props.targets);\n\n      events.forEach(function (e) {\n        var event;\n        if (isDefined(data) && (event = data[e])) if (event.triggers && Array.isArray(event.triggers)) event.triggers.forEach(function (tr) {\n          if (tr.actions) tr.actions.forEach(function (a) {\n            var isFind = false;\n\n            for (var i = 0; i < actionOptions.length; i++) {\n              if (a == actionOptions[i].value) {\n                isFind = true;\n                break;\n              }\n            }\n\n            if (!isFind) {\n              actionOptions.push({\n                text: a,\n                value: a\n              });\n            }\n          });\n          if (tr.targets) tr.targets.forEach(function (a) {\n            var isFind = false;\n\n            for (var i = 0; i < targetOptions.length; i++) {\n              if (a === targetOptions[i].value) {\n                isFind = true;\n                break;\n              }\n            }\n\n            if (!isFind) {\n              targetOptions.push({\n                text: a,\n                value: a\n              });\n            }\n          });\n        });\n      });\n      return draw(\'events-editor\', {\n        actionOptions: [].concat(actionOptions),\n        targetOptions: _toConsumableArray(targetOptions),\n        items: this.items,\n        me: this,\n        props: this.props\n      });\n    }\n  }, {\n    key: "initNewTrigger",\n    value: function initNewTrigger(eventName) {\n      var event;\n      var data = this.props.data;\n\n      if (data) {\n        if (!data[eventName]) data[eventName] = {};\n        event = data[eventName];\n        if (isUndefined(event.triggers)) event.triggers = [];\n        event.triggers.push({\n          actions: [],\n          targets: [],\n          parameters: [{\n            name: \'\',\n            value: \'\'\n          }]\n        });\n        this.handleChange(eventName, {}, {\n          name: \'triggers\',\n          checked: event.active || false,\n          value: event.triggers\n        });\n      }\n    }\n  }, {\n    key: "handleChange",\n    value: function handleChange(eventName, e, _ref) {\n      var name = _ref.name,\n          value = _ref.value,\n          checked = _ref.checked;\n      var event = this.props.data[eventName];\n\n      if (isUndefined(event)) {\n        event = {\n          triggers: []\n        };\n        this.props.data[eventName] = event;\n      }\n\n      if (isUndefined(value) && isDefined(checked)) {\n        event[name] = checked;\n      } else {\n        event[name] = value;\n      }\n\n      if (isDefined(this.props.onChange)) {\n        this.props.onChange(e, {\n          name: this.props.name,\n          value: this.props.data\n        });\n      }\n    }\n  }, {\n    key: "actionsOnAddItem",\n    value: function actionsOnAddItem(e, _ref2) {\n      var value = _ref2.value;\n\n      if (isDefined(this.props.onAdditionActions)) {\n        this.props.onAdditionActions(e, {\n          value: value\n        });\n      }\n    }\n  }]);\n\n  return EventsEditor;\n}(external_react_["Component"]);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/file-control.js\nfunction file_control_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { file_control_typeof = function _typeof(obj) { return typeof obj; }; } else { file_control_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return file_control_typeof(obj); }\n\nfunction file_control_toConsumableArray(arr) { return file_control_arrayWithoutHoles(arr) || file_control_iterableToArray(arr) || file_control_unsupportedIterableToArray(arr) || file_control_nonIterableSpread(); }\n\nfunction file_control_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction file_control_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return file_control_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return file_control_arrayLikeToArray(o, minLen); }\n\nfunction file_control_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\n\nfunction file_control_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return file_control_arrayLikeToArray(arr); }\n\nfunction file_control_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction file_control_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction file_control_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction file_control_createClass(Constructor, protoProps, staticProps) { if (protoProps) file_control_defineProperties(Constructor.prototype, protoProps); if (staticProps) file_control_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction file_control_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) file_control_setPrototypeOf(subClass, superClass); }\n\nfunction file_control_setPrototypeOf(o, p) { file_control_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return file_control_setPrototypeOf(o, p); }\n\nfunction file_control_createSuper(Derived) { var hasNativeReflectConstruct = file_control_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = file_control_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = file_control_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return file_control_possibleConstructorReturn(this, result); }; }\n\nfunction file_control_possibleConstructorReturn(self, call) { if (call && (file_control_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return file_control_assertThisInitialized(self); }\n\nfunction file_control_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction file_control_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction file_control_getPrototypeOf(o) { file_control_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return file_control_getPrototypeOf(o); }\n\nfunction file_control_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nvar file_control_Files = /*#__PURE__*/function (_Component) {\n  file_control_inherits(Files, _Component);\n\n  var _super = file_control_createSuper(Files);\n\n  function Files(props) {\n    var _this;\n\n    file_control_classCallCheck(this, Files);\n\n    _this = _super.call(this, props);\n\n    file_control_defineProperty(file_control_assertThisInitialized(_this), "onDropzoneUploadSuccess", function (_name, _propertyName, parameters) {\n      _this.onFileUploaded(parameters);\n    });\n\n    file_control_defineProperty(file_control_assertThisInitialized(_this), "onDropzoneUploadFail", function (_name, _propertyName, parameters) {\n      _this.onFail(parameters);\n    });\n\n    file_control_defineProperty(file_control_assertThisInitialized(_this), "onCollectionEditorChange", function (_ref) {\n      var eventName = _ref.eventName,\n          parameters = _ref.parameters,\n          value = _ref.value;\n\n      if (eventName === \'onDelete\') {\n        _this.props.additionalParams.handleEvent({\n          key: _this.props.name,\n          propertyName: _this.props.propertyName,\n          eventName: eventName,\n          parameters: parameters\n        });\n      } else {\n        _this.props.additionalParams.handleEvent({\n          syntheticEvent: null,\n          key: _this.props.name,\n          eventName: eventName,\n          name: _this.props.name,\n          value: value,\n          parameters: parameters,\n          propertyName: _this.props.propertyName\n        });\n      }\n    });\n\n    file_control_defineProperty(file_control_assertThisInitialized(_this), "onUploadChange", function (e, _ref2) {\n      var parameters = _ref2.parameters;\n\n      _this.onFileUploaded(parameters);\n    });\n\n    file_control_defineProperty(file_control_assertThisInitialized(_this), "onUploadFail", function (e, parameters) {\n      _this.onFail(parameters);\n    });\n\n    file_control_defineProperty(file_control_assertThisInitialized(_this), "nameGetter", function (row) {\n      var column = _this.props.columns.find(function (c) {\n        return c.property === \'Name\';\n      });\n\n      return row[column.field];\n    });\n\n    file_control_defineProperty(file_control_assertThisInitialized(_this), "contentTypeGetter", function (row) {\n      var column = _this.props.columns.find(function (c) {\n        return c.property === \'ContentType\';\n      });\n\n      return row[column.field];\n    });\n\n    file_control_defineProperty(file_control_assertThisInitialized(_this), "setDisabled", function (value) {\n      _this.setState({\n        disabled: !_this.state.disabled\n      });\n    });\n\n    _this.state = {};\n    return _this;\n  }\n\n  file_control_createClass(Files, [{\n    key: "onFileUploaded",\n    value: function onFileUploaded(parameters) {\n      var data = this.props.value ? file_control_toConsumableArray(this.props.value) : [];\n      var properties = parameters.properties;\n      var row = {\n        __id: \'CLIENT_\' + external_uuid_default.a.v1()\n      };\n      this.props.columns.filter(function (c) {\n        return c.field;\n      }).forEach(function (c) {\n        row[c.field] = properties[c.property];\n      });\n      data.push(row);\n      this.props.additionalParams.handleEvent({\n        syntheticEvent: null,\n        key: this.props.name,\n        eventName: \'onChange\',\n        name: this.props.name,\n        value: data,\n        propertyName: this.props.propertyName\n      });\n      this.props.additionalParams.handleEvent({\n        syntheticEvent: null,\n        key: this.props.name,\n        eventName: \'onUploadSuccess\',\n        name: this.props.name,\n        parameters: parameters,\n        propertyName: this.props.propertyName\n      });\n    }\n  }, {\n    key: "onFail",\n    value: function onFail(parameters) {\n      this.props.additionalParams.handleEvent({\n        syntheticEvent: null,\n        key: this.props.name,\n        eventName: \'onUploadFail\',\n        name: this.props.name,\n        parameters: parameters,\n        propertyName: this.props.propertyName\n      });\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      var _this2 = this;\n\n      var columns = [];\n      this.props.columns.filter(function (c) {\n        return c.showcolumn;\n      }).forEach(function (c) {\n        var column = {\n          key: c.field,\n          name: c.title,\n          control: c.control\n        };\n\n        if (c.property === \'Token\') {\n          column.additionalData = {\n            customNameGetter: _this2.nameGetter,\n            customContentTypeGetter: _this2.contentTypeGetter\n          };\n        }\n\n        columns.push(column);\n      });\n      var editorProps = {\n        readOnly: this.props.readOnly,\n        value: this.props.value,\n        idField: this.props.idField,\n        downloadUrl: this.props.downloadUrl,\n        columns: columns,\n        handleEvent: this.onCollectionEditorChange\n      };\n      return draw(\'files\', {\n        editorProps: editorProps,\n        onDropzoneUploadSuccess: this.onDropzoneUploadSuccess,\n        onDropzoneUploadFail: this.onDropzoneUploadFail,\n        onUploadChange: this.onUploadChange,\n        onUploadFail: this.onUploadFail,\n        state: this.state,\n        props: this.props\n      });\n    }\n  }]);\n\n  return Files;\n}(external_react_["Component"]);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/grid-layout.js\nfunction grid_layout_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { grid_layout_typeof = function _typeof(obj) { return typeof obj; }; } else { grid_layout_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return grid_layout_typeof(obj); }\n\nfunction grid_layout_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction grid_layout_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction grid_layout_createClass(Constructor, protoProps, staticProps) { if (protoProps) grid_layout_defineProperties(Constructor.prototype, protoProps); if (staticProps) grid_layout_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction grid_layout_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) grid_layout_setPrototypeOf(subClass, superClass); }\n\nfunction grid_layout_setPrototypeOf(o, p) { grid_layout_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return grid_layout_setPrototypeOf(o, p); }\n\nfunction grid_layout_createSuper(Derived) { var hasNativeReflectConstruct = grid_layout_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = grid_layout_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = grid_layout_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return grid_layout_possibleConstructorReturn(this, result); }; }\n\nfunction grid_layout_possibleConstructorReturn(self, call) { if (call && (grid_layout_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return grid_layout_assertThisInitialized(self); }\n\nfunction grid_layout_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction grid_layout_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction grid_layout_getPrototypeOf(o) { grid_layout_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return grid_layout_getPrototypeOf(o); }\n\nfunction grid_layout_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nvar grid_layout_GridLayout = /*#__PURE__*/function (_Component) {\n  grid_layout_inherits(GridLayout, _Component);\n\n  var _super = grid_layout_createSuper(GridLayout);\n\n  function GridLayout(props) {\n    var _this;\n\n    grid_layout_classCallCheck(this, GridLayout);\n\n    _this = _super.call(this, props);\n\n    grid_layout_defineProperty(grid_layout_assertThisInitialized(_this), "onLayoutChange", function (layout) {\n      if (_this.props.buildermode) {\n        var panes = _this.props[\'data-panes\'];\n\n        if (Array.isArray(panes)) {\n          panes.forEach(function (pane) {\n            layout.forEach(function (l) {\n              if (pane.psid == l.i) {\n                pane.x = l.x;\n                pane.y = l.y;\n                pane.w = l.w;\n                pane.h = l.h;\n              }\n            });\n          });\n        }\n      } else if (_this.props.draggable || _this.props.resizable) {\n        _this.setCookie(window.location.pathname + \'_\' + _this.props.name, JSON.stringify(layout));\n      }\n\n      if (isDefined(_this.props.handleEvent)) {\n        _this.props.handleEvent({\n          undefined: undefined,\n          key: _this.props.name,\n          eventName: \'onLayoutChange\',\n          parameters: {\n            layout: layout\n          }\n        });\n      }\n    });\n\n    _this.state = {};\n    return _this;\n  }\n\n  grid_layout_createClass(GridLayout, [{\n    key: "render",\n    value: function render() {\n      return draw(\'grid-layout\', {\n        getCookie: this.getCookie,\n        setCookie: this.setCookie,\n        me: this,\n        onLayoutChange: this.onLayoutChange,\n        props: this.props\n      });\n    }\n  }, {\n    key: "getCookie",\n    value: function getCookie(name) {\n      // todo document\n      var matches = document.cookie.match(new RegExp(\'(?:^|; )\' + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, \'\\\\$1\') + \'=([^;]*)\'));\n      return matches ? decodeURIComponent(matches[1]) : undefined;\n    }\n  }, {\n    key: "setCookie",\n    value: function setCookie(name, value, options) {\n      options = options || {};\n      var expires = options.expires;\n\n      if (typeof expires == \'number\' && expires) {\n        var d = new Date();\n        d.setTime(d.getTime() + expires * 1000);\n        expires = options.expires = d;\n      }\n\n      if (expires && expires.toUTCString) {\n        options.expires = expires.toUTCString();\n      }\n\n      value = encodeURIComponent(value);\n      var updatedCookie = name + \'=\' + value;\n\n      for (var propName in options) {\n        updatedCookie += \'; \' + propName;\n        var propValue = options[propName];\n\n        if (propValue !== true) {\n          updatedCookie += \'=\' + propValue;\n        }\n      } // todo document\n\n\n      document.cookie = updatedCookie;\n    }\n  }]);\n\n  return GridLayout;\n}(external_react_["Component"]);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/functional-filter.js\nfunction functional_filter_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { functional_filter_typeof = function _typeof(obj) { return typeof obj; }; } else { functional_filter_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return functional_filter_typeof(obj); }\n\nfunction functional_filter_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction functional_filter_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction functional_filter_createClass(Constructor, protoProps, staticProps) { if (protoProps) functional_filter_defineProperties(Constructor.prototype, protoProps); if (staticProps) functional_filter_defineProperties(Constructor, staticProps); return Constructor; }\n\n/* eslint-disable no-throw-literal */\nvar FilterTerms = /*#__PURE__*/function () {\n  function FilterTerms() {\n    functional_filter_classCallCheck(this, FilterTerms);\n  }\n\n  functional_filter_createClass(FilterTerms, null, [{\n    key: "Greater",\n    get: function get() {\n      return \'>\';\n    }\n  }, {\n    key: "Less",\n    get: function get() {\n      return \'>\';\n    }\n  }, {\n    key: "Equal",\n    get: function get() {\n      return \'=\';\n    }\n  }, {\n    key: "GreaterOrEqual",\n    get: function get() {\n      return \'>=\';\n    }\n  }, {\n    key: "LessOrEqual",\n    get: function get() {\n      return \'<=\';\n    }\n  }, {\n    key: "NotEqual",\n    get: function get() {\n      return \'!=\';\n    }\n  }, {\n    key: "Like",\n    get: function get() {\n      return \'like\';\n    }\n  }, {\n    key: "StartsWith",\n    get: function get() {\n      return \'like*\';\n    }\n  }, {\n    key: "EndsWith",\n    get: function get() {\n      return \'*like\';\n    }\n  }, {\n    key: "IsGreater",\n    value: function IsGreater(value) {\n      return value === FilterTerms.Greater;\n    }\n  }, {\n    key: "IsLess",\n    value: function IsLess(value) {\n      return value === FilterTerms.Less;\n    }\n  }, {\n    key: "IsEqual",\n    value: function IsEqual(value) {\n      return value === FilterTerms.Equal;\n    }\n  }, {\n    key: "IsGreaterOrEqual",\n    value: function IsGreaterOrEqual(value) {\n      return value === FilterTerms.GreaterOrEqual;\n    }\n  }, {\n    key: "IsLessOrEqual",\n    value: function IsLessOrEqual(value) {\n      return value === FilterTerms.LessOrEqual;\n    }\n  }, {\n    key: "IsNotEqual",\n    value: function IsNotEqual(value) {\n      return value === FilterTerms.NotEqual;\n    }\n  }, {\n    key: "IsLike",\n    value: function IsLike(value) {\n      return value.toLowerCase() === FilterTerms.Like || value.toLowerCase() === \'*like*\';\n    }\n  }, {\n    key: "IsStartsWith",\n    value: function IsStartsWith(value) {\n      return value.toLowerCase() === FilterTerms.StartsWith;\n    }\n  }, {\n    key: "IsEndsWith",\n    value: function IsEndsWith(value) {\n      return value.toLowerCase() === FilterTerms.EndsWith;\n    }\n  }, {\n    key: "Evaluate",\n    value: function Evaluate(value, expected, term) {\n      if (FilterTerms.IsGreater(term)) {\n        return FilterTerms.compareWithTypeCheck(value, expected, function (v, e) {\n          return v > e;\n        });\n      }\n\n      if (FilterTerms.IsLess(term)) {\n        return FilterTerms.compareWithTypeCheck(value, expected, function (v, e) {\n          return v < e;\n        });\n      }\n\n      if (FilterTerms.IsEqual(term)) {\n        return FilterTerms.compareWithTypeCheck(value, expected, function (v, e) {\n          return v === e;\n        });\n      }\n\n      if (FilterTerms.IsGreaterOrEqual(term)) {\n        return FilterTerms.compareWithTypeCheck(value, expected, function (v, e) {\n          return v >= e;\n        });\n      }\n\n      if (FilterTerms.IsLessOrEqual(term)) {\n        return FilterTerms.compareWithTypeCheck(value, expected, function (v, e) {\n          return v <= e;\n        });\n      }\n\n      if (FilterTerms.IsNotEqual(term)) {\n        return FilterTerms.compareWithTypeCheck(value, expected, function (v, e) {\n          return v !== e;\n        });\n      }\n\n      if (FilterTerms.IsLike(term)) {\n        return FilterTerms.likeCompare(value, expected, function (v, e) {\n          return v.indexOf(e) >= 0;\n        });\n      }\n\n      if (FilterTerms.IsStartsWith(term)) {\n        return FilterTerms.likeCompare(value, expected, function (v, e) {\n          return v.startsWith(e);\n        });\n      }\n\n      if (FilterTerms.IsEndsWith(term)) {\n        return FilterTerms.likeCompare(value, expected, function (v, e) {\n          return v.endsWith(e);\n        });\n      }\n\n      throw \'Unknown term \' + term;\n    }\n  }, {\n    key: "likeCompare",\n    value: function likeCompare(value, expected, comparator) {\n      if (value === null && expected === null) {\n        return true;\n      }\n\n      if (value === undefined && expected === undefined) {\n        return true;\n      }\n\n      if (value === null || value === undefined) {\n        return false;\n      }\n\n      if (expected === null || expected === undefined) {\n        return false;\n      }\n\n      return comparator(value.toString().toLowerCase(), expected.toString().toLowerCase());\n    }\n  }, {\n    key: "compareWithTypeCheck",\n    value: function compareWithTypeCheck(value, expected, comparator) {\n      if (value === null && expected === null) {\n        return true;\n      }\n\n      if (value === undefined && expected === undefined) {\n        return true;\n      }\n\n      if (value === null || value === undefined) {\n        return false;\n      }\n\n      if (expected === null || expected === undefined) {\n        return false;\n      } //Date Time cases\n\n\n      if (value instanceof Date && typeof expected === \'string\') {\n        return comparator(value.getTime(), new Date(expected).getTime());\n      } else if (typeof value === \'string\' && expected instanceof Date) {\n        return comparator(new Date(value).getTime(), expected.getTime());\n      } else if (value instanceof Date && expected instanceof Date) {\n        return comparator(value.getTime(), expected.getTime());\n      }\n\n      if (functional_filter_typeof(value) === functional_filter_typeof(expected)) {\n        return comparator(value, expected);\n      } else if (typeof value === \'number\' && typeof expected === \'string\') {\n        return comparator(value, parseFloat(expected));\n      } else if (typeof value === \'string\' && typeof expected === \'number\') {\n        return comparator(value, expected.toString());\n      } else {\n        return comparator(value, expected);\n      }\n    }\n  }]);\n\n  return FilterTerms;\n}();\n\nvar FunctionalFilter = /*#__PURE__*/function () {\n  function FunctionalFilter(objectFilter, columns) {\n    var _this = this;\n\n    functional_filter_classCallCheck(this, FunctionalFilter);\n\n    this._innerFilter = {};\n\n    if (objectFilter === undefined || !Array.isArray(objectFilter)) {\n      return;\n    }\n\n    if (columns === undefined || !Array.isArray(columns)) {\n      throw \'columns must be array\';\n    }\n\n    objectFilter.forEach(function (el) {\n      if (el === undefined) {\n        return;\n      }\n\n      var applyToColumns;\n\n      if (el.column === \'*\') {\n        applyToColumns = columns;\n      } else {\n        applyToColumns = el.column.split(\',\').map(function (n) {\n          return n.trim();\n        });\n      }\n\n      _this.AddFilter({\n        names: applyToColumns,\n        expected: el.value,\n        term: el.term\n      });\n    });\n  }\n\n  functional_filter_createClass(FunctionalFilter, [{\n    key: "AddFilter",\n    value: function AddFilter(_ref) {\n      var _this2 = this;\n\n      var names = _ref.names,\n          expected = _ref.expected,\n          term = _ref.term,\n          id = _ref.id;\n\n      if (names.length < 1) {\n        return;\n      }\n\n      var filterId = names.length === 1 ? names[0] : names.sort().join(\',\');\n      var filter;\n\n      if (!this._innerFilter.hasOwnProperty(filterId)) {\n        filter = this._innerFilter[filterId] = {};\n        filter.funcs = [];\n        filter.items = [];\n\n        filter.test = function (r) {\n          return _this2._innerFilter[filterId].funcs.every(function (f) {\n            return f(r);\n          });\n        };\n      } else {\n        filter = this._innerFilter[filterId];\n      }\n\n      var compFunc;\n\n      var singleCompFunc = function singleCompFunc(r, name) {\n        var propName = Object.keys(r).find(function (k) {\n          return k.toString().toLowerCase() === name.toLowerCase();\n        });\n\n        if (propName !== undefined) {\n          return FilterTerms.Evaluate(r[propName], expected, term);\n        }\n\n        return false;\n      };\n\n      if (names.length === 1) {\n        compFunc = function compFunc(r) {\n          return singleCompFunc(r, names[0]);\n        };\n      } else {\n        compFunc = function compFunc(r) {\n          return names.some(function (name) {\n            return singleCompFunc(r, name);\n          });\n        };\n      }\n\n      filter.funcs.push(compFunc);\n      filter.items.push({\n        expected: expected,\n        term: term,\n        id: id\n      });\n    }\n  }, {\n    key: "RemoveFilter",\n    value: function RemoveFilter(_ref2) {\n      var _this3 = this;\n\n      var name = _ref2.name,\n          id = _ref2.id;\n      var filterId;\n      var names;\n\n      if (name !== undefined) {\n        if (Array.isArray(name)) {\n          filterId = name.length === 1 ? name[0] : name.sort().join(\',\');\n          names = name;\n        } else {\n          filterId = name;\n          names = [name];\n        }\n      }\n\n      if (name !== undefined && id === undefined) {\n        delete this._innerFilter[filterId];\n      } else if (name === undefined && id === undefined) {\n        this._innerFilter = {};\n      } else {\n        var recreateProperty = function recreateProperty(filterId, names, id) {\n          if (!_this3._innerFilter.hasOwnProperty(filterId)) {\n            return;\n          }\n\n          var newItems = _this3._innerFilter[filterId].items.filter(function (el) {\n            return el.id !== id;\n          });\n\n          if (newItems.length < _this3._innerFilter[filterId].items.length) {\n            delete _this3._innerFilter[filterId];\n            newItems.forEach(function (ni) {\n              _this3.AddFilter({\n                names: names,\n                expected: ni.expected,\n                term: ni.term,\n                id: ni.id\n              });\n            });\n          }\n        };\n\n        if (name !== undefined && id !== undefined) {\n          recreateProperty(filterId, names, id);\n        } else {\n          var allFilterIds = Object.keys(this._innerFilter);\n          allFilterIds.forEach(function (filterId) {\n            recreateProperty(filterId, filterId.split(\',\'), id);\n          });\n        }\n      }\n    }\n  }, {\n    key: "IsRowMatched",\n    value: function IsRowMatched(row) {\n      var allNames = Object.keys(this._innerFilter);\n\n      if (allNames.length <= 0) {\n        return true;\n      }\n\n      for (var i = 0; i < allNames.length; i++) {\n        if (!this._innerFilter[allNames[i]].test(row)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: "GetFilterAsObjects",\n    value: function GetFilterAsObjects() {\n      var _this4 = this;\n\n      if (this._innerFilter === undefined) {\n        return [];\n      }\n\n      var result = [];\n      var allNames = Object.keys(this._innerFilter);\n      allNames.forEach(function (pn) {\n        _this4._innerFilter[pn].items.forEach(function (i) {\n          result.push({\n            column: pn,\n            value: i.expected,\n            term: i.term\n          });\n        });\n      });\n      return result;\n    }\n  }]);\n\n  return FunctionalFilter;\n}();\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/grid-view.js\nfunction grid_view_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { grid_view_typeof = function _typeof(obj) { return typeof obj; }; } else { grid_view_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return grid_view_typeof(obj); }\n\nfunction grid_view_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction grid_view_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { grid_view_ownKeys(Object(source), true).forEach(function (key) { grid_view_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { grid_view_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction grid_view_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction grid_view_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction grid_view_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction grid_view_createClass(Constructor, protoProps, staticProps) { if (protoProps) grid_view_defineProperties(Constructor.prototype, protoProps); if (staticProps) grid_view_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction grid_view_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) grid_view_setPrototypeOf(subClass, superClass); }\n\nfunction grid_view_setPrototypeOf(o, p) { grid_view_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return grid_view_setPrototypeOf(o, p); }\n\nfunction grid_view_createSuper(Derived) { var hasNativeReflectConstruct = grid_view_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = grid_view_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = grid_view_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return grid_view_possibleConstructorReturn(this, result); }; }\n\nfunction grid_view_possibleConstructorReturn(self, call) { if (call && (grid_view_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return grid_view_assertThisInitialized(self); }\n\nfunction grid_view_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction grid_view_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction grid_view_getPrototypeOf(o) { grid_view_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return grid_view_getPrototypeOf(o); }\n\n/*\nFilter object structure:\nlet filter = [\n{column: "Name" | "Name1,Name2,Name3" | "*",\nvalue: value,\nterm: ">" | "<" | "=" | ">=" | "<=" | "!=" | "like" | "like*" | "*like" | "*like*"\n]\n"*like*" === "like"\n */\n\n\n\n\n\n\n\n\nvar grid_view_CheckBoxFormatter = /*#__PURE__*/function (_Component) {\n  grid_view_inherits(CheckBoxFormatter, _Component);\n\n  var _super = grid_view_createSuper(CheckBoxFormatter);\n\n  function CheckBoxFormatter() {\n    grid_view_classCallCheck(this, CheckBoxFormatter);\n\n    return _super.apply(this, arguments);\n  }\n\n  grid_view_createClass(CheckBoxFormatter, [{\n    key: "render",\n    value: function render() {\n      return draw(\'checkbox-formatter\', {\n        props: this.props\n      });\n    }\n  }]);\n\n  return CheckBoxFormatter;\n}(external_react_["Component"]);\n\nvar grid_view_NumberFormatter = /*#__PURE__*/function (_Component2) {\n  grid_view_inherits(NumberFormatter, _Component2);\n\n  var _super2 = grid_view_createSuper(NumberFormatter);\n\n  function NumberFormatter() {\n    grid_view_classCallCheck(this, NumberFormatter);\n\n    return _super2.apply(this, arguments);\n  }\n\n  grid_view_createClass(NumberFormatter, [{\n    key: "render",\n    value: function render() {\n      return draw(\'number-formatter\', {\n        props: this.props\n      });\n    }\n  }]);\n\n  return NumberFormatter;\n}(external_react_["Component"]);\n\nvar grid_view_DateFormatter = /*#__PURE__*/function (_Component3) {\n  grid_view_inherits(DateFormatter, _Component3);\n\n  var _super3 = grid_view_createSuper(DateFormatter);\n\n  function DateFormatter() {\n    grid_view_classCallCheck(this, DateFormatter);\n\n    return _super3.apply(this, arguments);\n  }\n\n  grid_view_createClass(DateFormatter, [{\n    key: "render",\n    value: function render() {\n      var value = external_moment_default()(this.props.value);\n      var strValue = \'\';\n\n      if (value.isValid()) {\n        var format = dwKitDateFormat(\'L\');\n        strValue = value.format(format);\n      }\n\n      return draw(\'date-formatter\', {\n        props: this.props,\n        strValue: strValue\n      });\n    }\n  }]);\n\n  return DateFormatter;\n}(external_react_["Component"]);\n\nvar grid_view_DateTimeFormatter = /*#__PURE__*/function (_Component4) {\n  grid_view_inherits(DateTimeFormatter, _Component4);\n\n  var _super4 = grid_view_createSuper(DateTimeFormatter);\n\n  function DateTimeFormatter() {\n    grid_view_classCallCheck(this, DateTimeFormatter);\n\n    return _super4.apply(this, arguments);\n  }\n\n  grid_view_createClass(DateTimeFormatter, [{\n    key: "render",\n    value: function render() {\n      var value = external_moment_default()(this.props.value);\n      var strValue = \'\';\n\n      if (value.isValid()) {\n        var dateTimeFormat = \'DD.MM.YYYY HH:mm\';\n        var dateFormat = dwKitDateFormat();\n\n        if (dateFormat) {\n          var timeFormat = dwKitTimeFormat(\'HH:mm\');\n          dateTimeFormat = "".concat(dateFormat, " ").concat(timeFormat);\n        }\n\n        strValue = value.format(dateTimeFormat);\n      }\n\n      return draw(\'datetime-formatter\', {\n        props: this.props,\n        strValue: strValue\n      });\n    }\n  }]);\n\n  return DateTimeFormatter;\n}(external_react_["Component"]);\n\nvar grid_view_TimeFormatter = /*#__PURE__*/function (_Component5) {\n  grid_view_inherits(TimeFormatter, _Component5);\n\n  var _super5 = grid_view_createSuper(TimeFormatter);\n\n  function TimeFormatter() {\n    grid_view_classCallCheck(this, TimeFormatter);\n\n    return _super5.apply(this, arguments);\n  }\n\n  grid_view_createClass(TimeFormatter, [{\n    key: "render",\n    value: function render() {\n      var value = external_moment_default()(this.props.value);\n      var strValue = \'\';\n\n      if (value.isValid()) {\n        var format = isDefined(window.DWKitLang) && isDefined(window.DWKitLang.common) && isDefined(window.DWKitLang.common.timeFormat) ? window.DWKitLang.common.timeFormat : \'HH:mm\';\n        strValue = value.format(format);\n      }\n\n      return draw(\'time-formatter\', {\n        props: this.props,\n        strValue: strValue\n      });\n    }\n  }]);\n\n  return TimeFormatter;\n}(external_react_["Component"]);\n\nvar jsonEqual = function jsonEqual(a, b) {\n  return JSON.stringify(a) === JSON.stringify(b);\n};\n\nvar grid_view_GridView = /*#__PURE__*/function (_Component6) {\n  grid_view_inherits(GridView, _Component6);\n\n  var _super6 = grid_view_createSuper(GridView);\n\n  function GridView(props) {\n    var _this;\n\n    grid_view_classCallCheck(this, GridView);\n\n    _this = _super6.call(this, props);\n    _this.state = {\n      items: [],\n      sort: \'\',\n      defaultSort: props.defaultSort,\n      filter: props.filter,\n      pageSize: 20,\n      selectedIndexes: [],\n      rowsCount: GridView.staticIsServerMode(props) ? undefined : 0\n    };\n\n    try {\n      _this.state.isrtl = getComputedStyle(document.getElementsByTagName(\'html\')[0]).direction == \'rtl\';\n    } catch (e) {}\n\n    return _this;\n  }\n\n  grid_view_createClass(GridView, [{\n    key: "isEditFormModal",\n    value: function isEditFormModal() {\n      return this.props.editFormShowType === \'modal\';\n    }\n  }, {\n    key: "isEditFormSidebar",\n    value: function isEditFormSidebar() {\n      return this.props.editFormShowType === \'sidebar\';\n    }\n  }, {\n    key: "isServerMode",\n    value: function isServerMode() {\n      return GridView.staticIsServerMode(this.props);\n    }\n  }, {\n    key: "refresh",\n    value: function refresh() {\n      if (this.isServerMode()) {\n        this.setState({\n          items: [],\n          selectedIndexes: [],\n          rowsCount: undefined\n        });\n      } else {\n        var newItems = Array.isArray(this.props.value) ? GridView.staticGetSortedAndFilteredItems(this.props.value, this.state.filter, this.state.sort, this.props.defaultSort) : [];\n        this.setState({\n          items: newItems,\n          rowsCount: newItems.length,\n          selectedIndexes: [],\n          originalItems: this.props.value\n        });\n      }\n    }\n  }, {\n    key: "resetSelection",\n    value: function resetSelection() {\n      this.setState({\n        selectedIndexes: []\n      });\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      return draw(\'grid-view\', {\n        gridColumns: this.getColumns(),\n        gridProps: this.getGridPropsByPagerType(this.props.pagerType),\n        me: this,\n        onRowsSelected: this.onRowsSelected.bind(this),\n        onRowsDeselected: this.onRowsDeselected.bind(this),\n        selectBy: {\n          indexes: this.state.selectedIndexes\n        },\n        gridRowGetter: this.gridRowGetter.bind(this),\n        gridOnRowClick: this.gridOnRowClick.bind(this),\n        handleGridSort: this.handleGridSort.bind(this),\n        state: this.state,\n        props: this.props\n      });\n    }\n  }, {\n    key: "getColumns",\n    value: function getColumns() {\n      var me = this;\n      var columns;\n\n      if (this.props.columns === undefined) {\n        columns = [];\n      } else if (Array.isArray(this.props.columns)) {\n        columns = this.props.columns;\n      } else {\n        columns = JSON.parse(this.props.columns);\n      }\n\n      columns.forEach(function (item) {\n        if (item.width !== null && item.width !== \'\' && item.width !== undefined) {\n          item.width = Number(item.width);\n        }\n\n        if (item.sortable !== false) {\n          item.sortable = !me.props.disableSort;\n        }\n\n        item.filterable = Boolean(me.props.filterRow);\n        item.resizable = Boolean(item.resizable);\n\n        if (item.type === \'number\') {\n          item.formatter = grid_view_NumberFormatter;\n        } else if (item.type === \'checkbox\') {\n          item.formatter = grid_view_CheckBoxFormatter;\n        } else if (item.type === \'date\') {\n          item.formatter = grid_view_DateFormatter;\n        } else if (item.type === \'time\') {\n          item.formatter = grid_view_TimeFormatter;\n        } else if (item.type === \'datetime\') {\n          item.formatter = grid_view_DateTimeFormatter;\n        } else if (item.type === \'custom\') {\n          item.getRowMetaData = function (row) {\n            return row;\n          };\n\n          item.formatter = function (args) {\n            if (isUndefined(item.customFormatter) || typeof item.customFormatter != \'function\') {\n              if (me.props.placeholders && Array.isArray(me.props.placeholders[item.key]) && me.props.placeholders[item.key].length > 0) {\n                var model = me.props.placeholders[item.key][0];\n\n                if (model.propertyName === undefined || model.propertyName === \'\') {\n                  model.propertyName = item.key;\n                }\n\n                return /*#__PURE__*/external_react_default.a.createElement(custom_control_CustomControl, {\n                  key: item.key + "_" + args.dependentValues.__id,\n                  model: model,\n                  parent: me,\n                  row: args.dependentValues,\n                  errorOnRow: {},\n                  name: me.props.name,\n                  buildermode: me.props.buildermode,\n                  handleChange: function handleChange() {},\n                  handleEvent: me.props.handleEvent,\n                  getAdditionalDataForControl: me.props.getAdditionalDataForControl,\n                  readOnly: me.props.readOnly,\n                  uploadUrl: me.props.uploadUrl,\n                  downloadUrl: me.props.downloadUrl,\n                  data: me.props.data,\n                  adaptiveViewType: me.props.adaptiveViewType,\n                  controlBarParams: me.props.controlBarParams,\n                  createControl: me.props.createControl\n                });\n              } else if (me.props.buildermode) {\n                return me.props.createBuilderDropzone(me.props.name, me.props.name, undefined, item.key, item.key);\n              } else {\n                return \'\';\n              }\n            }\n\n            return item.customFormatter({\n              row: args.dependentValues,\n              value: args.value,\n              column: item\n            });\n          };\n        }\n      });\n\n      if (this.state.isrtl) {\n        return columns.reverse();\n      }\n\n      return columns;\n    }\n  }, {\n    key: "getGridPropsByPagerType",\n    value: function getGridPropsByPagerType() {\n      var gridProps = {};\n      var pagerType = this.props.pagerType;\n\n      if (pagerType === \'server\') {\n        var size = parseInt(this.props.pageSize);\n\n        if (size) {\n          this.state.pageSize = size;\n        }\n\n        gridProps.rowRenderer = /*#__PURE__*/external_react_default.a.createElement(grid_view_RowLoadingRenderer, {\n          error: this.props.error\n        });\n\n        if (isUndefined(this.state.rowsCount)) {\n          this.state.rowsCount = 1;\n        }\n      } else {// if (Array.isArray(this.props.value)) {\n        //     this.state.items = this.getSortedAndFilteredItems(this.props.value);\n        // }\n        //this.state.rowsCount = this.state.items.length;\n      }\n\n      return gridProps;\n    }\n  }, {\n    key: "getSeletedRowKeys",\n    value: function getSeletedRowKeys() {\n      var me = this;\n      var selectedKeys = [];\n      this.state.selectedIndexes.forEach(function (index) {\n        var obj = me.gridRowGetter(index);\n\n        if (obj !== undefined) {\n          var key;\n\n          if (me.props.rowKey !== null && me.props.rowKey !== undefined && obj.hasOwnProperty(me.props.rowKey)) {\n            key = obj[me.props.rowKey];\n          }\n\n          if (key == null || isUndefined(key)) {\n            key = obj[\'__id\'];\n          }\n\n          if (key !== null && key !== undefined) {\n            selectedKeys.push(key);\n          }\n        }\n      });\n      return selectedKeys;\n    }\n  }, {\n    key: "gridRowGetter",\n    value: function gridRowGetter(index) {\n      if (index < 0) {\n        return undefined;\n      }\n\n      var pagerType = this.props.pagerType;\n\n      if (pagerType === \'server\') {\n        if (this.state.items[index] === undefined) {\n          var pageSize = this.state.pageSize;\n          this.loadPage(index, pageSize);\n        }\n      }\n\n      if (pagerType === \'server\') {\n        return this.state.items[index];\n      }\n\n      return grid_view_objectSpread({}, this.state.items[index]); //DWKIT-115\n    }\n  }, {\n    key: "getSort",\n    value: function getSort() {\n      var sortString = this.state.sort;\n\n      if (sortString === \'\' && this.props.defaultSort !== undefined) {\n        sortString = this.props.defaultSort;\n      }\n\n      return sortString;\n    }\n  }, {\n    key: "getFilters",\n    value: function getFilters() {\n      return this.state.filter !== undefined ? this.state.filter.GetFilterAsObjects() : [];\n    }\n  }, {\n    key: "loadPage",\n    value: function loadPage(startIndex, pageSize) {\n      var me = this;\n\n      for (var i = 0; i < pageSize; i++) {\n        this.state.items[i + startIndex] = {\n          __loading: true\n        };\n      }\n\n      if (this.props.getAdditionalDataForControl === undefined) {\n        if (console !== undefined) {\n          console.log(\'GridView: For paging on server need to set getAdditionalDataForControl func!\');\n        }\n      } else {\n        var sortString = this.getSort();\n        this.props.getAdditionalDataForControl(this, {\n          startIndex: startIndex,\n          pageSize: pageSize,\n          filters: this.getFilters(),\n          sort: sortString\n        }, function (_ref) {\n          var sIndex = _ref.sIndex,\n              pSize = _ref.pSize,\n              rowsCount = _ref.rowsCount,\n              items = _ref.items;\n\n          if (rowsCount === undefined || items === undefined) {\n            me.state.rowsCount = 0;\n            me.setState({\n              rowsCount: 0,\n              items: []\n            });\n          } else {\n            me.state.rowsCount = rowsCount;\n\n            for (var _i = 0; _i < pSize; _i++) {\n              if (_i < items.length) {\n                me.state.items[sIndex + _i] = items[_i];\n              } else {\n                me.state.items[sIndex + _i] = undefined;\n              }\n            }\n\n            me.forceUpdate();\n          }\n        });\n      }\n    }\n  }, {\n    key: "gridOnRowClick",\n    value: function gridOnRowClick(rowIdx, row) {\n      if (row === undefined) {\n        return;\n      }\n\n      var timenow = Date.now();\n\n      if (this.rowClickTime !== undefined && this.rowClickTime.rowIdx === rowIdx && timenow - this.rowClickTime.time <= 1000) {\n        this.rowClickTime = undefined;\n        this.onRowDblClick(rowIdx, row);\n      } else {\n        this.rowClickTime = {\n          rowIdx: rowIdx,\n          time: timenow\n        };\n\n        if (this.props.handleEvent !== undefined) {\n          this.props.handleEvent({\n            key: this.props.name,\n            propertyName: this.props.propertyName,\n            eventName: \'onRowClick\',\n            parameters: {\n              rowIdx: rowIdx,\n              row: row\n            }\n          });\n        }\n      }\n    }\n  }, {\n    key: "onRowDblClick",\n    value: function onRowDblClick(rowIdx, row) {\n      if (this.props.handleEvent !== undefined) {\n        this.props.handleEvent({\n          key: this.props.name,\n          propertyName: this.props.propertyName,\n          eventName: \'onRowDblClick\',\n          parameters: {\n            rowIdx: rowIdx,\n            row: row\n          }\n        });\n      }\n    }\n  }, {\n    key: "onRowsSelected",\n    value: function onRowsSelected(rows) {\n      this.state.selectedIndexes = this.state.selectedIndexes.concat(rows.map(function (r) {\n        return r.rowIdx;\n      }));\n\n      if (this.props.handleEvent !== undefined) {\n        this.props.handleEvent({\n          key: this.props.name,\n          eventName: \'onSelectionChanged\',\n          propertyName: this.props.propertyName,\n          parameters: {\n            selectedIndexes: this.state.selectedIndexes\n          }\n        });\n      }\n\n      this.forceUpdate();\n    }\n  }, {\n    key: "onRowsDeselected",\n    value: function onRowsDeselected(rows) {\n      var rowIndexes = rows.map(function (r) {\n        return r.rowIdx;\n      });\n      this.state.selectedIndexes = this.state.selectedIndexes.filter(function (i) {\n        return rowIndexes.indexOf(i) === -1;\n      });\n\n      if (this.props.handleEvent !== undefined) {\n        this.props.handleEvent({\n          key: this.props.name,\n          eventName: \'onSelectionChanged\',\n          propertyName: this.props.propertyName,\n          parameters: {\n            selectedIndexes: this.state.selectedIndexes\n          }\n        });\n      }\n\n      this.forceUpdate();\n    }\n  }, {\n    key: "handleGridSort",\n    value: function handleGridSort(sortColumn, sortDirection) {\n      var stateDelta = {};\n\n      if (sortDirection === \'NONE\') {\n        stateDelta.sort = \'\';\n      } else {\n        stateDelta.sort = sortColumn + \' \' + sortDirection;\n      }\n\n      var pagerType = this.props.pagerType;\n\n      if (pagerType === \'server\') {\n        stateDelta.items = [];\n      } else {\n        stateDelta.items = GridView.staticGetSortedAndFilteredItems(this.props.value, this.state.filter, stateDelta.sort, this.props.defaultSort);\n      }\n\n      stateDelta.selectedIndexes = [];\n      this.setState(stateDelta);\n    }\n  }, {\n    key: "handleFilterChange",\n    value: function handleFilterChange(filter) {\n      var stateDelta = {};\n      var key = filter.column.key;\n      var id = \'columnfilter_\' + key;\n      stateDelta.filter = this.state.filter !== undefined ? this.state.filter : new FunctionalFilter([], this.props.columns.map(function (c) {\n        return c.key;\n      }));\n      stateDelta.filter.RemoveFilter({\n        name: key,\n        id: id\n      });\n\n      if (filter.filterTerm !== \'\') {\n        stateDelta.filter.AddFilter({\n          names: [key],\n          expected: filter.filterTerm,\n          term: FilterTerms.Like,\n          id: id\n        });\n      }\n\n      if (GridView.staticIsServerMode(this.props)) {\n        stateDelta.items = [];\n        stateDelta.selectedIndexes = [];\n        stateDelta.rowsCount = undefined;\n      } else {\n        stateDelta.items = GridView.staticGetSortedAndFilteredItems(this.props.value, stateDelta.filter, this.state.sort, this.props.defaultSort);\n        stateDelta.selectedIndexes = [];\n        stateDelta.rowsCount = stateDelta.items.length;\n      }\n\n      this.setState(stateDelta);\n    }\n  }, {\n    key: "onClearFilters",\n    value: function onClearFilters() {\n      this.setState({\n        filter: this.props.filter\n      });\n    }\n  }, {\n    key: "componentWillUnmount",\n    value: ///----------\n    ///Resize\n    ///----------\n    function componentWillUnmount() {\n      this._isMounted = false;\n    }\n  }, {\n    key: "componentDidMount",\n    value: function componentDidMount() {\n      this._isMounted = true;\n      this.recalcSizeParams();\n    }\n  }, {\n    key: "recalcSizeParams",\n    value: function recalcSizeParams() {\n      if (!this._isMounted) {\n        return;\n      }\n\n      if (this.props.autoHeight) {\n        var h = window.innerHeight;\n        this.setState({\n          gridHeight: h - this.props.deltaHeight\n        });\n      }\n    }\n  }], [{\n    key: "getDerivedStateFromProps",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var newState = null;\n\n      if (!jsonEqual(prevState.filter, nextProps.filter)) {\n        newState = {\n          filter: nextProps.filter\n        };\n\n        if (!GridView.staticIsServerMode(nextProps)) {\n          var newItems = Array.isArray(nextProps.value) ? GridView.staticGetSortedAndFilteredItems(nextProps.value, nextProps.filter, prevState.sort, nextProps.defaultSort) : [];\n          newState.items = newItems;\n          newState.selectedIndexes = prevState.selectedIndexes;\n          newState.rowsCount = newItems.length;\n        } else {\n          newState.items = [];\n          newState.selectedIndexes = prevState.selectedIndexes;\n          newState.rowsCount = undefined;\n        }\n      } else {\n        if (!GridView.staticIsServerMode(nextProps) && prevState.originalItems !== nextProps.value) {\n          newState = {};\n\n          var _newItems = Array.isArray(nextProps.value) ? GridView.staticGetSortedAndFilteredItems(nextProps.value, prevState.filter, prevState.sort, nextProps.defaultSort) : [];\n\n          newState.items = _newItems;\n          newState.rowsCount = _newItems.length;\n          newState.selectedIndexes = prevState.selectedIndexes;\n          newState.originalItems = nextProps.value;\n        }\n      }\n\n      return newState;\n    }\n  }, {\n    key: "staticIsServerMode",\n    value: function staticIsServerMode(props) {\n      return props.pagerType === \'server\';\n    }\n  }, {\n    key: "staticGetSortedAndFilteredItems",\n    value: function staticGetSortedAndFilteredItems(array, filter, sort, defaultSort) {\n      var items = [];\n\n      if (array === undefined) {\n        return items;\n      }\n\n      if (filter !== undefined) {\n        items = array.filter(function (r) {\n          return filter.IsRowMatched(r);\n        });\n      } else {\n        items = array;\n      }\n\n      var currentSort = sort;\n\n      if (sort === \'NONE\' || sort === \'\') {\n        if (defaultSort === undefined) {\n          return items;\n        }\n\n        currentSort = defaultSort;\n      }\n\n      var indexSpace = currentSort.indexOf(\' \');\n      var sortColumn = currentSort.substring(0, indexSpace);\n      var sortDirection = currentSort.substring(indexSpace + 1, currentSort.length); //Sorting\n\n      var comparer = function comparer(a, b) {\n        var aValue = a[sortColumn] !== undefined && a[sortColumn] !== null && a[sortColumn].toLowerCase !== undefined ? a[sortColumn].toLowerCase() : a[sortColumn];\n        var bValue = b[sortColumn] !== undefined && b[sortColumn] !== null && b[sortColumn].toLowerCase !== undefined ? b[sortColumn].toLowerCase() : b[sortColumn];\n\n        if (aValue === bValue) {\n          return 0;\n        }\n\n        if (aValue === null || aValue === undefined) {\n          return 1;\n        }\n\n        if (bValue === null || bValue === undefined) {\n          return -1;\n        }\n\n        if (sortDirection === \'ASC\') {\n          return aValue > bValue ? 1 : -1;\n        } else if (sortDirection === \'DESC\') {\n          return aValue < bValue ? 1 : -1;\n        }\n      };\n\n      return items.slice(0).sort(comparer);\n    }\n  }]);\n\n  return GridView;\n}(external_react_["Component"]);\n\n\n\nvar grid_view_RowLoadingRenderer = /*#__PURE__*/function (_Component7) {\n  grid_view_inherits(RowLoadingRenderer, _Component7);\n\n  var _super7 = grid_view_createSuper(RowLoadingRenderer);\n\n  function RowLoadingRenderer() {\n    grid_view_classCallCheck(this, RowLoadingRenderer);\n\n    return _super7.apply(this, arguments);\n  }\n\n  grid_view_createClass(RowLoadingRenderer, [{\n    key: "setScrollLeft",\n    value: function setScrollLeft(scrollBy) {\n      this.row.setScrollLeft(scrollBy);\n    }\n  }, {\n    key: "getClassName",\n    value: function getClassName() {\n      var _this2 = this;\n\n      if (this.props.row.__loading) {\n        return \'dwkit-gridview-rowloading\';\n      }\n\n      if (this.props.row.__id !== undefined && this.props.row.__id !== null && this.props.error !== undefined && this.props.error !== null && Array.isArray(this.props.error)) {\n        var errorForRow = this.props.error.find(function (e) {\n          return e.__id === _this2.props.row.__id;\n        });\n\n        if (errorForRow !== undefined) {\n          return \'dwkit-gridview-rowerror\';\n        }\n      }\n\n      return \'\';\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      return draw(\'row-loading-renderer\', {\n        className: this.getClassName(),\n        me: this,\n        props: this.props,\n        row: this.row\n      });\n    }\n  }]);\n\n  return RowLoadingRenderer;\n}(external_react_["Component"]);\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/menu-group.js\nfunction menu_group_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { menu_group_typeof = function _typeof(obj) { return typeof obj; }; } else { menu_group_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return menu_group_typeof(obj); }\n\nfunction menu_group_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction menu_group_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction menu_group_createClass(Constructor, protoProps, staticProps) { if (protoProps) menu_group_defineProperties(Constructor.prototype, protoProps); if (staticProps) menu_group_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction menu_group_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) menu_group_setPrototypeOf(subClass, superClass); }\n\nfunction menu_group_setPrototypeOf(o, p) { menu_group_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return menu_group_setPrototypeOf(o, p); }\n\nfunction menu_group_createSuper(Derived) { var hasNativeReflectConstruct = menu_group_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = menu_group_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = menu_group_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return menu_group_possibleConstructorReturn(this, result); }; }\n\nfunction menu_group_possibleConstructorReturn(self, call) { if (call && (menu_group_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return menu_group_assertThisInitialized(self); }\n\nfunction menu_group_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction menu_group_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction menu_group_getPrototypeOf(o) { menu_group_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return menu_group_getPrototypeOf(o); }\n\nfunction menu_group_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\nvar menu_group_MenuGroup = /*#__PURE__*/function (_Component) {\n  menu_group_inherits(MenuGroup, _Component);\n\n  var _super = menu_group_createSuper(MenuGroup);\n\n  function MenuGroup(props) {\n    var _this;\n\n    menu_group_classCallCheck(this, MenuGroup);\n\n    _this = _super.call(this, props);\n\n    menu_group_defineProperty(menu_group_assertThisInitialized(_this), "handleItemClick", function (e, _ref) {\n      var name = _ref.name;\n\n      if (isDefined(_this.props.handleEvent)) {\n        var res = _this.props.handleEvent({\n          e: e,\n          key: _this.props.name,\n          eventName: \'onItemClick\',\n          parameters: {\n            target: name\n          }\n        });\n\n        if (res != false) {\n          _this.setState({\n            activeitem: name\n          });\n        }\n      }\n    });\n\n    _this.state = {};\n\n    if (isDefined(props.value)) {\n      _this.state.activeitem = props.value;\n    } else if (props.activeitem != null) {\n      _this.state.activeitem = props.activeitem;\n    }\n\n    return _this;\n  }\n\n  menu_group_createClass(MenuGroup, [{\n    key: "handleItemClick2",\n    value: function handleItemClick2(p, e) {\n      this.handleItemClick(e, p);\n      e.preventDefault();\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      var items = this.props[\'data-items\'];\n\n      if (isUndefined(items) || items == \'\') {\n        items = [];\n      } else if (!Array.isArray(items)) {\n        items = external_json5_default.a.parse(items);\n      }\n\n      return draw(\'menu-group\', {\n        handleItemClick: this.handleItemClick,\n        handleItemClick2: this.handleItemClick2,\n        items: items,\n        me: this,\n        props: this.props,\n        state: this.state\n      });\n    }\n  }], [{\n    key: "getDerivedStateFromProps",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (prevState.activeitem !== nextProps.value) {\n        return {\n          activeitem: nextProps.value\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return MenuGroup;\n}(external_react_["Component"]);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/number-format.js\nfunction number_format_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { number_format_typeof = function _typeof(obj) { return typeof obj; }; } else { number_format_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return number_format_typeof(obj); }\n\nfunction number_format_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction number_format_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction number_format_createClass(Constructor, protoProps, staticProps) { if (protoProps) number_format_defineProperties(Constructor.prototype, protoProps); if (staticProps) number_format_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction number_format_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) number_format_setPrototypeOf(subClass, superClass); }\n\nfunction number_format_setPrototypeOf(o, p) { number_format_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return number_format_setPrototypeOf(o, p); }\n\nfunction number_format_createSuper(Derived) { var hasNativeReflectConstruct = number_format_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = number_format_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = number_format_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return number_format_possibleConstructorReturn(this, result); }; }\n\nfunction number_format_possibleConstructorReturn(self, call) { if (call && (number_format_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return number_format_assertThisInitialized(self); }\n\nfunction number_format_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction number_format_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction number_format_getPrototypeOf(o) { number_format_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return number_format_getPrototypeOf(o); }\n\n\n\n\n\nvar number_format_NumberFormatControl = /*#__PURE__*/function (_Component) {\n  number_format_inherits(NumberFormatControl, _Component);\n\n  var _super = number_format_createSuper(NumberFormatControl);\n\n  function NumberFormatControl() {\n    number_format_classCallCheck(this, NumberFormatControl);\n\n    return _super.apply(this, arguments);\n  }\n\n  number_format_createClass(NumberFormatControl, [{\n    key: "render",\n    value: function render() {\n      var propsControl = {};\n\n      for (var p in this.props) {\n        if (p === \'additionalParams\' || p === \'items\' || p === \'propertyName\') {\n          continue;\n        }\n\n        propsControl[p] = this.props[p];\n      }\n\n      var model = this.props.additionalParams.model;\n      var parentItem = this.props.additionalParams.parentItem;\n      var handleEvent = this.props.additionalParams.handleEvent;\n      propsControl.defaultValue = model.defaultvalue;\n      propsControl.size = model.size;\n\n      if (isNotEmptyString(model.label)) {\n        propsControl.label = model.label;\n      }\n\n      propsControl.labelPosition = model.labelPosition;\n      propsControl.type = model.type;\n      propsControl.disabled = model.disabled;\n      propsControl.transparent = model.transparent;\n      propsControl.fluid = model.fluid;\n      propsControl.readOnly = model.readOnly || this.props.readOnly;\n      propsControl.placeholder = model.placeholder;\n\n      if (propsControl.value == null) {\n        propsControl.value = \'\';\n      }\n\n      propsControl.error = Boolean(this.props.error);\n      propsControl.format = model.format ? model.format : undefined;\n      propsControl.mask = model.mask ? model.mask : undefined;\n\n      propsControl.onValueChange = function (args) {\n        handleEvent({\n          key: propsControl.name,\n          propertyName: propsControl.propertyName,\n          eventName: \'onChange\',\n          name: propsControl.name,\n          value: Number(args.value)\n        });\n      };\n\n      return draw(\'number-format\', {\n        isForm: this.isForm(parentItem),\n        props: this.props,\n        propsControl: propsControl\n      });\n    }\n  }, {\n    key: "isForm",\n    value: function isForm(m) {\n      return m != null && (m[\'data-buildertype\'] === \'form\' || m[\'data-buildertype\'] === \'formgroup\');\n    }\n  }]);\n\n  return NumberFormatControl;\n}(external_react_["Component"]);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/radio-group.js\nfunction radio_group_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { radio_group_typeof = function _typeof(obj) { return typeof obj; }; } else { radio_group_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return radio_group_typeof(obj); }\n\nfunction radio_group_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction radio_group_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction radio_group_createClass(Constructor, protoProps, staticProps) { if (protoProps) radio_group_defineProperties(Constructor.prototype, protoProps); if (staticProps) radio_group_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction radio_group_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) radio_group_setPrototypeOf(subClass, superClass); }\n\nfunction radio_group_setPrototypeOf(o, p) { radio_group_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return radio_group_setPrototypeOf(o, p); }\n\nfunction radio_group_createSuper(Derived) { var hasNativeReflectConstruct = radio_group_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = radio_group_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = radio_group_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return radio_group_possibleConstructorReturn(this, result); }; }\n\nfunction radio_group_possibleConstructorReturn(self, call) { if (call && (radio_group_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return radio_group_assertThisInitialized(self); }\n\nfunction radio_group_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction radio_group_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction radio_group_getPrototypeOf(o) { radio_group_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return radio_group_getPrototypeOf(o); }\n\nfunction radio_group_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar radio_group_isEqual = __webpack_require__(7);\n\nvar radio_group_RadioGroup = /*#__PURE__*/function (_Component) {\n  radio_group_inherits(RadioGroup, _Component);\n\n  var _super = radio_group_createSuper(RadioGroup);\n\n  function RadioGroup() {\n    var _this;\n\n    radio_group_classCallCheck(this, RadioGroup);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    radio_group_defineProperty(radio_group_assertThisInitialized(_this), "onChange", function (e, _ref) {\n      var name = _ref.name,\n          value = _ref.value;\n\n      if (_this.props.onChange) {\n        _this.props.onChange(e, {\n          name: _this.props.name,\n          propertyName: _this.props.propertyName,\n          value: value\n        });\n      } else {\n        if (_this.props.handleEvent) {\n          _this.props.handleEvent({\n            syntheticEvent: e,\n            key: _this.props.name,\n            eventName: \'onChange\',\n            name: name,\n            value: value,\n            propertyName: _this.props.propertyName\n          });\n        } else {\n          console.error(\'Set onChange property for RadioGroup!\');\n        }\n      }\n    });\n\n    return _this;\n  }\n\n  radio_group_createClass(RadioGroup, [{\n    key: "shouldComponentUpdate",\n    value: function shouldComponentUpdate(nextProps) {\n      return !radio_group_isEqual(this.props, nextProps);\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      return draw(\'radio-group\', {\n        props: this.props,\n        onChange: this.onChange.bind(this)\n      });\n    }\n  }]);\n\n  return RadioGroup;\n}(external_react_["Component"]);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/repeater.js\nfunction repeater_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { repeater_typeof = function _typeof(obj) { return typeof obj; }; } else { repeater_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return repeater_typeof(obj); }\n\nfunction repeater_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction repeater_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { repeater_ownKeys(Object(source), true).forEach(function (key) { repeater_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { repeater_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction repeater_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction repeater_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction repeater_createClass(Constructor, protoProps, staticProps) { if (protoProps) repeater_defineProperties(Constructor.prototype, protoProps); if (staticProps) repeater_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction repeater_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) repeater_setPrototypeOf(subClass, superClass); }\n\nfunction repeater_setPrototypeOf(o, p) { repeater_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return repeater_setPrototypeOf(o, p); }\n\nfunction repeater_createSuper(Derived) { var hasNativeReflectConstruct = repeater_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = repeater_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = repeater_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return repeater_possibleConstructorReturn(this, result); }; }\n\nfunction repeater_possibleConstructorReturn(self, call) { if (call && (repeater_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return repeater_assertThisInitialized(self); }\n\nfunction repeater_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction repeater_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction repeater_getPrototypeOf(o) { repeater_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return repeater_getPrototypeOf(o); }\n\nfunction repeater_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable react/no-direct-mutation-state */\n\n/* eslint-disable eqeqeq */\n\n\n\n\n\nvar repeater_isEqual = __webpack_require__(7);\n\nvar repeater_clone = __webpack_require__(10);\n\nvar repeater_Repeater = /*#__PURE__*/function (_Component) {\n  repeater_inherits(Repeater, _Component);\n\n  var _super = repeater_createSuper(Repeater);\n\n  function Repeater(props) {\n    var _this;\n\n    repeater_classCallCheck(this, Repeater);\n\n    _this = _super.call(this, props);\n\n    repeater_defineProperty(repeater_assertThisInitialized(_this), "handleChange", function (item, e, _ref) {\n      var name = _ref.name,\n          propertyName = _ref.propertyName,\n          value = _ref.value,\n          checked = _ref.checked,\n          parameters = _ref.parameters;\n\n      if (!_this.props.controlProps.handleEvent && !_this.props.controlProps.buildermode) {\n        return;\n      }\n\n      var pn = propertyName;\n\n      if (pn === undefined) {\n        pn = name;\n      }\n\n      if (parameters && parameters.index !== undefined) {\n        var items = _this.state.items;\n        items[parameters.index] = repeater_objectSpread({}, item);\n        item = items[parameters.index];\n      }\n\n      if (isUndefined(value) && isDefined(checked)) {\n        item[pn] = checked;\n      } else {\n        item[pn] = value;\n      }\n\n      if (_this.isServerMode()) {\n        _this.forceUpdate();\n\n        return;\n      }\n\n      _this.sendChangesToParent();\n\n      if (e && e.preventDefault) {\n        e.preventDefault();\n      } else {\n        _this.forceUpdate();\n      }\n    });\n\n    repeater_defineProperty(repeater_assertThisInitialized(_this), "loadNextPage", function () {\n      var pageSize = _this.state.pageSize;\n      var startIndex = 0;\n\n      if (isDefined(_this.state.items)) {\n        startIndex = _this.state.items.length;\n      }\n\n      _this.loadPage(startIndex, pageSize);\n    });\n\n    _this.psTemplate = \'template\';\n    _this.state = {\n      items: [],\n      sort: \'\',\n      filter: props.filter,\n      firstLoad: !props.controlProps.buildermode && Repeater.staticIsServerMode(props),\n      pageSize: props.pageSize ? props.pageSize : 20\n    };\n    return _this;\n  }\n\n  repeater_createClass(Repeater, [{\n    key: "shouldComponentUpdate",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      if (nextState.needUpdate) {\n        return true;\n      }\n\n      return !repeater_isEqual(this.props, nextProps);\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      return draw(\'repeater\', {\n        isServerMode: this.isServerMode(),\n        loadNextPage: this.loadNextPage,\n        me: this,\n        props: this.props,\n        psTemplate: this.psTemplate,\n        state: this.state,\n        handleChange: this.handleChange\n      });\n    }\n  }, {\n    key: "sendChangesToParent",\n    value: function sendChangesToParent() {\n      var rows = Repeater.copyObj(this.state.items);\n\n      if (Array.isArray(rows) && rows.length > 0) {\n        for (var i in rows) {\n          delete rows[i].__originalIndex;\n        }\n      }\n\n      var stringmode = typeof this.props.value === \'string\';\n      var res = stringmode ? external_json5_default.a.stringify(rows) : rows;\n\n      if (this.props.controlProps.buildermode) {\n        this.props.value = res;\n      } else {\n        this.props.controlProps.handleEvent({\n          syntheticEvent: null,\n          key: this.props.name,\n          propertyName: this.props.propertyName,\n          eventName: \'onChange\',\n          name: this.name,\n          value: res\n        });\n      }\n    }\n  }, {\n    key: "loadPage",\n    value: function loadPage(startIndex, pageSize) {\n      var me = this;\n\n      if (!this.props.controlProps || this.props.controlProps.getAdditionalDataForControl === undefined) {\n        if (console !== undefined) {\n          console.log(\'Repeater: For paging on server need to set getAdditionalDataForControl func!\');\n        }\n      } else {\n        var sortString = this.state.sort;\n\n        if (sortString === \'\' && this.props.defaultSort !== undefined) {\n          sortString = this.props.defaultSort;\n        }\n\n        this.state.loading = true;\n        this.forceUpdate();\n        this.props.controlProps.getAdditionalDataForControl(this, {\n          startIndex: startIndex,\n          pageSize: pageSize,\n          filters: this.state.filter !== undefined ? this.state.filter.GetFilterAsObjects() : [],\n          sort: sortString\n        }, function (_ref2) {\n          var sIndex = _ref2.sIndex,\n              pageSize = _ref2.pageSize,\n              rowsCount = _ref2.rowsCount,\n              items = _ref2.items;\n\n          if (rowsCount === undefined || items === undefined) {} else {\n            me.state.rowsCount = rowsCount;\n\n            if (me.state.items.length == startIndex) {\n              for (var i = 0; i < items.length; i++) {\n                me.state.items.push(items[i]);\n              }\n            }\n          }\n\n          me.state.loading = false;\n          me.forceUpdate();\n        });\n      }\n    }\n  }, {\n    key: "isServerMode",\n    value: function isServerMode() {\n      return Repeater.staticIsServerMode(this.props);\n    }\n  }], [{\n    key: "getDerivedStateFromProps",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var newState = {\n        needUpdate: false\n      };\n\n      if (!repeater_isEqual(prevState.filter, nextProps.filter)) {\n        newState.filter = nextProps.filter;\n        newState.needUpdate = true;\n\n        if (!Repeater.staticIsServerMode(nextProps)) {\n          var newItems = Repeater.staticGetSortedAndFilteredItems(nextProps.value, nextProps.filter, prevState.sort, nextProps.defaultSort);\n          newState.items = newItems;\n          newState.selectedIndexes = [];\n          newState.rowsCount = newItems.length;\n        } else {\n          newState.items = [];\n          newState.firstLoad = true;\n          newState.rowsCount = undefined;\n        }\n      } else {\n        if (!Repeater.staticIsServerMode(nextProps) && !repeater_isEqual(prevState.originalItems, nextProps.value)) {\n          var _newItems = Repeater.staticGetSortedAndFilteredItems(nextProps.value, prevState.filter, prevState.sort, nextProps.defaultSort);\n\n          newState.items = _newItems;\n          newState.rowsCount = _newItems.length;\n          newState.selectedIndexes = [];\n          newState.originalItems = Repeater.copyObj(nextProps.value);\n          newState.needUpdate = true;\n        }\n      }\n\n      return newState;\n    }\n  }, {\n    key: "staticIsServerMode",\n    value: function staticIsServerMode(props) {\n      return props.pagerType && props.pagerType.toLowerCase() === \'server\';\n    }\n  }, {\n    key: "staticCheckData",\n    value: function staticCheckData(data) {\n      var rows = !data ? [] : data;\n\n      if (!Array.isArray(rows)) {\n        try {\n          rows = external_json5_default.a.parse(rows);\n        } catch (e) {}\n      } else {\n        rows = repeater_clone(rows);\n      }\n\n      return rows;\n    }\n  }, {\n    key: "staticGetSortedAndFilteredItems",\n    value: function staticGetSortedAndFilteredItems(array, filter, sort, defaultSort) {\n      var items = Repeater.staticCheckData(array);\n\n      if (items === undefined) {\n        return items;\n      }\n\n      if (Array.isArray(items) && items.length > 0) {\n        for (var i in items) {\n          items[i].__originalIndex = i;\n          i++;\n        }\n      }\n\n      if (filter !== undefined) {\n        items = items.filter(function (r) {\n          return filter.IsRowMatched(r);\n        });\n      }\n\n      var currentSort = sort;\n\n      if (sort === \'NONE\' || sort === \'\') {\n        if (defaultSort === undefined) {\n          return items;\n        }\n\n        currentSort = defaultSort;\n      }\n\n      var indexSpace = currentSort.indexOf(\' \');\n      var sortColumn = currentSort.substring(0, indexSpace);\n      var sortDirection = currentSort.substring(indexSpace + 1, currentSort.length); //Sorting\n\n      var comparer = function comparer(a, b) {\n        var aValue = a[sortColumn] !== undefined && a[sortColumn] !== null && a[sortColumn].toLowerCase !== undefined ? a[sortColumn].toLowerCase() : a[sortColumn];\n        var bValue = b[sortColumn] !== undefined && b[sortColumn] !== null && b[sortColumn].toLowerCase !== undefined ? b[sortColumn].toLowerCase() : b[sortColumn];\n\n        if (aValue === bValue) {\n          return 0;\n        }\n\n        if (aValue === null || aValue === undefined) {\n          return 1;\n        }\n\n        if (bValue === null || bValue === undefined) {\n          return -1;\n        }\n\n        if (sortDirection === \'ASC\') {\n          return aValue > bValue ? 1 : -1;\n        } else if (sortDirection === \'DESC\') {\n          return aValue < bValue ? 1 : -1;\n        }\n      };\n\n      return items.sort(comparer);\n    }\n  }, {\n    key: "copyObj",\n    value: function copyObj(obj) {\n      if (null == obj || "object" != repeater_typeof(obj)) return obj;\n      var copy = obj.constructor();\n\n      for (var attr in obj) {\n        if (obj.hasOwnProperty(attr)) copy[attr] = this.copyObj(obj[attr]);\n      }\n\n      return copy;\n    }\n  }]);\n\n  return Repeater;\n}(external_react_["Component"]);\n\n\n// EXTERNAL MODULE: ../optimajet-builder-shared/src/formdata.jsx\nvar formdata = __webpack_require__(4);\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/repeater-control.js\nfunction repeater_control_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { repeater_control_typeof = function _typeof(obj) { return typeof obj; }; } else { repeater_control_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return repeater_control_typeof(obj); }\n\nfunction repeater_control_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction repeater_control_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { repeater_control_ownKeys(Object(source), true).forEach(function (key) { repeater_control_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { repeater_control_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction repeater_control_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction repeater_control_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction repeater_control_createClass(Constructor, protoProps, staticProps) { if (protoProps) repeater_control_defineProperties(Constructor.prototype, protoProps); if (staticProps) repeater_control_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction repeater_control_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) repeater_control_setPrototypeOf(subClass, superClass); }\n\nfunction repeater_control_setPrototypeOf(o, p) { repeater_control_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return repeater_control_setPrototypeOf(o, p); }\n\nfunction repeater_control_createSuper(Derived) { var hasNativeReflectConstruct = repeater_control_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = repeater_control_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = repeater_control_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return repeater_control_possibleConstructorReturn(this, result); }; }\n\nfunction repeater_control_possibleConstructorReturn(self, call) { if (call && (repeater_control_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return repeater_control_assertThisInitialized(self); }\n\nfunction repeater_control_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction repeater_control_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction repeater_control_getPrototypeOf(o) { repeater_control_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return repeater_control_getPrototypeOf(o); }\n\nfunction repeater_control_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar repeater_control_isEqual = __webpack_require__(7);\n\nvar repeater_control_RepeaterControl = /*#__PURE__*/function (_Component) {\n  repeater_control_inherits(RepeaterControl, _Component);\n\n  var _super = repeater_control_createSuper(RepeaterControl);\n\n  function RepeaterControl() {\n    var _this;\n\n    repeater_control_classCallCheck(this, RepeaterControl);\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(_args));\n\n    repeater_control_defineProperty(repeater_control_assertThisInitialized(_this), "handleEvent", function (args) {\n      if (!args.parameters) {\n        args.parameters = {};\n      }\n\n      if (!args.parameters.row) {\n        args.parameters.row = _this.props.item;\n      }\n\n      if (args.eventName === \'onChange\') {\n        if (!args.parameters.index) {\n          args.parameters.index = _this.props.index;\n        }\n\n        _this.props.handleChange(_this.props.item, args.syntheticEvent, args);\n      } else {\n        if (!args.parameters.index) {\n          if (_this.props.item && _this.props.item.__originalIndex) {\n            args.parameters.index = _this.props.item.__originalIndex;\n          } else {\n            args.parameters.index = _this.props.index;\n          }\n        }\n\n        _this.props.controlProps.handleEvent(args);\n      }\n    });\n\n    repeater_control_defineProperty(repeater_control_assertThisInitialized(_this), "getAdditionalDataForControl", function (control, parameters, callback) {\n      if (!parameters) {\n        parameters = {};\n      }\n\n      if (!parameters.row) {\n        parameters.row = _this.props.item;\n      }\n\n      return _this.props.controlProps.getAdditionalDataForControl(control, parameters, callback);\n    });\n\n    return _this;\n  }\n\n  repeater_control_createClass(RepeaterControl, [{\n    key: "shouldComponentUpdate",\n    value: function shouldComponentUpdate(nextProps) {\n      return !repeater_control_isEqual(this.props, nextProps);\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      var createBuilderDropzone = this.props.controlProps.createBuilderDropzone;\n      var model = this.props.model;\n      var dzkey = this.props.index + \'_\';\n      var psTemplate = this.props.psTemplate;\n      var data = this.props.item;\n      var hideControls = undefined;\n      var readOnlyControls = undefined;\n\n      if (!this.props.controlProps.buildermode) {\n        var conditions = Object(formdata["checkConditions"])({\n          model: model,\n          data: data\n        });\n        hideControls = conditions.hideControls;\n        readOnlyControls = conditions.readOnlyControls;\n      }\n\n      var element = this.props.controlProps.createControls(this.props.parent, repeater_control_objectSpread(repeater_control_objectSpread({}, this.props.controlProps), {}, {\n        model: model,\n        parentPlaceholder: psTemplate,\n        data: data,\n        errors: this.props.errors,\n        needCheckReplace: !this.props.controlProps.buildermode,\n        formData: this.props.data,\n        parentItem: this.props.parentItem,\n        handleEvent: this.handleEvent,\n        getAdditionalDataForControl: this.getAdditionalDataForControl,\n        hideControls: hideControls,\n        readOnlyControls: readOnlyControls\n      }));\n\n      if (this.props.includeDropzone && createBuilderDropzone) {\n        if (element.length > 0 && model.length > 0) {\n          element.unshift(createBuilderDropzone(dzkey + \'repeter_dropzone_header\', this.props.parentItem.key, undefined, undefined, psTemplate));\n        }\n\n        element.push(createBuilderDropzone(dzkey + \'repeter_dropzone_footer\', this.props.parentItem.key, model[model.length - 1].key, undefined, psTemplate));\n      }\n\n      return element;\n    }\n  }]);\n\n  return RepeaterControl;\n}(external_react_["Component"]);\n\n\n// EXTERNAL MODULE: ../optimajet-builder-shared/node_modules/isomorphic-fetch/fetch-npm-browserify.js\nvar fetch_npm_browserify = __webpack_require__(11);\nvar fetch_npm_browserify_default = /*#__PURE__*/__webpack_require__.n(fetch_npm_browserify);\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/search.js\nfunction search_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { search_typeof = function _typeof(obj) { return typeof obj; }; } else { search_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return search_typeof(obj); }\n\nfunction search_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction search_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction search_createClass(Constructor, protoProps, staticProps) { if (protoProps) search_defineProperties(Constructor.prototype, protoProps); if (staticProps) search_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction search_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) search_setPrototypeOf(subClass, superClass); }\n\nfunction search_setPrototypeOf(o, p) { search_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return search_setPrototypeOf(o, p); }\n\nfunction search_createSuper(Derived) { var hasNativeReflectConstruct = search_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = search_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = search_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return search_possibleConstructorReturn(this, result); }; }\n\nfunction search_possibleConstructorReturn(self, call) { if (call && (search_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return search_assertThisInitialized(self); }\n\nfunction search_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction search_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction search_getPrototypeOf(o) { search_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return search_getPrototypeOf(o); }\n\n\n\n\n\n\nvar search_SearchControl = /*#__PURE__*/function (_Component) {\n  search_inherits(SearchControl, _Component);\n\n  var _super = search_createSuper(SearchControl);\n\n  function SearchControl(props) {\n    var _this;\n\n    search_classCallCheck(this, SearchControl);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      value: \'\'\n    };\n    return _this;\n  }\n\n  search_createClass(SearchControl, [{\n    key: "render",\n    value: function render() {\n      var controlProps = {};\n\n      for (var p in this.props) {\n        if (p === \'value\' || p === \'handleEvent\') {\n          continue;\n        }\n\n        controlProps[p] = this.props[p];\n      }\n\n      return draw(\'search\', {\n        controlProps: controlProps,\n        handleResultSelect: this.handleResultSelect.bind(this),\n        handleSearchChange: this.handleSearchChange.bind(this),\n        state: this.state\n      });\n    }\n  }, {\n    key: "resetSearch",\n    value: function resetSearch() {\n      this.setState({\n        isLoading: false,\n        results: []\n      });\n    }\n  }, {\n    key: "handleResultSelect",\n    value: function handleResultSelect(e, _ref) {\n      var result = _ref.result;\n\n      if (isDefined(this.props.handleEvent)) {\n        this.props.handleEvent({\n          key: this.props.name,\n          propertyName: this.props.propertyName,\n          eventName: \'onSelect\',\n          parameters: result\n        });\n      }\n    }\n  }, {\n    key: "handleSearchChange",\n    value: function handleSearchChange(e, _ref2) {\n      var value = _ref2.value;\n      var me = this;\n      me.setState({\n        isLoading: true,\n        value: value\n      });\n      setTimeout(function () {\n        if (me.state.value === null || me.state.value === undefined || me.state.value.length < 2) {\n          return me.resetSearch();\n        }\n\n        me.search(me.state.value);\n      }, 200);\n    }\n  }, {\n    key: "search",\n    value: function search(searchStr) {\n      var me = this;\n      var url = this.props.url;\n      url += this.props.url.includes(\'?\') ? \'&\' : \'?\';\n      url += \'term=\' + searchStr;\n      fetch_npm_browserify_default()(url, {\n        credentials: \'same-origin\'\n      }).then(function (response) {\n        return response.json();\n      }).then(function (results) {\n        me.setState({\n          isLoading: false,\n          results: results\n        });\n      })["catch"](function (error) {\n        if (isUndefined(console)) {\n          alert(error);\n        } else {\n          console.error(error);\n        }\n      });\n    }\n  }]);\n\n  return SearchControl;\n}(external_react_["Component"]);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/semantic-control.js\nfunction semantic_control_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { semantic_control_typeof = function _typeof(obj) { return typeof obj; }; } else { semantic_control_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return semantic_control_typeof(obj); }\n\nfunction semantic_control_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction semantic_control_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { semantic_control_ownKeys(Object(source), true).forEach(function (key) { semantic_control_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { semantic_control_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction semantic_control_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction semantic_control_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction semantic_control_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction semantic_control_createClass(Constructor, protoProps, staticProps) { if (protoProps) semantic_control_defineProperties(Constructor.prototype, protoProps); if (staticProps) semantic_control_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction semantic_control_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) semantic_control_setPrototypeOf(subClass, superClass); }\n\nfunction semantic_control_setPrototypeOf(o, p) { semantic_control_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return semantic_control_setPrototypeOf(o, p); }\n\nfunction semantic_control_createSuper(Derived) { var hasNativeReflectConstruct = semantic_control_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = semantic_control_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = semantic_control_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return semantic_control_possibleConstructorReturn(this, result); }; }\n\nfunction semantic_control_possibleConstructorReturn(self, call) { if (call && (semantic_control_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return semantic_control_assertThisInitialized(self); }\n\nfunction semantic_control_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction semantic_control_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction semantic_control_getPrototypeOf(o) { semantic_control_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return semantic_control_getPrototypeOf(o); }\n\n/* eslint-disable eqeqeq */\n\n\n\n\n\nvar semantic_control_clone = __webpack_require__(10); // todo rename from SemanticControl to something like UberControl or SimpleControl\n\n\nvar semantic_control_SemanticControl = /*#__PURE__*/function (_Component) {\n  semantic_control_inherits(SemanticControl, _Component);\n\n  var _super = semantic_control_createSuper(SemanticControl);\n\n  function SemanticControl(props) {\n    var _this;\n\n    semantic_control_classCallCheck(this, SemanticControl);\n\n    _this = _super.call(this, props);\n    _this.state = {};\n    return _this;\n  }\n\n  semantic_control_createClass(SemanticControl, [{\n    key: "render",\n    value: function render() {\n      var _this2 = this;\n\n      var me = this;\n      var propsControl = {};\n\n      for (var p in this.props) {\n        if (p === \'additionalParams\' || p === \'items\' || p === \'propertyName\') {\n          continue;\n        }\n\n        propsControl[p] = this.props[p];\n      }\n\n      var model = this.props.additionalParams.model;\n      var data = this.props.additionalParams.data;\n      var errors = this.props.additionalParams.errors;\n      var children = this.props.additionalParams.children;\n      var parentItem = this.props.additionalParams.parentItem;\n      var handleEvent = this.props.additionalParams.handleEvent;\n      var type = model[\'data-buildertype\'];\n      var res;\n\n      if (type === \'header\') {\n        res = draw(type, {\n          props: this.props,\n          propsControl: propsControl,\n          model: model\n        });\n      } else if (type === \'button\') {\n        propsControl.floated = model.floated;\n        propsControl.size = model.size !== \'\' ? model.size : null;\n        propsControl.content = this.props.content;\n        propsControl.basic = model.basic;\n        propsControl.circular = model.circular;\n        propsControl.compact = model.compact;\n        propsControl.disabled = model.disabled;\n        propsControl.fluid = model.fluid;\n        propsControl.primary = model.primary;\n        propsControl.secondary = model.secondary;\n        propsControl.link = model.link;\n\n        if (model.icon) {\n          propsControl.icon = model.icon;\n        }\n\n        if (handleEvent !== undefined) {\n          var onClickParent = propsControl.onClick;\n\n          propsControl.onClick = function (e) {\n            if (onClickParent) onClickParent(e);\n            if (e.currentTarget && e.currentTarget.classList) e.currentTarget.classList.add("loading");\n            var res = handleEvent({\n              syntheticEvent: e,\n              key: propsControl.name,\n              eventName: "onClick"\n            });\n            if (e.currentTarget && e.currentTarget.classList) e.currentTarget.classList.remove("loading");\n            return res;\n          };\n        }\n\n        res = draw(type, {\n          propsControl: propsControl,\n          isForm: this.isForm(parentItem)\n        });\n      } else if (type === \'label\') {\n        res = draw(type, {\n          props: this.props,\n          propsControl: propsControl,\n          model: model\n        });\n      } else if (type === \'message\') {\n        res = draw(type, {\n          props: this.props,\n          propsControl: propsControl,\n          model: model\n        });\n      } else if (type === \'input\') {\n        propsControl.defaultValue = model.defaultvalue;\n        propsControl.size = model.size;\n\n        if (isNotEmptyString(model.label)) {\n          propsControl.label = model.label;\n        }\n\n        propsControl.labelPosition = model.labelPosition;\n        propsControl.placeholder = model.placeholder;\n        propsControl.type = model.type;\n        propsControl.disabled = model.disabled;\n        propsControl.transparent = model.transparent;\n        propsControl.fluid = model.fluid;\n        propsControl.readOnly = model.readOnly || this.props.readOnly;\n\n        if (handleEvent != null) {\n          propsControl.onChange = function (e, _ref) {\n            var name = _ref.name,\n                value = _ref.value;\n            var res = value;\n\n            if (propsControl.type === \'number\') {\n              if (res == "") {\n                res = undefined;\n              } else if (typeof res == "string") {\n                var lastWord = res[res.length - 1];\n\n                if (lastWord != "." && lastWord != ",") {\n                  res = Number(res);\n\n                  if (Number.isNaN(res)) {\n                    res = value;\n                  }\n                }\n              }\n            }\n\n            handleEvent({\n              syntheticEvent: e,\n              key: propsControl.name,\n              propertyName: me.props.propertyName,\n              eventName: \'onChange\',\n              name: name,\n              value: res\n            });\n          };\n        }\n\n        if (propsControl.value == null) {\n          propsControl.value = \'\';\n        }\n\n        propsControl.error = Boolean(this.props.error);\n        res = draw(type, {\n          isForm: this.isForm(parentItem),\n          props: this.props,\n          propsControl: propsControl\n        });\n      } else if (type === \'textarea\') {\n        // delete autoHeight to suppress semantic-ui-react warning\n        delete propsControl.autoHeight;\n        propsControl.placeholder = model.placeholder;\n        propsControl.rows = model.rows !== null && model.rows !== undefined ? Number(model.rows) : undefined;\n\n        if (model.label !== undefined && model.label !== \'\') {\n          propsControl.label = model.label;\n        }\n\n        propsControl.readOnly = model.readOnly || this.props.readOnly;\n\n        if (handleEvent !== null) {\n          propsControl.onChange = function (e, _ref2) {\n            var name = _ref2.name,\n                value = _ref2.value;\n            handleEvent({\n              syntheticEvent: e,\n              key: propsControl.name,\n              propertyName: me.props.propertyName,\n              eventName: \'onChange\',\n              name: name,\n              value: value\n            });\n          };\n        }\n\n        if (propsControl.value == null) {\n          propsControl.value = \'\';\n        }\n\n        res = draw(type, {\n          isForm: this.isForm(parentItem),\n          props: this.props,\n          propsControl: propsControl\n        });\n      } else if (type === \'checkbox\') {\n        if (model.label !== undefined && model.label !== \'\') {\n          propsControl.label = model.label;\n        }\n\n        propsControl.placeholder = model.placeholder;\n        propsControl.type = model.type;\n        propsControl.disabled = model.disabled;\n        propsControl.fitted = model.fitted;\n        propsControl.indeterminate = model.indeterminate;\n        propsControl.readOnly = model.readOnly || this.props.readOnly;\n        propsControl.slider = model.slider;\n        propsControl.toggle = model.toggle;\n\n        if (handleEvent !== null) {\n          propsControl.onChange = function (e, _ref3) {\n            var name = _ref3.name,\n                checked = _ref3.checked;\n            handleEvent({\n              syntheticEvent: e,\n              key: propsControl.name,\n              propertyName: me.props.propertyName,\n              eventName: \'onChange\',\n              name: name,\n              value: checked\n            });\n          };\n        }\n\n        if (data !== undefined) {\n          var value = data[me.props.propertyName];\n\n          if (typeof variable === \'boolean\') {\n            propsControl.checked = value;\n          } else if (value === \'true\' || value === \'1\') {\n            propsControl.checked = true;\n          } else if (value === \'false\' || value === \'0\') {\n            propsControl.checked = false;\n          } else {\n            propsControl.checked = Boolean(value);\n          }\n        }\n\n        if (errors && isDefined(errors[model.key]) && Boolean(errors[model.key]) == true) {\n          if (!isNotEmptyString(propsControl.className)) {\n            propsControl.className = \'error\';\n          } else {\n            propsControl.className += \' error\';\n          }\n        }\n\n        res = draw(type, {\n          isForm: this.isForm(parentItem),\n          propsControl: propsControl\n        });\n      } else if (type === \'dropdown\') {\n        var options = [];\n\n        if (model[\'data-elements\'] !== undefined) {\n          if (Array.isArray(model[\'data-elements\'])) {\n            options = model[\'data-elements\'];\n          } else {\n            options = external_json5_default.a.parse(model[\'data-elements\']);\n          }\n        }\n\n        if (model.label !== undefined && model.label !== \'\') {\n          propsControl.label = model.label;\n        }\n\n        if (model.clearable && !model.multiple) {\n          options = semantic_control_clone(options);\n          options.unshift({\n            key: \'__reset\',\n            value: \'\',\n            text: \'[ Clear ]\'\n          });\n        }\n\n        if (model.sortAlphabetically) {\n          options.sort(function (a, b) {\n            return a.text.localeCompare(b.text);\n          });\n        }\n\n        propsControl.defaultValue = model.defaultvalue;\n        propsControl.placeholder = model.placeholder;\n        propsControl.options = options;\n        propsControl.fluid = model.fluid;\n        propsControl.selection = model.selection;\n        propsControl.clearable = model.clearable;\n        propsControl.multiple = model.multiple;\n        propsControl.search = model.search;\n        propsControl.disabled = model.disabled || model.readOnly || this.props.readOnly;\n\n        if (errors && errors[model.key] !== undefined) {\n          propsControl.error = Boolean(propsControl.error);\n        }\n\n        if (handleEvent !== null) {\n          propsControl.onChange = function (e, _ref4) {\n            var name = _ref4.name,\n                value = _ref4.value;\n            handleEvent({\n              syntheticEvent: e,\n              key: propsControl.name,\n              propertyName: me.props.propertyName,\n              eventName: \'onChange\',\n              name: name,\n              value: value\n            });\n          };\n        }\n\n        propsControl.allowAdditions = model.allowAddItems;\n\n        if (propsControl.allowAdditions) {\n          propsControl.onAddItem = function (e, _ref5) {\n            var value = _ref5.value;\n            var v = semantic_control_clone(propsControl.value);\n\n            if (Array.isArray(v)) {\n              if (!v.includes(value)) {\n                v.push(value);\n              }\n            } else {\n              v = [value];\n            }\n\n            propsControl.onChange(e, {\n              name: propsControl.name,\n              value: v\n            });\n          };\n        }\n\n        if (propsControl.multiple) {\n          if (propsControl.value === undefined || propsControl.value === null) {\n            propsControl.value = [];\n          }\n\n          if (!Array.isArray(propsControl.value)) {\n            var valueArray;\n\n            try {\n              valueArray = external_json5_default.a.parse(propsControl.value);\n            } catch (e) {}\n\n            if (!Array.isArray(valueArray)) {\n              valueArray = [propsControl.value];\n            }\n\n            propsControl.value = valueArray;\n          }\n\n          if (propsControl.allowAdditions) {\n            this.dropdownCheckAdditional(propsControl.value, propsControl.options);\n          } else {\n            var includedInOptions = function includedInOptions(val) {\n              return propsControl.options.some(function (_ref6) {\n                var value = _ref6.value;\n                return value === val;\n              });\n            };\n\n            propsControl.value = propsControl.value.filter(includedInOptions);\n          }\n        }\n\n        res = draw(type, {\n          isForm: this.isForm(parentItem),\n          props: this.props,\n          propsControl: propsControl\n        });\n      } else if (type === \'statistic\') {\n        var _items;\n\n        var items = [];\n\n        if (model[\'data-elements\'] !== undefined) {\n          if (Array.isArray(model[\'data-elements\'])) {\n            items = model[\'data-elements\'];\n          } else {\n            items = external_json5_default.a.parse(model[\'data-elements\']);\n          }\n        }\n\n        (_items = items) === null || _items === void 0 ? void 0 : _items.forEach(function (value, index) {\n          return value.key = value.key || index;\n        });\n        res = draw(type, {\n          items: items,\n          model: model,\n          propsControl: propsControl\n        });\n      } else if (type === \'image\') {\n        res = draw(type, {\n          me: me,\n          model: model,\n          props: this.props,\n          propsControl: propsControl\n        });\n      } else if (type === \'form\') {\n        res = draw(type, {\n          propsControl: propsControl,\n          children: children,\n          model: model\n        });\n      } else if (type === \'formgroup\') {\n        res = draw(type, {\n          propsControl: propsControl,\n          widths: model.widths,\n          widthsCustom: model.widthsCustom,\n          children: children,\n          orientation: model.orientation\n        });\n      } else if (type === \'breadcrumb\') {\n        var _children = [];\n\n        if (Array.isArray(this.props.items)) {\n          var _loop = function _loop(i) {\n            var item = _this2.props.items[i];\n            var childProps = {\n              key: i\n            };\n            childProps.active = item.active;\n            childProps.href = item.url;\n\n            if (handleEvent !== null) {\n              childProps.onClick = function (e) {\n                handleEvent({\n                  syntheticEvent: e,\n                  key: propsControl.name,\n                  eventName: \'onItemClick\',\n                  parameters: {\n                    target: item.url\n                  }\n                });\n                e.preventDefault();\n              };\n            }\n\n            _children.push({\n              childProps: semantic_control_objectSpread({}, childProps),\n              text: isDefined(item.text) ? item.text : \'<not set>\'\n            });\n\n            if (i < _this2.props.items.length - 1) {\n              var dividerProps = {\n                key: i + \'_d\'\n              };\n\n              if (item.divider !== \'\') {\n                dividerProps.icon = item.divider;\n              }\n\n              _children.push({\n                dividerProps: semantic_control_objectSpread({}, dividerProps),\n                isDivider: true\n              });\n            }\n          };\n\n          for (var i = 0; i < this.props.items.length; i++) {\n            _loop(i);\n          }\n        }\n\n        res = draw(type, {\n          children: _children,\n          propsControl: propsControl\n        });\n      } else {\n        res = draw(\'unknown\', {\n          props: this.props,\n          type: type\n        });\n      }\n\n      return res;\n    }\n  }, {\n    key: "isForm",\n    value: function isForm(m) {\n      return m != null && (m[\'data-buildertype\'] === \'form\' || m[\'data-buildertype\'] === \'formgroup\');\n    }\n  }, {\n    key: "dropdownCheckAdditional",\n    value: function dropdownCheckAdditional(value, options) {\n      if (!Array.isArray(value)) {\n        return;\n      }\n\n      value.forEach(function (v) {\n        var isFind = false;\n\n        for (var i = 0; i < options.length; i++) {\n          var o = options[i];\n\n          if (v === o.value) {\n            isFind = true;\n            break;\n          }\n        }\n\n        if (isFind == false) {\n          options.push({\n            value: v,\n            text: v\n          });\n        }\n      });\n    }\n  }]);\n\n  return SemanticControl;\n}(external_react_["Component"]);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/signature.js\nfunction signature_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { signature_typeof = function _typeof(obj) { return typeof obj; }; } else { signature_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return signature_typeof(obj); }\n\nfunction signature_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction signature_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction signature_createClass(Constructor, protoProps, staticProps) { if (protoProps) signature_defineProperties(Constructor.prototype, protoProps); if (staticProps) signature_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction signature_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) signature_setPrototypeOf(subClass, superClass); }\n\nfunction signature_setPrototypeOf(o, p) { signature_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return signature_setPrototypeOf(o, p); }\n\nfunction signature_createSuper(Derived) { var hasNativeReflectConstruct = signature_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = signature_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = signature_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return signature_possibleConstructorReturn(this, result); }; }\n\nfunction signature_possibleConstructorReturn(self, call) { if (call && (signature_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return signature_assertThisInitialized(self); }\n\nfunction signature_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction signature_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction signature_getPrototypeOf(o) { signature_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return signature_getPrototypeOf(o); }\n\nfunction signature_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar signature_Signature = /*#__PURE__*/function (_Component) {\n  signature_inherits(Signature, _Component);\n\n  var _super = signature_createSuper(Signature);\n\n  function Signature() {\n    var _this;\n\n    signature_classCallCheck(this, Signature);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    signature_defineProperty(signature_assertThisInitialized(_this), "onUpload", function (file, response) {\n      var me = signature_assertThisInitialized(_this);\n\n      var parameters = {\n        name: file.name,\n        token: response.result.properties[\'Token\'],\n        success: response.success,\n        properties: response.result.properties\n      };\n\n      if (response.success) {\n        if (me.props.onChange) {\n          me.props.onChange(null, {\n            name: me.props.name,\n            propertyName: me.props.propertyName,\n            value: response.result.properties[\'Token\'],\n            parameters: parameters\n          });\n        }\n      } else {\n        if (me.props.onUploadFail) {\n          me.props.onUploadFail(null, {\n            name: me.props.name,\n            propertyName: me.props.propertyName,\n            message: response.result.message,\n            details: response.result.details,\n            success: false\n          });\n        }\n      }\n    });\n\n    signature_defineProperty(signature_assertThisInitialized(_this), "onClear", function (e) {\n      var me = signature_assertThisInitialized(_this);\n\n      if (me.props.onChange) {\n        me.props.onChange(null, {\n          name: me.props.name,\n          propertyName: me.props.propertyName,\n          value: null\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  signature_createClass(Signature, [{\n    key: "render",\n    value: function render() {\n      var onClear = this.onClear,\n          onUpload = this.onUpload;\n      return draw(\'signature\', {\n        handleChange: this.handleChange,\n        me: this,\n        onClear: onClear,\n        onUpload: onUpload,\n        props: this.props,\n        state: this.state\n      });\n    }\n  }]);\n\n  return Signature;\n}(external_react_["Component"]);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/static-content.js\nfunction static_content_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { static_content_typeof = function _typeof(obj) { return typeof obj; }; } else { static_content_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return static_content_typeof(obj); }\n\nfunction static_content_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction static_content_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction static_content_createClass(Constructor, protoProps, staticProps) { if (protoProps) static_content_defineProperties(Constructor.prototype, protoProps); if (staticProps) static_content_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction static_content_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) static_content_setPrototypeOf(subClass, superClass); }\n\nfunction static_content_setPrototypeOf(o, p) { static_content_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return static_content_setPrototypeOf(o, p); }\n\nfunction static_content_createSuper(Derived) { var hasNativeReflectConstruct = static_content_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = static_content_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = static_content_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return static_content_possibleConstructorReturn(this, result); }; }\n\nfunction static_content_possibleConstructorReturn(self, call) { if (call && (static_content_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return static_content_assertThisInitialized(self); }\n\nfunction static_content_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction static_content_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction static_content_getPrototypeOf(o) { static_content_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return static_content_getPrototypeOf(o); }\n\n\n\n\nvar static_content_StaticContent = /*#__PURE__*/function (_Component) {\n  static_content_inherits(StaticContent, _Component);\n\n  var _super = static_content_createSuper(StaticContent);\n\n  function StaticContent(props) {\n    var _this;\n\n    static_content_classCallCheck(this, StaticContent);\n\n    _this = _super.call(this, props);\n    _this.state = {};\n    return _this;\n  }\n\n  static_content_createClass(StaticContent, [{\n    key: "render",\n    value: function render() {\n      var spanProps = {\n        name: this.props.name,\n        className: this.props[\'style-customcss\'],\n        style: this.props.style,\n        \'data-buildertype\': this.props[\'data-buildertype\']\n      };\n      return draw(\'static-content\', {\n        props: this.props,\n        spanProps: spanProps\n      });\n    }\n  }]);\n\n  return StaticContent;\n}(external_react_["Component"]);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/tab-group.js\nfunction tab_group_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { tab_group_typeof = function _typeof(obj) { return typeof obj; }; } else { tab_group_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return tab_group_typeof(obj); }\n\nfunction tab_group_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction tab_group_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction tab_group_createClass(Constructor, protoProps, staticProps) { if (protoProps) tab_group_defineProperties(Constructor.prototype, protoProps); if (staticProps) tab_group_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction tab_group_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) tab_group_setPrototypeOf(subClass, superClass); }\n\nfunction tab_group_setPrototypeOf(o, p) { tab_group_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return tab_group_setPrototypeOf(o, p); }\n\nfunction tab_group_createSuper(Derived) { var hasNativeReflectConstruct = tab_group_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = tab_group_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = tab_group_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return tab_group_possibleConstructorReturn(this, result); }; }\n\nfunction tab_group_possibleConstructorReturn(self, call) { if (call && (tab_group_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return tab_group_assertThisInitialized(self); }\n\nfunction tab_group_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction tab_group_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction tab_group_getPrototypeOf(o) { tab_group_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return tab_group_getPrototypeOf(o); }\n\nfunction tab_group_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nvar tab_group_TabGroup = /*#__PURE__*/function (_Component) {\n  tab_group_inherits(TabGroup, _Component);\n\n  var _super = tab_group_createSuper(TabGroup);\n\n  function TabGroup(props) {\n    var _this;\n\n    tab_group_classCallCheck(this, TabGroup);\n\n    _this = _super.call(this, props);\n\n    tab_group_defineProperty(tab_group_assertThisInitialized(_this), "tabChange", function (index) {\n      var activeIndex = _this.state.activeIndex;\n\n      var panes = _this.getPanes(_this.props[\'data-panes\']);\n\n      var newIndex = index !== null && index !== void 0 ? index : activeIndex + 1 < panes.length ? activeIndex + 1 : 0;\n\n      _this.onTabChange({}, {\n        activeIndex: newIndex\n      });\n    });\n\n    tab_group_defineProperty(tab_group_assertThisInitialized(_this), "onTabChange", function (e, _ref) {\n      var activeIndex = _ref.activeIndex;\n\n      _this.setState({\n        activeIndex: activeIndex\n      });\n\n      if (_this.props.buildermode) _this.forceUpdate();\n\n      if (window && window.document) {\n        setTimeout(function () {\n          var resizeEvent = window.document.createEvent(\'UIEvents\');\n          resizeEvent.initUIEvent(\'resize\', true, false, window, 0);\n          window.dispatchEvent(resizeEvent);\n        }, 50);\n      }\n\n      if (isDefined(_this.props.handleEvent)) {\n        _this.props.handleEvent({\n          e: e,\n          key: _this.props.name,\n          eventName: \'onTabChange\',\n          parameters: {\n            targetIndex: activeIndex,\n            pane: _this.props[\'data-panes\'][activeIndex]\n          }\n        });\n      }\n    });\n\n    _this.state = {\n      activeIndex: 0\n    };\n\n    if (isDefined(props.value)) {\n      _this.state.activeitem = props.value;\n    } else if (props.activeitem != null) {\n      _this.state.activeitem = props.activeitem;\n    }\n\n    return _this;\n  }\n\n  tab_group_createClass(TabGroup, [{\n    key: "render",\n    value: function render() {\n      var panes = this.getPanes(this.props[\'data-panes\']);\n      return draw(\'tab-group\', {\n        onTabChange: this.onTabChange,\n        panes: panes,\n        activeIndex: this.state.activeIndex,\n        props: this.props\n      });\n    }\n  }, {\n    key: "getPanes",\n    value: function getPanes(panes) {\n      var res = [];\n\n      if (Array.isArray(panes)) {\n        for (var i = 0; i < panes.length; i++) {\n          var pane = panes[i];\n\n          if (pane.visibleCondition !== undefined && pane.visibleCondition !== null && pane.visibleCondition !== \'\') {\n            var args = \'data\';\n            var body = \'return \' + pane.visibleCondition;\n\n            try {\n              if (!new Function(args, body)(this.props.data)) {\n                continue;\n              }\n            } catch (e) {}\n          }\n\n          res.push({\n            menuItem: pane.title,\n            pane: {\n              key: pane.psid,\n              className: \'top\',\n              content: this.renderPanel(pane)\n            }\n          });\n        }\n      }\n\n      return res;\n    }\n  }, {\n    key: "renderPanel",\n    value: function renderPanel(pane) {\n      var element = undefined;\n\n      if (isDefined(this.props.placeholders) && Array.isArray(this.props.placeholders[pane.psid]) && this.props.placeholders[pane.psid].length > 0) {\n        var model = this.props.placeholders[pane.psid];\n\n        if (model) {\n          element = this.props.createControls(this, {\n            model: model,\n            parentPlaceholder: pane.psid,\n            data: this.props.data,\n            formData: this.props.data,\n            errors: this.props.errors,\n            buildermode: this.props.buildermode,\n            parentItem: this.props.model,\n            children: this.props.children,\n            handleEvent: this.props.handleEvent,\n            readOnlyControls: this.props.readOnlyControls,\n            hideControls: this.props.hideControls,\n            getFormFunc: this.props.getFormFunc,\n            getAdditionalDataForControl: this.props.getAdditionalDataForControl,\n            readOnly: this.props.readOnly,\n            disableRefs: this.props.disableRefs,\n            uploadUrl: this.props.uploadUrl,\n            downloadUrl: this.props.downloadUrl,\n            extendedData: this.props.extendedData,\n            controlsToReplace: this.props.controlsToReplace,\n            needCheckReplace: this.props.needCheckReplace,\n            eventOnEdit: this.props.eventOnEdit,\n            eventOnDelete: this.props.eventOnDelete,\n            eventOnCopy: this.props.eventOnCopy,\n            externalControlRender: this.props.externalControlRender,\n            externalControlList: this.props.externalControlList,\n            adaptiveViewType: this.props.adaptiveViewType\n          });\n          var dzkey = pane.psid;\n\n          if (this.props.buildermode && this.props.createBuilderDropzone) {\n            if (element.length > 0 && model.length > 0) {\n              element.unshift(this.props.createBuilderDropzone(dzkey + \'tab_dropzone_header\', this.props.name, undefined, pane.title, pane.psid));\n            }\n\n            element.push(this.props.createBuilderDropzone(dzkey + \'tab_dropzone_footer\', this.props.name, model[model.length - 1].key, pane.title, pane.psid));\n          }\n        }\n      } else if (this.props.buildermode && this.props.createBuilderDropzone) {\n        element = this.props.createBuilderDropzone(\'tab_dropzone_footer\', this.props.name, undefined, pane.title, pane.psid);\n      }\n\n      return element;\n    }\n  }], [{\n    key: "getDerivedStateFromProps",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (prevState.activeitem !== nextProps.value) {\n        return {\n          activeitem: nextProps.value\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return TabGroup;\n}(external_react_["Component"]);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/accordion.js\nfunction accordion_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { accordion_typeof = function _typeof(obj) { return typeof obj; }; } else { accordion_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return accordion_typeof(obj); }\n\nfunction accordion_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction accordion_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction accordion_createClass(Constructor, protoProps, staticProps) { if (protoProps) accordion_defineProperties(Constructor.prototype, protoProps); if (staticProps) accordion_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction accordion_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) accordion_setPrototypeOf(subClass, superClass); }\n\nfunction accordion_setPrototypeOf(o, p) { accordion_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return accordion_setPrototypeOf(o, p); }\n\nfunction accordion_createSuper(Derived) { var hasNativeReflectConstruct = accordion_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = accordion_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = accordion_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return accordion_possibleConstructorReturn(this, result); }; }\n\nfunction accordion_possibleConstructorReturn(self, call) { if (call && (accordion_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return accordion_assertThisInitialized(self); }\n\nfunction accordion_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction accordion_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction accordion_getPrototypeOf(o) { accordion_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return accordion_getPrototypeOf(o); }\n\n\n\n\n\nvar accordion_Accordion = /*#__PURE__*/function (_Component) {\n  accordion_inherits(Accordion, _Component);\n\n  var _super = accordion_createSuper(Accordion);\n\n  function Accordion(props) {\n    var _this;\n\n    accordion_classCallCheck(this, Accordion);\n\n    _this = _super.call(this, props);\n    _this.state = {};\n    return _this;\n  }\n\n  accordion_createClass(Accordion, [{\n    key: "render",\n    value: function render() {\n      var panels = this.getPanels(this.props[\'panels\']);\n      return draw(\'accordion\', {\n        panels: panels,\n        props: this.props\n      });\n    }\n  }, {\n    key: "getPanels",\n    value: function getPanels(panes) {\n      var res = [];\n\n      if (Array.isArray(panes)) {\n        for (var i = 0; i < panes.length; i++) {\n          var panel = panes[i];\n\n          if (panel.visibleCondition !== undefined && panel.visibleCondition !== null && panel.visibleCondition !== \'\') {\n            var args = \'data\';\n            var body = \'return \' + panel.visibleCondition;\n\n            try {\n              if (!new Function(args, body)(this.props.data)) {\n                continue;\n              }\n            } catch (e) {}\n          }\n\n          res.push({\n            key: panel.psid,\n            title: panel.title,\n            content: {\n              content: this.renderPanel(panel)\n            }\n          });\n        }\n      }\n\n      return res;\n    }\n  }, {\n    key: "renderPanel",\n    value: function renderPanel(panel) {\n      var element = undefined;\n\n      if (isDefined(this.props.placeholders) && Array.isArray(this.props.placeholders[panel.psid]) && this.props.placeholders[panel.psid].length > 0) {\n        var model = this.props.placeholders[panel.psid];\n\n        if (model) {\n          element = this.props.createControls(this, {\n            model: model,\n            parentPlaceholder: panel.psid,\n            data: this.props.data,\n            formData: this.props.data,\n            errors: this.props.errors,\n            buildermode: this.props.buildermode,\n            parentItem: this.props.model,\n            children: this.props.children,\n            handleEvent: this.props.handleEvent,\n            readOnlyControls: this.props.readOnlyControls,\n            hideControls: this.props.hideControls,\n            getFormFunc: this.props.getFormFunc,\n            getAdditionalDataForControl: this.props.getAdditionalDataForControl,\n            readOnly: this.props.readOnly,\n            disableRefs: this.props.disableRefs,\n            uploadUrl: this.props.uploadUrl,\n            downloadUrl: this.props.downloadUrl,\n            extendedData: this.props.extendedData,\n            controlsToReplace: this.props.controlsToReplace,\n            needCheckReplace: this.props.needCheckReplace,\n            eventOnEdit: this.props.eventOnEdit,\n            eventOnDelete: this.props.eventOnDelete,\n            eventOnCopy: this.props.eventOnCopy,\n            externalControlRender: this.props.externalControlRender,\n            externalControlList: this.props.externalControlList,\n            adaptiveViewType: this.props.adaptiveViewType\n          });\n          var dzkey = panel.psid;\n\n          if (this.props.buildermode && this.props.createBuilderDropzone) {\n            if (element.length > 0 && model.length > 0) {\n              element.unshift(this.props.createBuilderDropzone(dzkey + \'tab_dropzone_header\', this.props.name, undefined, panel.title, panel.psid));\n            }\n\n            element.push(this.props.createBuilderDropzone(dzkey + \'tab_dropzone_footer\', this.props.name, model[model.length - 1].key, panel.title, panel.psid));\n          }\n        }\n      } else if (this.props.buildermode && this.props.createBuilderDropzone) {\n        element = this.props.createBuilderDropzone(\'tab_dropzone_footer\', this.props.name, undefined, panel.title, panel.psid);\n      }\n\n      return element;\n    }\n  }]);\n\n  return Accordion;\n}(external_react_["Component"]);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/card.js\nfunction card_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { card_typeof = function _typeof(obj) { return typeof obj; }; } else { card_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return card_typeof(obj); }\n\nfunction card_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction card_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction card_createClass(Constructor, protoProps, staticProps) { if (protoProps) card_defineProperties(Constructor.prototype, protoProps); if (staticProps) card_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction card_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) card_setPrototypeOf(subClass, superClass); }\n\nfunction card_setPrototypeOf(o, p) { card_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return card_setPrototypeOf(o, p); }\n\nfunction card_createSuper(Derived) { var hasNativeReflectConstruct = card_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = card_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = card_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return card_possibleConstructorReturn(this, result); }; }\n\nfunction card_possibleConstructorReturn(self, call) { if (call && (card_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return card_assertThisInitialized(self); }\n\nfunction card_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction card_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction card_getPrototypeOf(o) { card_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return card_getPrototypeOf(o); }\n\nfunction card_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nvar card_Card = /*#__PURE__*/function (_Component) {\n  card_inherits(Card, _Component);\n\n  var _super = card_createSuper(Card);\n\n  function Card(props) {\n    var _this;\n\n    card_classCallCheck(this, Card);\n\n    _this = _super.call(this, props);\n\n    card_defineProperty(card_assertThisInitialized(_this), "onClick", function (e) {\n      if (_this.props.handleEvent != undefined) {\n        _this.props.handleEvent({\n          syntheticEvent: e,\n          key: _this.props.name,\n          propertyName: _this.props.propertyName,\n          eventName: "onClick"\n        });\n      }\n    });\n\n    _this.state = {};\n    return _this;\n  }\n\n  card_createClass(Card, [{\n    key: "render",\n    value: function render() {\n      var propsControls = {\n        className: this.props.className,\n        style: this.props.style\n      };\n\n      if (this.props.activeEvent) {\n        propsControls.onClick = this.onClick.bind(this);\n      }\n\n      return draw(\'card\', {\n        props: this.props,\n        propsControls: propsControls,\n        me: this\n      });\n    }\n  }, {\n    key: "renderPanel",\n    value: function renderPanel(id) {\n      var element = undefined;\n\n      if (this.props.placeholders != undefined && Array.isArray(this.props.placeholders[id]) && this.props.placeholders[id].length > 0) {\n        var model = this.props.placeholders[id];\n\n        if (model) {\n          element = this.props.createControls(this, {\n            model: model,\n            parentPlaceholder: id,\n            data: this.props.data,\n            formData: this.props.data,\n            errors: this.props.errors,\n            buildermode: this.props.buildermode,\n            parentItem: this.props.model,\n            children: this.props.children,\n            handleEvent: this.props.handleEvent,\n            hideControls: this.props.hideControls,\n            readOnlyControls: this.props.readOnlyControls,\n            getFormFunc: this.props.getFormFunc,\n            getAdditionalDataForControl: this.props.getAdditionalDataForControl,\n            readOnly: this.props.readOnly,\n            disableRefs: this.props.disableRefs,\n            uploadUrl: this.props.uploadUrl,\n            downloadUrl: this.props.downloadUrl,\n            extendedData: this.props.extendedData,\n            controlsToReplace: this.props.controlsToReplace,\n            needCheckReplace: this.props.needCheckReplace,\n            eventOnEdit: this.props.eventOnEdit,\n            eventOnDelete: this.props.eventOnDelete,\n            eventOnCopy: this.props.eventOnCopy,\n            externalControlRender: this.props.externalControlRender,\n            externalControlList: this.props.externalControlList,\n            adaptiveViewType: this.props.adaptiveViewType\n          });\n          var dzkey = id;\n\n          if (this.props.buildermode && this.props.createBuilderDropzone) {\n            if (element.length > 0 && model.length > 0) {\n              element.unshift(this.props.createBuilderDropzone(dzkey + "tab_dropzone_header", this.props.name, undefined, id, id));\n            }\n\n            element.push(this.props.createBuilderDropzone(dzkey + "tab_dropzone_footer", this.props.name, model[model.length - 1].key, id, id));\n          }\n        }\n      } else if (this.props.buildermode && this.props.createBuilderDropzone) {\n        element = this.props.createBuilderDropzone("tab_dropzone_footer", this.props.name, undefined, id, id);\n      }\n\n      return element;\n    }\n  }], [{\n    key: "copyObj",\n    value: function copyObj(obj) {\n      if (null == obj || "object" != card_typeof(obj)) return obj;\n      var copy = obj.constructor();\n\n      for (var attr in obj) {\n        if (obj.hasOwnProperty(attr)) copy[attr] = this.copyObj(obj[attr]);\n      }\n\n      return copy;\n    }\n  }]);\n\n  return Card;\n}(external_react_["Component"]);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/tree-picker-header.js\nfunction tree_picker_header_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { tree_picker_header_typeof = function _typeof(obj) { return typeof obj; }; } else { tree_picker_header_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return tree_picker_header_typeof(obj); }\n\nfunction tree_picker_header_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction tree_picker_header_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction tree_picker_header_createClass(Constructor, protoProps, staticProps) { if (protoProps) tree_picker_header_defineProperties(Constructor.prototype, protoProps); if (staticProps) tree_picker_header_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction tree_picker_header_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) tree_picker_header_setPrototypeOf(subClass, superClass); }\n\nfunction tree_picker_header_setPrototypeOf(o, p) { tree_picker_header_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return tree_picker_header_setPrototypeOf(o, p); }\n\nfunction tree_picker_header_createSuper(Derived) { var hasNativeReflectConstruct = tree_picker_header_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = tree_picker_header_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = tree_picker_header_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return tree_picker_header_possibleConstructorReturn(this, result); }; }\n\nfunction tree_picker_header_possibleConstructorReturn(self, call) { if (call && (tree_picker_header_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return tree_picker_header_assertThisInitialized(self); }\n\nfunction tree_picker_header_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction tree_picker_header_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction tree_picker_header_getPrototypeOf(o) { tree_picker_header_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return tree_picker_header_getPrototypeOf(o); }\n\n\n\n\nvar tree_picker_header_TreePickerHeader = /*#__PURE__*/function (_Component) {\n  tree_picker_header_inherits(TreePickerHeader, _Component);\n\n  var _super = tree_picker_header_createSuper(TreePickerHeader);\n\n  function TreePickerHeader() {\n    tree_picker_header_classCallCheck(this, TreePickerHeader);\n\n    return _super.apply(this, arguments);\n  }\n\n  tree_picker_header_createClass(TreePickerHeader, [{\n    key: "componentDidMount",\n    value: function componentDidMount() {\n      this.props.onMount(this);\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      return draw(\'tree-picker-header\', {\n        props: this.props\n      });\n    }\n  }]);\n\n  return TreePickerHeader;\n}(external_react_["Component"]);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/upload.js\nfunction upload_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { upload_typeof = function _typeof(obj) { return typeof obj; }; } else { upload_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return upload_typeof(obj); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = upload_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }\n\nfunction upload_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return upload_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return upload_arrayLikeToArray(o, minLen); }\n\nfunction upload_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction upload_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction upload_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction upload_createClass(Constructor, protoProps, staticProps) { if (protoProps) upload_defineProperties(Constructor.prototype, protoProps); if (staticProps) upload_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction upload_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) upload_setPrototypeOf(subClass, superClass); }\n\nfunction upload_setPrototypeOf(o, p) { upload_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return upload_setPrototypeOf(o, p); }\n\nfunction upload_createSuper(Derived) { var hasNativeReflectConstruct = upload_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = upload_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = upload_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return upload_possibleConstructorReturn(this, result); }; }\n\nfunction upload_possibleConstructorReturn(self, call) { if (call && (upload_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return upload_assertThisInitialized(self); }\n\nfunction upload_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction upload_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction upload_getPrototypeOf(o) { upload_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return upload_getPrototypeOf(o); }\n\nfunction upload_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nvar upload_Upload = /*#__PURE__*/function (_Component) {\n  upload_inherits(Upload, _Component);\n\n  var _super = upload_createSuper(Upload);\n\n  function Upload() {\n    var _this;\n\n    upload_classCallCheck(this, Upload);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    upload_defineProperty(upload_assertThisInitialized(_this), "additionalDataContext", function () {\n      var _this$props, _this$props$me, _this$props$me$props;\n\n      return (_this$props = _this.props) === null || _this$props === void 0 ? void 0 : (_this$props$me = _this$props.me) === null || _this$props$me === void 0 ? void 0 : (_this$props$me$props = _this$props$me.props) === null || _this$props$me$props === void 0 ? void 0 : _this$props$me$props.row;\n    });\n\n    upload_defineProperty(upload_assertThisInitialized(_this), "getCustomFileName", function () {\n      if (!_this.props.additionalData || !_this.additionalDataContext()) {\n        return null;\n      }\n\n      if (_this.props.additionalData.customNameGetter) {\n        return _this.props.additionalData.customNameGetter(_this.additionalDataContext());\n      }\n\n      return null;\n    });\n\n    upload_defineProperty(upload_assertThisInitialized(_this), "getCustomContentType", function () {\n      if (!_this.props.additionalData || !_this.additionalDataContext()) {\n        return null;\n      }\n\n      if (_this.props.additionalData.customContentTypeGetter) {\n        return _this.props.additionalData.customContentTypeGetter(_this.additionalDataContext());\n      }\n\n      return null;\n    });\n\n    upload_defineProperty(upload_assertThisInitialized(_this), "onChange", function (e) {\n      var me = upload_assertThisInitialized(_this);\n\n      var _iterator = _createForOfIteratorHelper(e.target.files),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var file = _step.value;\n          var formData = new FormData();\n          formData.append(me.props.name, file); // todo fetchFn\n          // todo test fetch and remove jquery\n\n          external_jquery_default.a.ajax({\n            url: me.props.uploadUrl,\n            type: \'POST\',\n            processData: false,\n            contentType: false,\n            dataType: \'json\',\n            data: formData,\n            success: function success(jsonData) {\n              if (jsonData.success) {\n                if (me.props.onChange) {\n                  me.props.onChange(e, {\n                    name: me.props.name,\n                    propertyName: me.props.propertyName,\n                    value: jsonData.result.properties[\'Token\'],\n                    parameters: {\n                      success: true,\n                      properties: jsonData.result.properties\n                    }\n                  });\n                }\n              } else {\n                if (me.props.onUploadFail) {\n                  me.props.onUploadFail(e, {\n                    name: me.props.name,\n                    propertyName: me.props.propertyName,\n                    message: jsonData.message,\n                    details: jsonData.details,\n                    success: false\n                  });\n                }\n              }\n            }\n          });\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      ;\n    });\n\n    upload_defineProperty(upload_assertThisInitialized(_this), "onClear", function () {\n      if (_this.props.onChange) {\n        _this.props.onChange(undefined, {\n          name: _this.props.name,\n          propertyName: _this.props.propertyName,\n          value: null\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  upload_createClass(Upload, [{\n    key: "render",\n    value: function render() {\n      return draw(\'upload\', {\n        getCustomContentType: this.getCustomContentType,\n        getCustomFileName: this.getCustomFileName,\n        me: this,\n        onChange: this.onChange,\n        onClear: this.onClear,\n        props: this.props\n      });\n    }\n  }]);\n\n  return Upload;\n}(external_react_["Component"]);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control/workflow-bar.js\nfunction workflow_bar_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { workflow_bar_typeof = function _typeof(obj) { return typeof obj; }; } else { workflow_bar_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return workflow_bar_typeof(obj); }\n\nfunction workflow_bar_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction workflow_bar_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction workflow_bar_createClass(Constructor, protoProps, staticProps) { if (protoProps) workflow_bar_defineProperties(Constructor.prototype, protoProps); if (staticProps) workflow_bar_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction workflow_bar_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) workflow_bar_setPrototypeOf(subClass, superClass); }\n\nfunction workflow_bar_setPrototypeOf(o, p) { workflow_bar_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return workflow_bar_setPrototypeOf(o, p); }\n\nfunction workflow_bar_createSuper(Derived) { var hasNativeReflectConstruct = workflow_bar_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = workflow_bar_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = workflow_bar_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return workflow_bar_possibleConstructorReturn(this, result); }; }\n\nfunction workflow_bar_possibleConstructorReturn(self, call) { if (call && (workflow_bar_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return workflow_bar_assertThisInitialized(self); }\n\nfunction workflow_bar_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction workflow_bar_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction workflow_bar_getPrototypeOf(o) { workflow_bar_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return workflow_bar_getPrototypeOf(o); }\n\nfunction workflow_bar_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable eqeqeq */\n\n\n\n\nvar workflow_bar_WorkflowBar = /*#__PURE__*/function (_Component) {\n  workflow_bar_inherits(WorkflowBar, _Component);\n\n  var _super = workflow_bar_createSuper(WorkflowBar);\n\n  function WorkflowBar(props) {\n    var _this;\n\n    workflow_bar_classCallCheck(this, WorkflowBar);\n\n    _this = _super.call(this, props);\n\n    workflow_bar_defineProperty(workflow_bar_assertThisInitialized(_this), "selectWorkflowScheme", function (_e, _ref) {\n      var value = _ref.value;\n\n      _this.props.handleEvent({\n        key: _this.props.name,\n        eventName: \'onSchemeSelected\',\n        parameters: {\n          scheme: value\n        }\n      });\n    });\n\n    workflow_bar_defineProperty(workflow_bar_assertThisInitialized(_this), "handleChanged", function (_e, _ref2) {\n      var name = _ref2.name,\n          value = _ref2.value;\n\n      _this.setState(workflow_bar_defineProperty({}, name, value));\n    });\n\n    _this.state = {\n      commands: props.commands,\n      states: props.states,\n      processExists: props.processExists\n    };\n\n    _this.checkGetAdditionalDataForControl();\n\n    return _this;\n  }\n\n  workflow_bar_createClass(WorkflowBar, [{\n    key: "componentDidMount",\n    value: function componentDidMount() {\n      this.isMount = true;\n    }\n  }, {\n    key: "componentWillUnmount",\n    value: function componentWillUnmount() {\n      this.isMount = false;\n    }\n  }, {\n    key: "checkGetAdditionalDataForControl",\n    value: function checkGetAdditionalDataForControl() {\n      var _this2 = this;\n\n      if (!this.props.getAdditionalDataForControl && !this.props.commands && !this.props.states) {\n        if (console) {\n          console.log(\'WorkflowBar: This control requires getAdditionalDataForControl or commands and states not undefined parameters!\');\n        }\n      } else {\n        this.props.getAdditionalDataForControl(this, {\n          loadParameters: !this.props.blockLoadParameters\n        }, function (_ref3) {\n          var commands = _ref3.commands,\n              states = _ref3.states,\n              processExists = _ref3.processExists,\n              processParameters = _ref3.processParameters;\n\n          _this2.setState({\n            commands: commands,\n            states: states,\n            processExists: processExists\n          });\n\n          if (_this2.props.handleEvent) {\n            _this2.props.handleEvent({\n              key: _this2.props.name,\n              eventName: \'onReceivedCommands\',\n              parameters: {\n                commands: commands,\n                states: states,\n                processParameters: processParameters\n              }\n            });\n          }\n\n          if (_this2.isMount) {\n            _this2.forceUpdate();\n          }\n        });\n      }\n    }\n  }, {\n    key: "onCommand",\n    value: function onCommand(button, e) {\n      if (isDefined(this.props.handleEvent)) {\n        if (e.currentTarget && e.currentTarget.classList) {\n          e.currentTarget.classList.add("loading");\n        }\n\n        this.props.handleEvent({\n          key: this.props.name,\n          eventName: "onCommandClick",\n          parameters: {\n            command: button\n          }\n        });\n\n        if (e.currentTarget && e.currentTarget.classList) {\n          e.currentTarget.classList.remove("loading");\n        }\n      }\n    }\n  }, {\n    key: "onSetState",\n    value: function onSetState(e) {\n      if (isDefined(this.props.handleEvent)) {\n        if (e.currentTarget && e.currentTarget.classList) e.currentTarget.classList.add("loading");\n        var states = isDefined(this.state.states) ? this.state.states : this.props.states;\n        var currentState = undefined;\n\n        for (var i = 0; i < states.length; i++) {\n          if (states[i].value == this.state.setstate) {\n            currentState = states[i];\n            break;\n          }\n        }\n\n        this.props.handleEvent({\n          key: this.props.name,\n          eventName: \'onSetStateClick\',\n          parameters: {\n            state: currentState\n          }\n        });\n        if (e.currentTarget && e.currentTarget.classList) e.currentTarget.classList.remove("loading");\n      }\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      return draw(\'workflow-bar\', {\n        handleChanged: this.handleChanged.bind(this),\n        me: this,\n        props: this.props,\n        selectWorkflowScheme: this.selectWorkflowScheme.bind(this),\n        state: this.state,\n        onCommand: this.onCommand.bind(this),\n        onSetState: this.onSetState.bind(this)\n      });\n    }\n  }]);\n\n  return WorkflowBar;\n}(external_react_["Component"]);\n\n\n// EXTERNAL MODULE: external "reflux"\nvar external_reflux_ = __webpack_require__(12);\nvar external_reflux_default = /*#__PURE__*/__webpack_require__.n(external_reflux_);\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/actions-factory.js\n\nfunction createActions() {\n  return external_reflux_default.a.createActions([\'add\', \'showEditForm\', \'remove\', \'saveData\', \'save\', \'move\', \'insert\']);\n}\n// EXTERNAL MODULE: external "numeral"\nvar external_numeral_ = __webpack_require__(17);\nvar external_numeral_default = /*#__PURE__*/__webpack_require__.n(external_numeral_);\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/control-bar.js\nfunction control_bar_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { control_bar_typeof = function _typeof(obj) { return typeof obj; }; } else { control_bar_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return control_bar_typeof(obj); }\n\nfunction control_bar_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction control_bar_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction control_bar_createClass(Constructor, protoProps, staticProps) { if (protoProps) control_bar_defineProperties(Constructor.prototype, protoProps); if (staticProps) control_bar_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction control_bar_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) control_bar_setPrototypeOf(subClass, superClass); }\n\nfunction control_bar_setPrototypeOf(o, p) { control_bar_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return control_bar_setPrototypeOf(o, p); }\n\nfunction control_bar_createSuper(Derived) { var hasNativeReflectConstruct = control_bar_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = control_bar_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = control_bar_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return control_bar_possibleConstructorReturn(this, result); }; }\n\nfunction control_bar_possibleConstructorReturn(self, call) { if (call && (control_bar_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return control_bar_assertThisInitialized(self); }\n\nfunction control_bar_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction control_bar_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction control_bar_getPrototypeOf(o) { control_bar_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return control_bar_getPrototypeOf(o); }\n\n\n\n\n\nvar control_bar_ControlBar = /*#__PURE__*/function (_Component) {\n  control_bar_inherits(ControlBar, _Component);\n\n  var _super = control_bar_createSuper(ControlBar);\n\n  function ControlBar(props) {\n    var _this;\n\n    control_bar_classCallCheck(this, ControlBar);\n\n    _this = _super.call(this, props);\n    _this.state = {};\n    _this.controlRef = /*#__PURE__*/external_react_default.a.createRef();\n    _this.barRef = /*#__PURE__*/external_react_default.a.createRef();\n    return _this;\n  }\n\n  control_bar_createClass(ControlBar, [{\n    key: "render",\n    value: function render() {\n      return draw(\'control-bar\', {\n        props: this.props,\n        onCopyControl: this.onCopyControl.bind(this, this.props.model),\n        me: this\n      });\n    }\n  }, {\n    key: "onCopyControl",\n    value: function onCopyControl(model, e) {\n      var str = external_json5_default.a.stringify(model);\n      var el = document.createElement(\'textarea\');\n      el.value = str;\n      el.setAttribute(\'readonly\', \'\');\n      el.style.position = \'absolute\';\n      el.style.left = \'-9999px\';\n      document.body.appendChild(el);\n      var selected = document.getSelection().rangeCount > 0 ? document.getSelection().getRangeAt(0) : false;\n      el.select();\n      document.execCommand(\'copy\');\n      document.body.removeChild(el);\n\n      if (selected) {\n        document.getSelection().removeAllRanges();\n        document.getSelection().addRange(selected);\n      }\n    }\n  }, {\n    key: "componentDidMount",\n    value: function componentDidMount() {\n      if (this.updateBarPosition) {\n        window.addEventListener(\'resize\', this.updateBarPosition);\n        this.updateBarPosition();\n      }\n    }\n  }, {\n    key: "componentDidUpdate",\n    value: function componentDidUpdate() {\n      this.updateBarPosition && this.updateBarPosition();\n    }\n  }, {\n    key: "componentWillUnmount",\n    value: function componentWillUnmount() {\n      this.updateBarPosition && window.removeEventListener(\'resize\', this.updateBarPosition);\n    }\n  }]);\n\n  return ControlBar;\n}(external_react_["Component"]);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/base-controls.js\nfunction base_controls_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction base_controls_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { base_controls_ownKeys(Object(source), true).forEach(function (key) { base_controls_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { base_controls_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction base_controls_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = base_controls_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }\n\nfunction base_controls_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return base_controls_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return base_controls_arrayLikeToArray(o, minLen); }\n\nfunction base_controls_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction base_controls_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction base_controls_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction base_controls_createClass(Constructor, protoProps, staticProps) { if (protoProps) base_controls_defineProperties(Constructor.prototype, protoProps); if (staticProps) base_controls_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction base_controls_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-mixed-operators */\n\n\n\n\n\n\n\n\n\nvar base_controls_BaseControls = /*#__PURE__*/function () {\n  function BaseControls(builderActions, items) {\n    base_controls_classCallCheck(this, BaseControls);\n\n    this.builderActions = builderActions;\n    this.items = items || [];\n  }\n\n  base_controls_createClass(BaseControls, [{\n    key: "createBuilderDropzone",\n    value: function createBuilderDropzone(key, elementToInsert, elementAfter, text, placeholderKey) {\n      var dzValue = \'\';\n\n      var onChangeDZ = function onChangeDZ(e, _ref) {\n        var name = _ref.name,\n            value = _ref.value;\n        dzValue = value;\n      };\n\n      var onClosePopup = function onClosePopup() {\n        try {\n          var json = external_json5_default.a.parse(dzValue);\n          this.builderActions.insert(json, key, elementToInsert, elementAfter, placeholderKey);\n        } catch (e) {}\n      };\n\n      return draw(\'builder-dropzone\', {\n        key: key,\n        elementToInsert: elementToInsert,\n        elementAfter: elementAfter,\n        onChangeDZ: onChangeDZ,\n        onClosePopup: onClosePopup,\n        placeholderKey: placeholderKey,\n        text: \'DROP ZONE\'\n      });\n    }\n  }, {\n    key: "isContainer",\n    value: function isContainer(key) {\n      return isDefined(BaseControls.containers[key]);\n    }\n  }, {\n    key: "getItems",\n    value: function getItems() {\n      return this.items;\n    }\n  }, {\n    key: "setItems",\n    value: function setItems(items) {\n      this.items = items || [];\n    }\n  }, {\n    key: "getControlInfoByType",\n    value: function getControlInfoByType(builderType, externalControlList) {\n      var _iterator = base_controls_createForOfIteratorHelper(this.items),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _item = _step.value;\n\n          if (_item.key === builderType) {\n            return _item;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var externalControls = externalControlList || dwKitExternalControlList();\n\n      if (externalControls) {\n        var _iterator2 = base_controls_createForOfIteratorHelper(externalControls),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var item = _step2.value;\n\n            if (item.key === builderType) {\n              return item;\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    }\n  }, {\n    key: "getControlByType",\n    value: function getControlByType(builderType, externalControlList) {\n      var controlInfo = this.getControlInfoByType(builderType, externalControlList);\n\n      if (controlInfo) {\n        return controlInfo.control;\n      }\n\n      return null;\n    }\n  }, {\n    key: "getEditControlByType",\n    value: function getEditControlByType(builderType, externalControlList) {\n      var controlInfo = this.getControlInfoByType(builderType, externalControlList);\n\n      if (controlInfo) {\n        return controlInfo.editControl;\n      }\n\n      return null;\n    }\n  }, {\n    key: "createControls",\n    value: function createControls(parentComponent, _ref2) {\n      var model = _ref2.model,\n          data = _ref2.data,\n          errors = _ref2.errors,\n          eventOnEdit = _ref2.eventOnEdit,\n          eventOnDelete = _ref2.eventOnDelete,\n          eventOnCopy = _ref2.eventOnCopy,\n          handleEvent = _ref2.handleEvent,\n          parentItem = _ref2.parentItem,\n          getFormFunc = _ref2.getFormFunc,\n          getAdditionalDataForControl = _ref2.getAdditionalDataForControl,\n          buildermode = _ref2.buildermode,\n          hideControls = _ref2.hideControls,\n          readOnlyControls = _ref2.readOnlyControls,\n          readOnly = _ref2.readOnly,\n          disableRefs = _ref2.disableRefs,\n          uploadUrl = _ref2.uploadUrl,\n          downloadUrl = _ref2.downloadUrl,\n          extendedData = _ref2.extendedData,\n          controlsToReplace = _ref2.controlsToReplace,\n          needCheckReplace = _ref2.needCheckReplace,\n          parentPlaceholder = _ref2.parentPlaceholder,\n          formItem = _ref2.formItem,\n          externalControlRender = _ref2.externalControlRender,\n          externalControlList = _ref2.externalControlList,\n          adaptiveViewType = _ref2.adaptiveViewType,\n          formData = _ref2.formData;\n      var res = [];\n      if (parentItem == undefined) res.push( /*#__PURE__*/external_react_default.a.createElement("b", {\n        key: "demoblock",\n        style: {\n          color: "red",\n          display: "block",\n          visibility: "visible",\n          zIndex: "10000",\n          opacity: "1"\n        }\n      }, "This is a demo version of FormBuilder!", /*#__PURE__*/external_react_default.a.createElement("br", null), "Purchase the commercial license at ", /*#__PURE__*/external_react_default.a.createElement("a", {\n        target: "_blank",\n        href: "https://formbuilder.dev/pricing/"\n      }, "https://formbuilder.dev/pricing/")));\n\n      if (model === null || model === undefined) {\n        return res;\n      }\n\n      for (var i = 0; i < model.length; i++) {\n        if (Array.isArray(hideControls) && hideControls.includes(model[i].key) || !buildermode && !BaseControls.isAdaptiveRender(model[i], adaptiveViewType)) {\n          continue;\n        }\n\n        var item = void 0;\n        var dbtype = model[i][\'data-buildertype\'];\n\n        if (dbtype === \'customcontrol\') {\n          if (model[i].type === undefined || model[i].type === \'\') {\n            item = draw(\'empty\', {\n              key: model[i].key,\n              text: \'Fill Type property for rendering the control.\'\n            });\n          } else {\n            var controlPropsInit = model[i].props === undefined ? {} : external_json5_default.a.parse(model[i].props);\n\n            var controlProps = base_controls_objectSpread(base_controls_objectSpread({}, controlPropsInit), {}, {\n              key: model[i].key,\n              name: model[i].key,\n              className: BaseControls.getClassName(model[i], buildermode),\n              style: BaseControls.getStyle(model[i], buildermode, adaptiveViewType),\n              \'data-buildertype\': model[i][\'data-buildertype\'],\n              getAdditionalDataForControl: getAdditionalDataForControl,\n              uploadUrl: uploadUrl,\n              downloadUrl: downloadUrl\n            });\n\n            if (readOnly || Array.isArray(readOnlyControls) && readOnlyControls.includes(controlProps.key)) {\n              controlProps.readOnly = true;\n            }\n\n            var children = model[i].children;\n\n            if (model[i].children !== undefined) {\n              try {\n                children = external_json5_default.a.parse(model[i].children);\n              } catch (e) {}\n            }\n\n            if (children === undefined || Array.isArray(children) && children.length === 0) {\n              item = /*#__PURE__*/external_react_default.a.createElement(model[i].type, controlProps);\n            } else {\n              item = /*#__PURE__*/external_react_default.a.createElement(model[i].type, controlProps, children);\n            }\n          }\n        } else if (dbtype === \'customblock\') {\n          var children_source = [];\n          var renderempty = false;\n          var cbbuildermode = false;\n          var addDropZones = false;\n          var newParentItem = model[i];\n          var newParentPlaceholder = parentPlaceholder;\n          var newFormItem = formItem;\n\n          if (model[i].sourceType === \'form\' || model[i].sourceType === undefined) {\n            if (model[i].children !== undefined && model[i].children !== \'\') {\n              children_source = model[i].children;\n            } else {\n              if (getFormFunc === undefined) {\n                console.error(\'Error: "getFormFunc" parameter is undefined!. Please, set "getFormFunc" parameter for DWKitBuilder or DWKitForm!\');\n                continue;\n              }\n\n              if (model[i].formname !== undefined && model[i].formname !== \'\') {\n                var _getFormFunc;\n\n                children_source = JSON.parse(JSON.stringify((_getFormFunc = getFormFunc(model[i].formname)) !== null && _getFormFunc !== void 0 ? _getFormFunc : {}));\n              } else {\n                renderempty = true;\n              }\n            }\n          } else if (model[i].sourceType === \'placeholder\') {\n            cbbuildermode = eventOnEdit !== undefined;\n            addDropZones = eventOnEdit !== undefined;\n            newParentItem = parentItem;\n\n            if (newParentPlaceholder === undefined) {\n              newParentPlaceholder = model[i].key;\n            }\n\n            if (newFormItem === undefined) {\n              newFormItem = parentItem;\n            }\n\n            if (newFormItem !== undefined && newFormItem.placeholders !== undefined && newFormItem.placeholders[model[i].key] !== undefined) {\n              children_source = newFormItem.placeholders[model[i].key];\n            }\n          } else {\n            if (model[i].source !== undefined && model[i].source !== \'\') {\n              try {\n                children_source = external_json5_default.a.parse(model[i].source);\n              } catch (e) {\n                // todo log error on incorrect JSON? Ask Betin\n                renderempty = true;\n              }\n            } else {\n              renderempty = true;\n            }\n          }\n\n          if (renderempty) {\n            item = draw(\'empty\', {\n              key: model[i].key,\n              text: \'Set a form name or source in properties.\'\n            });\n          } else {\n            var _children = this.createControls(parentComponent, {\n              model: children_source,\n              data: data,\n              errors: errors,\n              buildermode: cbbuildermode,\n              eventOnEdit: eventOnEdit,\n              eventOnDelete: eventOnDelete,\n              eventOnCopy: eventOnCopy,\n              parentItem: newParentItem,\n              handleEvent: handleEvent,\n              getFormFunc: getFormFunc,\n              getAdditionalDataForControl: getAdditionalDataForControl,\n              hideControls: hideControls,\n              readOnlyControls: readOnlyControls,\n              readOnly: readOnly,\n              disableRefs: disableRefs,\n              uploadUrl: uploadUrl,\n              downloadUrl: downloadUrl,\n              controlsToReplace: controlsToReplace,\n              needCheckReplace: needCheckReplace,\n              parentPlaceholder: newParentPlaceholder,\n              formItem: newFormItem,\n              extendedData: extendedData,\n              externalControlRender: externalControlRender,\n              externalControlList: externalControlList,\n              adaptiveViewType: adaptiveViewType,\n              formData: formData\n            });\n\n            var formProps = {\n              key: model[i].key,\n              name: model[i].key,\n              className: BaseControls.getClassName(model[i], buildermode),\n              style: BaseControls.getStyle(model[i], buildermode, adaptiveViewType),\n              \'data-buildertype\': model[i][\'data-buildertype\']\n            };\n\n            if (addDropZones) {\n              if (_children === undefined) {\n                _children = [];\n              }\n\n              if (_children.length > 0) {\n                var dz_footer = this.createBuilderDropzone(model[i].key + \'_dropzone_footer\', newFormItem === undefined ? undefined : newFormItem.key, //parentItem === undefined ? undefined : parentItem.key,\n                _children[_children.length - 1].key, model[i].key, model[i].key);\n\n                _children.push(dz_footer);\n              }\n\n              var dz = this.createBuilderDropzone(model[i].key + \'_dropzone_header\', newFormItem === undefined ? undefined : newFormItem.key, //parentItem === undefined ? undefined : parentItem.key,\n              undefined, model[i].key, model[i].key);\n\n              _children.unshift(dz);\n            }\n\n            item = /*#__PURE__*/external_react_default.a.createElement(this.getPlatformContainerControl(), formProps, _children);\n\n            if (!model[i].children && children_source) {\n              model[i].children = children_source;\n            }\n          }\n        } else {\n          var control = this.getControlByType(dbtype, externalControlList);\n\n          if (control === null) {\n            item = draw(\'null-control\', {\n              key: model[i].key,\n              text: "".concat(dbtype, " is unsupported")\n            });\n          } else {\n            if (this.isContainer(dbtype)) {\n              var _newFormItem = formItem;\n\n              if (isUndefined(_newFormItem) && isDefined(parentItem) && parentItem.sourceType === \'form\') {\n                _newFormItem = parentItem;\n              }\n\n              var containerReadOnly = undefined;\n\n              if (model[i].readOnly !== undefined) {\n                containerReadOnly = model[i].readOnly;\n              }\n\n              if (readOnly || Array.isArray(readOnlyControls) && readOnlyControls.includes(model[i].key)) {\n                containerReadOnly = true;\n              }\n\n              var isHorizontalGroup = buildermode && (model[i]["data-buildertype"] === "formgroup" && model[i].orientation !== "grouped" || model[i]["data-buildertype"] === "container" && model[i]["style-display"] === "flex");\n\n              var _children2 = this.createControls(parentComponent, {\n                model: model[i].children,\n                data: data,\n                errors: errors,\n                buildermode: buildermode,\n                eventOnEdit: eventOnEdit,\n                eventOnDelete: eventOnDelete,\n                eventOnCopy: eventOnCopy,\n                parentItem: model[i],\n                handleEvent: handleEvent,\n                getFormFunc: getFormFunc,\n                getAdditionalDataForControl: getAdditionalDataForControl,\n                hideControls: hideControls,\n                readOnlyControls: readOnlyControls,\n                readOnly: containerReadOnly,\n                disableRefs: disableRefs,\n                uploadUrl: uploadUrl,\n                downloadUrl: downloadUrl,\n                controlsToReplace: controlsToReplace,\n                needCheckReplace: needCheckReplace,\n                parentPlaceholder: undefined,\n                formItem: _newFormItem,\n                extendedData: extendedData,\n                externalControlRender: externalControlRender,\n                externalControlList: externalControlList,\n                adaptiveViewType: adaptiveViewType,\n                formData: formData\n              });\n\n              if (buildermode) {\n                if (_children2.length > 0) {\n                  var _textDZ = isHorizontalGroup ? \'...\' : \'... \' + model[i].key + \' down ...\';\n\n                  var dropzone_footer = this.createBuilderDropzone(model[i].key + \'-dropzone_footer\', model[i].key, undefined, _textDZ);\n\n                  _children2.push(dropzone_footer);\n                }\n\n                var textDZ = isHorizontalGroup ? \'...\' : \'... \' + model[i].key + \' up ...\';\n                var dropzone_header = this.createBuilderDropzone(model[i].key + \'-dropzone_header\', model[i].key, undefined, textDZ);\n\n                _children2.unshift(dropzone_header);\n              }\n\n              item = this.createControl(parentComponent, control, {\n                model: model[i],\n                data: data,\n                errors: errors,\n                parentItem: parentItem,\n                buildermode: buildermode,\n                children: _children2,\n                handleEvent: handleEvent,\n                getFormFunc: getFormFunc,\n                getAdditionalDataForControl: getAdditionalDataForControl,\n                hideControls: hideControls,\n                readOnlyControls: readOnlyControls,\n                readOnly: readOnly,\n                disableRefs: disableRefs,\n                uploadUrl: uploadUrl,\n                downloadUrl: downloadUrl,\n                extendedData: extendedData,\n                parentPlaceholder: parentPlaceholder,\n                controlsToReplace: controlsToReplace,\n                needCheckReplace: needCheckReplace,\n                eventOnEdit: eventOnEdit,\n                eventOnDelete: eventOnDelete,\n                eventOnCopy: eventOnCopy,\n                externalControlRender: externalControlRender,\n                externalControlList: externalControlList,\n                adaptiveViewType: adaptiveViewType,\n                formData: formData\n              });\n            } else {\n              item = this.createControl(parentComponent, control, {\n                model: model[i],\n                data: data,\n                errors: errors,\n                parentItem: parentItem,\n                buildermode: buildermode,\n                handleEvent: handleEvent,\n                getFormFunc: getFormFunc,\n                getAdditionalDataForControl: getAdditionalDataForControl,\n                hideControls: hideControls,\n                readOnlyControls: readOnlyControls,\n                readOnly: readOnly,\n                disableRefs: disableRefs,\n                uploadUrl: uploadUrl,\n                downloadUrl: downloadUrl,\n                extendedData: extendedData,\n                parentPlaceholder: parentPlaceholder,\n                controlsToReplace: controlsToReplace,\n                needCheckReplace: needCheckReplace,\n                eventOnEdit: eventOnEdit,\n                eventOnDelete: eventOnDelete,\n                eventOnCopy: eventOnCopy,\n                externalControlRender: externalControlRender,\n                externalControlList: externalControlList,\n                adaptiveViewType: adaptiveViewType,\n                formData: formData\n              });\n            }\n          }\n        }\n\n        if (buildermode) {\n          if (i > 0 && i < model.length) {\n            var dropzone_bw = this.createBuilderDropzone(model[i].key + \'-dropzone_bw\', parentItem === undefined ? undefined : parentItem.key, model[i].key, \'...\', parentPlaceholder);\n            res.push(dropzone_bw);\n          }\n\n          res.push( /*#__PURE__*/external_react_default.a.createElement(control_bar_ControlBar, {\n            key: item.key + "_controlbar",\n            control: item,\n            text: model[i]["data-buildertype"],\n            model: model[i],\n            parent: parentComponent,\n            onDelete: eventOnDelete,\n            onEdit: eventOnEdit,\n            onCopy: eventOnCopy,\n            isGroup: model[i]["data-buildertype"] === "formgroup",\n            builderActions: this.builderActions\n          }));\n        } else {\n          res.push(item);\n        }\n      }\n\n      return res;\n    }\n  }, {\n    key: "createControl",\n    value: function createControl(parentComponent, control, _ref3) {\n      var model = _ref3.model,\n          data = _ref3.data,\n          errors = _ref3.errors,\n          parentItem = _ref3.parentItem,\n          buildermode = _ref3.buildermode,\n          children = _ref3.children,\n          handleEvent = _ref3.handleEvent,\n          getAdditionalDataForControl = _ref3.getAdditionalDataForControl,\n          getFormFunc = _ref3.getFormFunc,\n          hideControls = _ref3.hideControls,\n          readOnlyControls = _ref3.readOnlyControls,\n          readOnly = _ref3.readOnly,\n          disableRefs = _ref3.disableRefs,\n          uploadUrl = _ref3.uploadUrl,\n          downloadUrl = _ref3.downloadUrl,\n          extendedData = _ref3.extendedData,\n          controlsToReplace = _ref3.controlsToReplace,\n          needCheckReplace = _ref3.needCheckReplace,\n          eventOnEdit = _ref3.eventOnEdit,\n          eventOnDelete = _ref3.eventOnDelete,\n          eventOnCopy = _ref3.eventOnCopy,\n          externalControlRender = _ref3.externalControlRender,\n          externalControlList = _ref3.externalControlList,\n          adaptiveViewType = _ref3.adaptiveViewType,\n          formData = _ref3.formData;\n      throw new Error(\'You must implement this method in subclass\');\n    }\n  }, {\n    key: "setCreateControlsProps",\n    value: function setCreateControlsProps(props, paramsToSet) {\n      Object.assign(props, paramsToSet);\n\n      if (props.buildermode) {\n        props.createBuilderDropzone = this.createBuilderDropzone.bind(this);\n      }\n\n      props.createControls = this.createControls.bind(this);\n    }\n  }, {\n    key: "getPlatformContainerControl",\n    value: function getPlatformContainerControl() {}\n  }], [{\n    key: "isAdaptiveRender",\n    value: function isAdaptiveRender(model, adaptiveViewType) {\n      if (model[\'style-adaptive\'] && adaptiveViewType !== undefined && adaptiveViewType !== null && adaptiveViewType !== \'\' && model[\'style-renderwhen\']) {\n        if (adaptiveViewType !== model[\'style-renderwhen\']) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: "isForm",\n    value: function isForm(model) {\n      return model !== null && model !== undefined && (model[\'data-buildertype\'] === \'form\' || model[\'data-buildertype\'] === \'formgroup\');\n    }\n  }, {\n    key: "getFormattedDate",\n    value: function getFormattedDate(str, data) {\n      if (data === undefined || data === null) {\n        return \'\';\n      }\n\n      var propertyName;\n      var format = undefined;\n      var indexSep = str.indexOf(\':\');\n\n      if (indexSep > 0) {\n        propertyName = str.substring(0, indexSep);\n        format = str.substring(indexSep + 1, str.length);\n      } else {\n        propertyName = str;\n      }\n\n      var value = data[propertyName];\n\n      if (value === null || value === undefined) {\n        value = \'\';\n      }\n\n      if (isDefined(format)) {\n        if (typeof value == \'number\') {\n          value = external_numeral_default()(value).format(format);\n        } else {\n          var dateValue = external_moment_default()(value);\n\n          if (dateValue.isValid()) {\n            if (format === \'local\') {\n              var localFormat = dwKitDateFormat(\'L\');\n              value = dateValue.format(localFormat);\n            } else {\n              value = dateValue.format(format);\n            }\n          }\n        }\n      }\n\n      return value;\n    }\n  }, {\n    key: "getStyle",\n    value: function getStyle(model, builderMode, adaptiveViewType) {\n      var style = {};\n\n      if (model[\'style-marginTop\']) {\n        style.marginTop = model[\'style-marginTop\'];\n      }\n\n      if (model[\'style-marginBottom\']) {\n        style.marginBottom = model[\'style-marginBottom\'];\n      }\n\n      if (model[\'style-marginLeft\']) {\n        style.marginLeft = model[\'style-marginLeft\'];\n      }\n\n      if (model[\'style-marginRight\']) {\n        style.marginRight = model[\'style-marginRight\'];\n      }\n\n      if (model[\'style-width\']) {\n        style.width = model[\'style-width\'];\n      }\n\n      if (model[\'style-height\']) {\n        style.height = model[\'style-height\'];\n      }\n\n      if (model[\'style-float\'] !== undefined) {\n        style["float"] = model[\'style-float\'];\n      }\n\n      if (model[\'style-display\'] !== undefined) {\n        style.display = model[\'style-display\'];\n      }\n\n      if (model[\'style-hidden\']) {\n        if (builderMode) {\n          style.opacity = 0.2;\n        } else {\n          style.display = \'none\';\n        }\n      }\n\n      if (model[\'style-source\'] !== undefined) {\n        BaseControls.getCustomStyle(model[\'style-source\'], style);\n      }\n\n      if (model[\'style-font-size\'] !== undefined) {\n        style.fontSize = model[\'style-font-size\'];\n      }\n\n      if (model[\'style-adaptive\'] && model[\'style-mobilesource\'] !== undefined && adaptiveViewType === \'mobile\') {\n        BaseControls.getCustomStyle(model[\'style-mobilesource\'], style);\n      }\n\n      return style;\n    }\n  }, {\n    key: "getCustomStyle",\n    value: function getCustomStyle(source, style) {\n      var properties = source.split(\';\');\n      properties.forEach(function (property) {\n        var tup = property.split(\':\');\n\n        if (tup.length === 2) {\n          var p = tup[0].replace(/^\\s+|\\s+$/g, \'\');\n          style[p] = tup[1].replace(/^\\s+|\\s+$/g, \'\');\n        }\n      });\n    }\n  }, {\n    key: "getClassName",\n    value: function getClassName(model, buildermode) {\n      var className = model["style-customcss"];\n\n      if (buildermode && isDefined(BaseControls.containers["data-buildertype"])) {\n        className = (className == undefined ? "" : className + " ") + "dwkit-formbuilder-item-container";\n      }\n\n      if (model["other-required"] == true) {\n        var requiredClass = "dwkit-required-field";\n        className = className == undefined || className == "" ? requiredClass : className + requiredClass;\n      }\n\n      if (model["style-hiddeninprint"] == true) {\n        className = (className == undefined ? "" : className + " ") + "dwkit-notprint";\n      }\n\n      return className;\n    }\n  }, {\n    key: "fillDefaultValues",\n    value: function fillDefaultValues(model, defaultValues) {\n      for (var k in defaultValues) {\n        if (model[k] === undefined) {\n          model[k] = defaultValues[k];\n        }\n      }\n\n      return model;\n    }\n  }]);\n\n  return BaseControls;\n}();\n\nbase_controls_defineProperty(base_controls_BaseControls, "containers", {\n  \'form\': \'\',\n  \'formgroup\': \'\',\n  \'grid\': \'\',\n  \'gridcolumn\': \'\',\n  \'container\': \'\',\n  \'div\': \'\',\n  \'repeater\': \'\'\n});\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/lang.js\nvar lang = {\n  clearbutton: \'Clear\',\n  uploadbutton: \'Upload\',\n  downloadbutton: \'Download\',\n  toolbar: {\n    sepContainers: \'Containers\',\n    container: \'Container\',\n    form: \'Form\',\n    formgroup: \'Form Group\',\n    menu: \'Menu\',\n    workflowbar: \'Workflow bar\',\n    customblock: \'Custom block\',\n    sepCollection: \'Collections\',\n    gridview: \'GridView\',\n    collectioneditor: \'Collection Editor\',\n    camera: \'Camera\',\n    sepControls: \'Controls\',\n    header: \'Header\',\n    input: \'Input\',\n    textarea: \'TextArea\',\n    dictionary: \'Dictionary\',\n    dropdown: \'Dropdown\',\n    checkbox: \'CheckBox\',\n    radiogroup: \'Radio group\',\n    button: \'Button\',\n    label: \'Label\',\n    message: \'Message\',\n    image: \'Image\',\n    statistic: \'Statistic\',\n    customcontrol: \'Custom control\',\n    staticcontent: \'Static Content\',\n    dropdowntrigger: \'Dropdown trigger\',\n    sepCharts: \'Charts\',\n    barchart: \'Bar\',\n    linechart: \'Line\',\n    scatterchart: \'Scatter\',\n    doughnutchart: \'Doughnut\',\n    piechart: \'Pie\',\n    radarchart: \'Radar\',\n    signaturecanvas: \'Signature\'\n  },\n  preview: {\n    dropzonetext: \'DROP ZONE\'\n  },\n  editforms: {\n    base: {\n      generaltab: \'General\',\n      styletab: \'Style\',\n      eventstab: \'Events\',\n      othertab: \'Other\',\n      widthfield: \'Width\',\n      heightfield: \'Height\',\n      margintopfield: \'Margin Top\',\n      marginbottomfield: \'Margin Bottom\',\n      marginleftfield: \'Margin Left\',\n      marginrightfield: \'Margin Right\',\n      customcssclassfield: \'Custom CSS class\',\n      stylefield: \'Style\',\n      hiddenfield: \'Hidden\',\n      hiddeninprintfield: "Hidden in Print mode",\n      controlhasnoeventsmsg: \'This control has no events.\',\n      eventsinfomsg: \'These flags enable processing from this element.\',\n      requiredfield: \'Required\',\n      defaultvaluefield: \'Default value\',\n      customvalidationfield: \'Custom Validation\',\n      visibleconditionfield: \'Visible condition\',\n      readonlyconditionfield: \'ReadOnly condition\',\n      savebutton: \'Save\',\n      cancelbutton: \'Cancel\',\n      okbutton: \'OK\',\n      closebutton: \'Close\',\n      sizedefault: \'Default\',\n      sizemini: \'Mini\',\n      sizetiny: \'Tiny\',\n      sizesmall: \'Small\',\n      sizemedium: \'Medium\',\n      sizelarge: \'Large\',\n      sizebig: \'Big\',\n      sizehuge: \'Huge\',\n      sizemassive: \'Massive\',\n      attachednone: \'None\',\n      attachedtop: \'Top\',\n      attachedbottom: \'Bottom\',\n      attachedtopright: \'Top right\',\n      attachedtopleft: \'Top left\',\n      attachedbottomleft: \'Bottom left\',\n      attachedbottomright: \'Bottom right\',\n      labeldefault: \'Default\',\n      labelleft: \'Left\',\n      labelright: \'Right\',\n      labelleftcorner: \'Left corner\',\n      labelrightcorner: \'Right corner\',\n      closewithoutsavequestion: \'Close without save?\',\n      questiontitle: \'Question\',\n      onchangetimeout: \'onChange timeout\'\n    },\n    attributesForm: {\n      label: \'HTML attributes\',\n      nameColumn: \'Name\',\n      valueColumn: \'Value\'\n    },\n    headerform: {\n      namefield: \'Name\',\n      sizefield: \'Size\',\n      contentfield: \'Content\',\n      textalignfield: \'Text Align\',\n      textalignleft: \'Left\',\n      textaligncenter: \'Center\',\n      textalignright: \'Right\',\n      subheaderfield: \'Subheader\'\n    },\n    buttonform: {\n      namefield: \'Name\',\n      typefield: \'Type\',\n      typenonefield: \'None\',\n      typesubmitfield: \'Submit\',\n      sizefield: \'Size\',\n      contentfield: \'Content\',\n      optionsfield: \'Options\',\n      basicfield: \'Basic\',\n      circularfield: \'Circular\',\n      compactfield: \'Compact\',\n      disabledfield: \'Disabled\',\n      fluidfield: \'Fluid\',\n      linkfield: "Link",\n      invertedfield: \'Inverted\',\n      loadingfield: \'Loading\',\n      primaryfield: \'Primary\',\n      secondaryfield: \'Secondary\',\n      togglefield: \'Toggle\',\n      floatedfield: \'Floated\',\n      floateddefaultfield: \'Default\',\n      floatedleftfield: \'Left\',\n      floatedrightfield: \'Right\'\n    },\n    labelform: {\n      namefield: \'Name\',\n      attachedfield: \'Attached\',\n      contentfield: \'Content\',\n      sizefield: \'Size\',\n      optionsfield: \'Options\',\n      basicfield: \'Basic\',\n      circularfield: \'Circular\',\n      cornerfield: \'Corner\',\n      floatingfield: \'Floating\',\n      horizontalfield: \'Horizontal\',\n      pointingfield: \'Pointing\'\n    },\n    staticcontentform: {\n      namefield: \'Name\',\n      fontsizefield: \'Font size\',\n      contentfield: \'Content\',\n      allowhtmlfield: \'Allow HTML\'\n    },\n    messageform: {\n      namefield: \'Name\',\n      headerfield: \'Header\',\n      optionsfield: \'Options\',\n      compactfield: \'Compact\',\n      errorfield: \'Error\',\n      floatingfield: \'Floating\',\n      infofield: \'Info\',\n      negativefield: \'Negative\',\n      positivefield: \'Positive\',\n      successfield: \'Success\',\n      warningfield: \'Warning\',\n      contentfield: \'Content\',\n      sizefield: \'Size\'\n    },\n    inputform: {\n      namefield: \'Name\',\n      labelfield: \'Label\',\n      typefield: \'Type\',\n      typetext: \'Text\',\n      typenumber: \'Number\',\n      typedate: \'Date\',\n      typetime: \'Time\',\n      typedatetime: \'Date & Time\',\n      typepasswod: \'Password\',\n      labelpositionfield: \'Label position\',\n      optionsfield: \'Options\',\n      loadingfield: \'Loading\',\n      invertedfield: \'Inverted\',\n      errorfield: \'Error\',\n      disabledfield: \'Disabled\',\n      transparentfield: \'Transparent\',\n      fluidfield: \'Fluid\',\n      readonlyfield: \'Read only\',\n      placeholderfield: \'Placeholder\',\n      sizefield: \'Size\',\n      dateformatfield: \'Date Format\'\n    },\n    textareaform: {\n      namefield: \'Name\',\n      labelfield: \'Label\',\n      rowsfield: \'Rows\',\n      optionsfield: \'Options\',\n      placeholderfield: \'Placeholder\',\n      readonlyfield: \'Read only\'\n    },\n    checkboxform: {\n      namefield: \'Name\',\n      labelfield: \'Label\',\n      optionsfield: \'Options\',\n      fittedfield: \'Fitted\',\n      indeterminatefield: \'Indeterminate\',\n      readonlyfield: \'ReadOnly\',\n      disabledfield: \'Disabled\',\n      sliderfield: \'Slider\',\n      togglefield: \'Toggle\'\n    },\n    dropdownform: {\n      namefield: \'Name\',\n      labelfield: \'Label\',\n      datafield: \'Data\',\n      datakeycolumn: \'Key\',\n      datavaluecolumn: \'Value\',\n      datatextcolumn: \'Text\',\n      optionsfield: \'Options\',\n      loadingfield: \'Loading\',\n      errorfield: \'Error\',\n      disabledfield: \'Disabled\',\n      fluidfield: \'Fluid\',\n      multiplefield: \'Multiple\',\n      searchfield: \'Search\',\n      selectionfield: \'Selection\',\n      readonlyfield: \'Read only\',\n      clearablefield: \'Clearable\',\n      allowAddItemsfield: \'Allow add items\',\n      sortAlphabetically: \'Sort alphabetically\'\n    },\n    dictionaryform: {\n      namefield: \'Name\',\n      labelfield: \'Label\',\n      datamodelfield: \'Data model\',\n      placeholderfield: \'Placeholder\',\n      columnsfield: \'Columns (Name ASC, Email)\',\n      optionsfield: \'Options\',\n      loadingfield: \'Loading\',\n      errorfield: \'Error\',\n      disabledfield: \'Disabled\',\n      fluidfield: \'Fluid\',\n      multiplefield: \'Multiple\',\n      searchfield: \'Search\',\n      selectionfield: \'Selection\',\n      readonlyfield: \'Read only\',\n      clearablefield: \'Clearable\',\n      pagingfield: \'Server pagination\',\n      pagesizefield: \'Page Size\',\n      parentidfield: \'Parent Field\',\n      textfield: \'Text expression\',\n      textasvaluefield: "Text as Value",\n      textasvalueinfofield: "The Text will be binded to a property directly"\n    },\n    radiogroupform: {\n      namefield: \'Name\',\n      labelfield: \'Label\',\n      datafield: \'Data\',\n      datakeycolumn: \'Key\',\n      datavaluecolumn: \'Value\',\n      datatextcolumn: \'Text\',\n      groupdirectfield: \'Group direction\',\n      directionhorizontalfield: \'Horizontal\',\n      directionverticalfield: \'Vertical\',\n      readonlyfield: \'Read only\'\n    },\n    form: {\n      namefield: \'Name\',\n      sizefield: \'Size\',\n      optionsfield: \'Options\',\n      loadingfield: \'Loading\',\n      errorfield: \'Error\',\n      invertedfield: \'Inverted\',\n      replyfield: \'Reply\',\n      successfield: \'Success\',\n      warningfield: \'Warning\'\n    },\n    formgroupform: {\n      namefield: \'Name\',\n      widthsfield: \'Widths\',\n      widthsdefaultfield: \'Default\',\n      widthsequalfield: \'Equal\',\n      widthscustomfield: \'Custom (1 - 16)\',\n      typefield: \'Type\',\n      orientationcolumnsfield: \'Columns\',\n      orientationrowsfield: \'Rows\',\n      orientationfieldfield: \'Field\'\n    },\n    containerform: {\n      namefield: \'Name\',\n      floatfield: \'Float\',\n      floatnonefield: \'None\',\n      floatleftfield: \'Left\',\n      floatrightfield: \'Right\',\n      flexbaselinefield: \'Baseline\',\n      flexstretchfield: \'Stretch\',\n      flexcenterfield: \'Center\',\n      flexstartfield: \'Start\',\n      flexendfield: \'End\',\n      flexspacearoundfield: \'Space Around\',\n      flexspacebetweenfield: \'Space Between\',\n      displayhorizontalalignfield: \'Horizontal Align\',\n      displayverticalalignfield: \'Vertical Align\',\n      childrenviewfield: "Children Container View",\n      childrenviewnonefield: "None",\n      childrenviewrowsfield: "Rows",\n      childrenviewcolumnsfield: "Columns",\n      childrenviewcolumnswrapfield: "Columns Wrap",\n      childrenstylefield: "Children Container Style"\n    },\n    repeaterform: {\n      namefield: "Name",\n      sliderfield: "Slider",\n      itemvisibleconditionfield: "Item Visible Condition",\n      defaultsortfield: "Default sort",\n      pagertypefield: "Pagination type",\n      pagesizefield: "Page size",\n      loadbuttonlabelfield: "Load Button Label",\n      norecordslabelfield: "No Record Button Label",\n      childrenviewfield: "Children Container View",\n      childrenviewnonefield: "None",\n      childrenviewrowsfield: "Rows",\n      childrenviewcolumnsfield: "Columns",\n      childrenviewcolumnswrapfield: "Columns Wrap",\n      childrenstylefield: "Children Container Style"\n    },\n    imageform: {\n      namefield: \'Name\',\n      srcfield: \'Src\',\n      hreffield: \'Href\',\n      optionsfield: \'Options\',\n      avatarfield: \'Avatar\',\n      borderedfield: \'Bordered\',\n      centeredfield: \'Centered\',\n      disabledfield: \'Disabled\',\n      inlinefield: \'Inline\',\n      spacedfield: \'Spaced\',\n      floatedfield: \'Floated\',\n      floatedleftfield: \'Left\',\n      floatedrightfield: \'Right\',\n      verticalalignfield: \'Vertical align\',\n      verticalaligntopfield: \'Top\',\n      verticalalignmiddlefield: \'Middle\',\n      verticalalignbottomfield: \'Bottom\'\n    },\n    statisticform: {\n      namefield: \'Name\',\n      optionsfield: \'Options\',\n      floatedfield: \'Floated\',\n      horizontalfield: \'Horizontal\',\n      datafield: \'Data\',\n      sizefield: \'Size\'\n    },\n    gridform: {\n      namefield: \'Name\',\n      optionsfield: \'Options\',\n      multiselectfield: \'Multiselect\',\n      filterrowfield: \'Filter row\',\n      disablesortfield: \'Disable sorting\',\n      editformfield: \'Edit form\',\n      editformshowtypefield: \'Edit form show type\',\n      editformsidebardirectionfield: \'Sidebar comes from\',\n      editformtypedefaultfield: \'Default\',\n      editformtypemodalfield: \'Modal\',\n      editformtypesidebarfield: \'Sidebar\',\n      columnsfield: \'Columns\',\n      keycolumn: \'Key\',\n      namecolumn: \'Name\',\n      typecolumn: \'Type\',\n      widthcolumn: \'Width\',\n      resizablecolumn: \'Resizable\',\n      rowkeyfield: \'Row key\',\n      pagertypefield: \'Pagination type\',\n      pagertypenonefield: \'None\',\n      pagertypeserverfield: \'Server\',\n      pagesizefield: \'Page size\',\n      defaultsortfield: \'Default sort\',\n      rowheightfield: \'Row height\',\n      minheightfield: \'Min height\',\n      autoheightfield: \'Auto Height\',\n      offsetfield: \'OffSet\',\n      editType: \'Edit type\',\n      editflowfield: \'Edit flow\',\n      editformsidebarderectionleftfield: \'Left\',\n      editformsidebarderectionrightfield: \'Right\',\n      editformsidebarderectionbottomfield: \'Bottom\'\n    },\n    collectioneditorform: {\n      namefield: \'Name\',\n      idfield: \'Id field\',\n      optionsfield: \'Options\',\n      readonlyfield: \'ReadOnly\',\n      draggablefield: \'Draggable\',\n      hierarchicalfield: \'Hierarchical\',\n      collapseallfield: \'Collapse all\',\n      parentidfield: \'ParentId field\',\n      columnsfield: \'Columns\',\n      keycolumn: \'Key\',\n      namecolumn: \'Name\',\n      controlcolumn: \'Control\',\n      widthcolumn: \'Width\',\n      disableAdd: \'Disable Add\',\n      disableDelete: \'Disable Delete\',\n      childrenField: \'Children field\'\n    },\n    customform: {\n      namefield: \'Name\',\n      typefield: \'Control type\',\n      propsfield: \'Props\',\n      childrenfield: \'Children\'\n    },\n    customblockform: {\n      namefield: \'Name\',\n      sourcetypefield: \'Source type\',\n      sourcetypeformfield: \'Form name\',\n      sourcetypejsonfield: \'JSON source\',\n      formnamefield: \'Form name\',\n      sourcefield: \'JSON source\',\n      placeholderfield: \'Placeholder\'\n    },\n    menuform: {\n      namefield: \'Name\',\n      activeitemfield: \'Active Item\',\n      itemsfield: \'Items\',\n      itemstargetcolumn: \'Target\',\n      itemstitlecolumn: \'Title\',\n      optionsfield: \'Options\',\n      pointingfield: \'Pointing\',\n      secondaryfield: \'Secondary\',\n      tabularfield: \'Tabular\',\n      fluidfield: \'Fluid\',\n      verticalfield: \'Vertical\',\n      linkfield: \'Link\',\n      visibleConditioncolumn: \'Visible Condition\'\n    },\n    dropdowntriggerform: {\n      namefield: \'Name\',\n      defaultvaluefield: \'Default Value\',\n      itemsfield: \'Items\',\n      itemstargetcolumn: \'Target\',\n      itemstitlecolumn: \'Title\',\n      itemsvisibleconditioncolumn: \'Visible Condition\',\n      imageurlfield: \'ImageUrl\'\n    },\n    chartform: {\n      namefield: \'Name\',\n      titlefield: \'Title\',\n      titlesizefield: \'Title size\',\n      legendpositionfield: \'Legend position\',\n      responsivefield: \'Responsive\',\n      datasetcustomfield: \'Dataset custom\',\n      datalabelsplaceholder: \'Q1, Q2, Q3, Q4\',\n      datalabelsfield: \'Data labels\',\n      datasetlabelfield: \'Dataset Label\',\n      datasetbackgroundcolorfield: \'Dataset BackgroundColor\'\n    },\n    workflowform: {\n      namefield: \'Name\',\n      setstatebuttonfield: \'Set state button\',\n      blocksetstatefield: \'Block SetState\',\n      blockloadparametersfield: \'Block load parameters\',\n      blockselectschemefield: \'Block select scheme\',\n      selectschemedropdownfield: \'Select scheme dropdown\'\n    },\n    uploadform: {\n      namefield: \'Name\',\n      iconFiletypes: \'Icon file types\',\n      customPostUrl: \'Custom post url\',\n      showFiletypeIcon: \'Show file type icon\',\n      autoProcessQueue: \'Auto process queue\',\n      addRemoveLinks: \'Add remove links\',\n      multile: \'Multiple file upload\'\n    },\n    breadcrumbform: {\n      namefield: \'Name\',\n      itemsfield: \'Items\',\n      itemstextcolumn: \'Text\',\n      itemsurlcolumn: \'Url\',\n      itemsactivecolumn: \'Active\',\n      itemsiconcolumn: \'Divider Icon\'\n    },\n    searchform: {\n      namefield: \'Name\',\n      urlfield: \'Url\',\n      categoryfield: \'Enable Categories\'\n    },\n    treepickerform: {\n      namefield: \'Name\',\n      labelfield: \'Label\',\n      datamodelfield: \'Data model\',\n      columnsfield: \'Columns (Name ASC, Email)\',\n      optionsfield: \'Options\',\n      errorfield: \'Error\',\n      disabledfield: \'Disabled\',\n      fluidfield: \'Fluid\',\n      multiplefield: \'Multiple\',\n      selectionfield: \'Selection\',\n      readonlyfield: \'Read only\',\n      clearablefield: \'Clearable\',\n      pagingfield: \'Server pagination\',\n      pagesizefield: \'Page Size\',\n      parentidfield: \'Parent Field\',\n      buttoncssclass: \'Custom CSS class for Button\',\n      buttonstyle: \'Button style\',\n      modalcssclass: \'Custom CSS class for modal\',\n      modalstyle: \'Modal style\',\n      textfield: \'Text expression\'\n    },\n    filecontrolform: {\n      namefield: \'Name\',\n      iconFiletypes: \'Icon file types\',\n      customPostUrl: \'Custom post url\',\n      showFiletypeIcon: \'Show file type icon\',\n      autoProcessQueue: \'Auto process queue\',\n      readonlyfield: \'Read only\',\n      usedropzonefield: \'Use dropzone\',\n      propertiesfield: \'File properties\',\n      titlecolumn: \'Column title\',\n      showpropertycolumn: \'Show property\',\n      idfield: \'Id field\',\n      fieldcolumn: \'Table field\',\n      propertycolumn: \'File property\'\n    },\n    cardform: {\n      namefield: "Name",\n      headerfield: "Header",\n      subheaderfield: "Subheader",\n      imgurl: "Image URL"\n    }\n  }\n};\n/* harmony default export */ var src_lang = (lang);\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/store-factory.jsx\nfunction store_factory_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { store_factory_typeof = function _typeof(obj) { return typeof obj; }; } else { store_factory_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return store_factory_typeof(obj); }\n\n/* eslint-disable eqeqeq */\n\n/* eslint-disable no-unused-vars */\n\n/* eslint-disable no-redeclare */\n\n/* eslint-disable no-mixed-operators */\n\n\nfunction createStore(builderActions) {\n  var _data;\n\n  return external_reflux_default.a.createStore({\n    init: function init() {\n      this.listenTo(builderActions.add, this.add);\n      this.listenTo(builderActions.move, this.move);\n      this.listenTo(builderActions.remove, this.remove);\n      this.listenTo(builderActions.save, this.save);\n      this.listenTo(builderActions.saveData, this._updateOrder);\n      this.listenTo(builderActions.insert, this.insert);\n      _data = [];\n    },\n    move: function move(key, el) {\n      if (el == undefined) {\n        return;\n      }\n\n      var item = this.findItemByKey(key, _data);\n\n      var sortedArray = this._excludeItemByKey(key, _data);\n\n      if (el.attributes[\'name\'] && el.attributes[\'name\'].value === \'dropzone_footer\') {\n        sortedArray.push(item);\n      } else if (el.attributes[\'name\'] && el.attributes[\'name\'].value === \'dropzone_header\') {\n        sortedArray.unshift(item);\n      } else if (el.attributes[\'elementtoinsert\'] != undefined) {\n        var parentControl;\n        var parentKey = el.attributes[\'elementtoinsert\'];\n\n        if (parentKey != undefined) {\n          parentControl = this.findItemByKey(parentKey.value, sortedArray);\n        }\n\n        if (parentControl != undefined) {\n          var placeholderAtt = el.attributes[\'placeholderkey\'];\n          var container = undefined;\n\n          if (placeholderAtt === undefined) {\n            if (parentControl.children == undefined) {\n              parentControl.children = [];\n            }\n\n            container = parentControl.children;\n          } else {\n            if (parentControl.placeholders === undefined) {\n              parentControl.placeholders = {};\n            }\n\n            if (parentControl.placeholders[placeholderAtt.value] == undefined) {\n              parentControl.placeholders[placeholderAtt.value] = [];\n            }\n\n            container = parentControl.placeholders[placeholderAtt.value];\n          }\n\n          if (el.attributes[\'name\'] != undefined && el.attributes[\'name\'].value.includes(\'dropzone_footer\')) {\n            container.push(item);\n          } else if (el.attributes[\'name\'] != undefined && el.attributes[\'name\'].value.includes(\'dropzone_header\')) {\n            container.unshift(item);\n          } else {\n            var afterKey = el.attributes[\'elementafter\'];\n            var afterControl;\n\n            if (afterKey != undefined) {\n              afterControl = this.findItemByKey(afterKey.value, container);\n            }\n\n            container.splice(container.indexOf(afterControl), 0, item);\n          }\n        } else {\n          console.error(\'ERROR: element is not found\', parentKey, item, el);\n        }\n      } else if (el.attributes[\'elementafter\'] != undefined) {\n        var control;\n        var afterKey = el.attributes[\'elementafter\'];\n\n        if (afterKey != undefined) {\n          control = this.findItemByKey(afterKey.value, sortedArray);\n        }\n\n        if (control != undefined) {\n          sortedArray.splice(sortedArray.indexOf(control), 0, item);\n        } else {\n          console.error(\'ERROR: element is not found\', afterKey, item, el);\n        }\n      }\n\n      this.setData(sortedArray);\n    },\n    insert: function insert(item, name, elementtoinsert, elementafter, placeholderKey) {\n      if (!item) {\n        return;\n      }\n\n      var sortedArray = _data;\n      this.makeUniqueKeys(item, this.getAllKeys(sortedArray));\n\n      if (name === \'dropzone_footer\') {\n        sortedArray.push(item);\n      } else if (name === \'dropzone_header\') {\n        sortedArray.unshift(item);\n      } else if (elementtoinsert) {\n        var parentControl;\n        parentControl = this.findItemByKey(elementtoinsert, sortedArray);\n\n        if (parentControl != undefined) {\n          var container = undefined;\n\n          if (placeholderKey === undefined) {\n            if (parentControl.children == undefined) {\n              parentControl.children = [];\n            }\n\n            container = parentControl.children;\n          } else {\n            if (parentControl.placeholders === undefined) {\n              parentControl.placeholders = {};\n            }\n\n            if (parentControl.placeholders[placeholderKey.value] == undefined) {\n              parentControl.placeholders[placeholderKey.value] = [];\n            }\n\n            container = parentControl.placeholders[placeholderKey.value];\n          }\n\n          if (name && name.includes(\'dropzone_footer\')) {\n            container.push(item);\n          } else if (name && name.includes(\'dropzone_header\')) {\n            container.unshift(item);\n          } else if (elementafter != undefined) {\n            var afterControl = this.findItemByKey(elementafter, container);\n            container.splice(container.indexOf(afterControl), 0, item);\n          }\n        } else {\n          console.error(\'ERROR: element is not found\', parentControl, item, elementtoinsert);\n        }\n      } else if (elementafter != undefined) {\n        var control;\n        control = this.findItemByKey(elementafter, sortedArray);\n\n        if (control != undefined) {\n          sortedArray.splice(sortedArray.indexOf(control), 0, item);\n        } else {\n          console.error(\'ERROR: element is not found\', elementafter, item);\n        }\n      }\n\n      this.setData(sortedArray);\n    },\n    _excludeItemByKey: function _excludeItemByKey(key, data) {\n      var sortedArray = [];\n\n      for (var i = 0; i < data.length; i++) {\n        if (data[i].key == key) {\n          continue;\n        }\n\n        sortedArray.push(data[i]);\n\n        if (data[i].children) {\n          sortedArray[sortedArray.length - 1].children = this._excludeItemByKey(key, data[i].children);\n        }\n\n        if (data[i].placeholders != undefined) {\n          for (var ph in data[i].placeholders) {\n            if (Array.isArray(data[i].placeholders[ph])) {\n              sortedArray[sortedArray.length - 1].placeholders[ph] = this._excludeItemByKey(key, data[i].placeholders[ph]);\n            }\n          }\n        }\n      }\n\n      return sortedArray;\n    },\n    add: function add(item, el) {\n      var res = base_controls_BaseControls.fillDefaultValues({\n        key: this.getDefaultKey(item.key),\n        \'data-buildertype\': item.builderType !== undefined ? item.builderType : item.key\n      }, item.defaultValues);\n\n      if (el == undefined) {\n        if (_data.length > 0 && _data[_data.length - 1][\'data-buildertype\'] === \'form\') {\n          var p = _data[_data.length - 1];\n\n          if (p.children == undefined) {\n            p.children = [];\n          }\n\n          p.children.push(res);\n        } else {\n          _data.push(res);\n        }\n      } else if (el.attributes[\'name\'] && el.attributes[\'name\'].value === \'dropzone_footer\') {\n        _data.push(res);\n      } else if (el.attributes[\'name\'] && el.attributes[\'name\'].value === \'dropzone_header\') {\n        _data.unshift(res);\n      } else if (el.attributes[\'elementtoinsert\'] != undefined) {\n        var parentControl;\n        var parentKey = el.attributes[\'elementtoinsert\'];\n\n        if (parentKey != undefined) {\n          parentControl = this.findItemByKey(parentKey.value, _data);\n        }\n\n        if (parentControl != undefined) {\n          var placeholderAtt = el.attributes[\'placeholderkey\'];\n          var container = undefined;\n\n          if (placeholderAtt === undefined) {\n            if (parentControl.children == undefined) {\n              parentControl.children = [];\n            }\n\n            container = parentControl.children;\n          } else {\n            if (parentControl.placeholders === undefined) {\n              parentControl.placeholders = {};\n            }\n\n            if (parentControl.placeholders[placeholderAtt.value] == undefined) {\n              parentControl.placeholders[placeholderAtt.value] = [];\n            }\n\n            container = parentControl.placeholders[placeholderAtt.value];\n          }\n\n          if (el.attributes[\'name\'] != undefined && el.attributes[\'name\'].value.includes(\'dropzone_footer\')) {\n            container.push(res);\n          } else if (el.attributes[\'name\'] != undefined && el.attributes[\'name\'].value.includes(\'dropzone_header\')) {\n            container.unshift(res);\n          } else {\n            var afterKey = el.attributes[\'elementafter\'];\n            var afterControl;\n\n            if (afterKey != undefined) {\n              afterControl = this.findItemByKey(afterKey.value, container);\n            }\n\n            container.splice(container.indexOf(afterControl), 0, res);\n          }\n        } else {\n          console.error(\'ERROR: element is not found\', parentKey, item, el);\n        }\n      } else if (el.attributes[\'elementafter\'] != undefined) {\n        var control;\n        var afterKey = el.attributes[\'elementafter\'];\n\n        if (afterKey != undefined) {\n          control = this.findItemByKey(afterKey.value, _data);\n        }\n\n        if (control != undefined) {\n          _data.splice(_data.indexOf(control), 0, res);\n        } else {\n          console.error(\'ERROR: element is not found\', afterKey, el);\n        }\n      }\n\n      this.trigger(_data);\n    },\n    remove: function remove(item) {\n      this.removeItemByKey(item.key, _data);\n      this.trigger(_data);\n    },\n    copy: function copy(item) {\n      var newItem = this.copyObj(item);\n      this.insertAfterKey(newItem, item.key, _data);\n      this.makeUniqueKeys(newItem);\n      this.trigger(_data);\n    },\n    getData: function getData() {\n      return _data;\n    },\n    setData: function setData(data) {\n      _data = data;\n      this.trigger(_data);\n    },\n    _updateOrder: function _updateOrder(elements) {\n      _data = elements;\n      this.trigger(_data);\n    },\n    getDefaultKey: function getDefaultKey(name) {\n      var index = 1;\n      var tmp = name + \'_\' + index;\n      var allKeys = this.getAllKeys(_data);\n\n      for (var i = 0; i < allKeys.length; i++) {\n        var item = allKeys[i];\n        var tmp = name + \'_\' + index;\n\n        if (item == tmp) {\n          index++;\n          i = -1;\n        }\n      }\n\n      return tmp;\n    },\n    getAllKeys: function getAllKeys(items) {\n      var res = [];\n\n      if (items != undefined) {\n        for (var i = 0; i < items.length; i++) {\n          var item = items[i];\n          res.push(item.key);\n\n          if (item.children != undefined) {\n            var childkeys = this.getAllKeys(item.children);\n            res = res.concat(childkeys);\n          } else if (item.placeholders != undefined) {\n            for (var ph in item.placeholders) {\n              if (Array.isArray(item.placeholders[ph])) {\n                var phkeys = this.getAllKeys(item.placeholders[ph]);\n                res = res.concat(phkeys);\n              }\n            }\n          }\n        }\n      }\n\n      return res;\n    },\n    getByKey: function getByKey(key) {\n      return this.findItemByKey(key, _data);\n    },\n    findItemByKey: function findItemByKey(key, items) {\n      for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n\n        if (item.key == key) {\n          return item;\n        } else if (item.children != undefined) {\n          var res = this.findItemByKey(key, item.children);\n\n          if (res != undefined) {\n            return res;\n          }\n        } else if (item.placeholders != undefined) {\n          for (var ph in item.placeholders) {\n            if (Array.isArray(item.placeholders[ph])) {\n              var res = this.findItemByKey(key, item.placeholders[ph]);\n\n              if (res != undefined) {\n                return res;\n              }\n            }\n          }\n        }\n      }\n\n      return undefined;\n    },\n    insertAfterKey: function insertAfterKey(insertItem, key, items) {\n      for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n\n        if (item.key == key) {\n          items.splice(i + 1, 0, insertItem);\n          return true;\n        }\n\n        if (item.children !== undefined) {\n          if (this.insertAfterKey(insertItem, key, item.children)) {\n            return true;\n          }\n        }\n\n        if (item.placeholders !== undefined) {\n          for (var ph in item.placeholders) {\n            if (Array.isArray(item.placeholders[ph])) {\n              if (this.insertAfterKey(insertItem, key, item.placeholders[ph])) {\n                return true;\n              }\n            }\n          }\n        }\n      }\n\n      return undefined;\n    },\n    updateItemByKey: function updateItemByKey(key, item) {\n      var data = this.getByKey(key);\n\n      for (var i in item) {\n        data[i] = item[i];\n      }\n\n      if (key != item.key) {\n        this.replaceDepensKeys(key, item.key);\n      }\n\n      this.trigger(_data);\n    },\n    replaceDepensKeys: function replaceDepensKeys(oldKey, newKey, items) {\n      if (items == undefined) {\n        items = _data;\n      }\n\n      for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n\n        if (Array.isArray(item[\'events-onclick-targets\'])) {\n          var targets = item[\'events-onclick-targets\'];\n\n          for (var j = 0; j < targets.length; j++) {\n            if (targets[j] == oldKey) {\n              targets[j] = newKey;\n            }\n          }\n        }\n\n        if (item.children != undefined) {\n          this.replaceDepensKeys(oldKey, newKey, item.children);\n        }\n\n        if (item.placeholders !== undefined) {\n          for (var ph in item.placeholders) {\n            if (Array.isArray(item.placeholders[ph])) {\n              this.replaceDepensKeys(oldKey, newKey, item.placeholders[ph]);\n            }\n          }\n        }\n      }\n    },\n    removeItemByKey: function removeItemByKey(key, items) {\n      for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n\n        if (item.key == key) {\n          items.splice(i, 1);\n          break;\n        }\n\n        if (item.children != undefined) {\n          this.removeItemByKey(key, item.children);\n        }\n\n        if (item.placeholders !== undefined) {\n          for (var ph in item.placeholders) {\n            if (Array.isArray(item.placeholders[ph])) {\n              this.removeItemByKey(key, item.placeholders[ph]);\n            }\n          }\n        }\n      }\n    },\n    copyObj: function copyObj(obj) {\n      if (null == obj || \'object\' !== store_factory_typeof(obj)) {\n        return obj;\n      }\n\n      var copy = obj.constructor();\n\n      for (var attr in obj) {\n        if (obj.hasOwnProperty(attr)) {\n          copy[attr] = this.copyObj(obj[attr]);\n        }\n      }\n\n      return copy;\n    },\n    makeUniqueKeys: function makeUniqueKeys(obj, allKeys) {\n      var me = this;\n      var buildertype = obj[\'data-buildertype\'];\n\n      if (buildertype) {\n        if (obj.key && (!allKeys || allKeys && allKeys.includes(obj.key))) {\n          obj.key = this.getDefaultKey(buildertype);\n        }\n      }\n\n      if (Array.isArray(obj.children)) {\n        obj.children.forEach(function (c) {\n          me.makeUniqueKeys(c, allKeys);\n        });\n      }\n\n      if (obj.placeholders !== undefined) {\n        for (var ph in obj.placeholders) {\n          if (Array.isArray(obj.placeholders[ph])) {\n            obj.placeholders[ph].forEach(function (c) {\n              me.makeUniqueKeys(c, allKeys);\n            });\n          }\n        }\n      }\n    }\n  });\n}\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/base-form-builder.js\nfunction base_form_builder_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { base_form_builder_typeof = function _typeof(obj) { return typeof obj; }; } else { base_form_builder_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return base_form_builder_typeof(obj); }\n\nfunction base_form_builder_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction base_form_builder_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction base_form_builder_createClass(Constructor, protoProps, staticProps) { if (protoProps) base_form_builder_defineProperties(Constructor.prototype, protoProps); if (staticProps) base_form_builder_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction base_form_builder_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) base_form_builder_setPrototypeOf(subClass, superClass); }\n\nfunction base_form_builder_setPrototypeOf(o, p) { base_form_builder_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return base_form_builder_setPrototypeOf(o, p); }\n\nfunction base_form_builder_createSuper(Derived) { var hasNativeReflectConstruct = base_form_builder_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = base_form_builder_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = base_form_builder_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return base_form_builder_possibleConstructorReturn(this, result); }; }\n\nfunction base_form_builder_possibleConstructorReturn(self, call) { if (call && (base_form_builder_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return base_form_builder_assertThisInitialized(self); }\n\nfunction base_form_builder_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction base_form_builder_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction base_form_builder_getPrototypeOf(o) { base_form_builder_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return base_form_builder_getPrototypeOf(o); }\n\nfunction base_form_builder_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\nvar base_form_builder_BaseFormBuilder = /*#__PURE__*/function (_Component) {\n  base_form_builder_inherits(BaseFormBuilder, _Component);\n\n  var _super = base_form_builder_createSuper(BaseFormBuilder);\n\n  function BaseFormBuilder(props) {\n    var _this;\n\n    base_form_builder_classCallCheck(this, BaseFormBuilder);\n\n    _this = _super.call(this, props);\n\n    base_form_builder_defineProperty(base_form_builder_assertThisInitialized(_this), "onDragOver", function (e) {\n      var step = 10;\n\n      if (e.clientY < 150) {\n        _this.scroll(-step);\n      }\n\n      if (e.clientY > window.innerHeight - 150) {\n        _this.scroll(step);\n      }\n    });\n\n    _this.state = {\n      apiurl: props.apiurl,\n      imagefolder: props.imagefolder,\n      dropzoneContext: {\n        visible: true\n      }\n    };\n    _this.builderActions = createActions();\n    _this.dwkitStore = createStore(_this.builderActions);\n    return _this;\n  }\n\n  base_form_builder_createClass(BaseFormBuilder, [{\n    key: "exists",\n    value: function exists(code) {\n      return this.dwkitStore.exists(code);\n    }\n  }, {\n    key: "setBuilderMode",\n    value: function setBuilderMode(enabled) {\n      this.setState({\n        dropzoneContext: {\n          visible: enabled\n        }\n      });\n    }\n  }, {\n    key: "create",\n    value: function create() {\n      this.dwkitStore.setData([]);\n      this.setBuilderMode(true);\n    }\n  }, {\n    key: "loadData",\n    value: function loadData(data) {\n      this.dwkitStore.setData(data);\n      this.setBuilderMode(true);\n    }\n  }, {\n    key: "getData",\n    value: function getData() {\n      return this.dwkitStore.getData();\n    }\n  }, {\n    key: "load",\n    value: function load(code) {\n      var _this$props$getFormFu;\n\n      var data = JSON.parse(JSON.stringify((_this$props$getFormFu = this.props.getFormFunc(code)) !== null && _this$props$getFormFu !== void 0 ? _this$props$getFormFu : {}));\n      this.dwkitStore.setData(data);\n      this.setState({\n        code: code\n      });\n      this.setBuilderMode(true);\n    }\n  }, {\n    key: "download",\n    value: function download() {\n      var filename = (this.props.formName ? this.props.formName : "form") + ".json";\n      var data = this.dwkitStore.getData();\n      var json = JSON.stringify(data, null, 2),\n          blob = new Blob([json], {\n        type: \'octet/stream\'\n      }),\n          encodedUri = window.URL.createObjectURL(blob);\n\n      if (typeof window.navigator.msSaveBlob !== \'undefined\') {\n        window.navigator.msSaveBlob(blob, filename);\n      } else {\n        var link = document.createElement(\'a\');\n        link.setAttribute(\'href\', encodedUri);\n        link.setAttribute(\'download\', filename);\n        document.body.appendChild(link);\n        link.click();\n      }\n    }\n  }, {\n    key: "upload",\n    value: function upload(form, successFunc) {\n      var _this2 = this;\n\n      var file = form.files[0];\n      var reader = new FileReader();\n\n      reader.onload = function () {\n        return function (e) {\n          var data = JSON.parse(e.target.result);\n\n          _this2.dwkitStore.setData(data);\n\n          successFunc && successFunc(data);\n        };\n      }(file);\n\n      reader.readAsText(file);\n    }\n  }, {\n    key: "onChooseFileUpload",\n    value: function onChooseFileUpload() {\n      var button = document.getElementById(\'builderUploadFile\');\n      button.click();\n    }\n  }, {\n    key: "onChangeFileUpload",\n    value: function onChangeFileUpload() {\n      var button = document.getElementById(\'builderUploadSubmit\');\n      button.click();\n    }\n  }, {\n    key: "onUpload",\n    value: function onUpload(e) {\n      e.preventDefault();\n      this.upload(document.getElementById(\'builderUploadFile\'));\n    }\n  }, {\n    key: "onDownload",\n    value: function onDownload(e) {\n      this.download();\n    }\n  }, {\n    key: "scroll",\n    value: function scroll(step) {\n      window.scrollTo(null, window.scrollY + step);\n\n      if (!window.stop) {\n        setTimeout(function () {\n          window.scroll(step);\n        }, 20);\n      }\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      return null;\n    }\n  }, {\n    key: "getCurrentLocalization",\n    value: function getCurrentLocalization() {\n      if (isDefined(this.props.localization)) {\n        return this.props.localization;\n      }\n\n      return src_lang;\n    }\n  }, {\n    key: "getStore",\n    value: function getStore() {\n      return this.dwkitStore;\n    }\n  }]);\n\n  return BaseFormBuilder;\n}(external_react_["Component"]);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/data-loader.js\n\nfunction sendRequest(url, successFunc) {\n  var failFunc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var fetchFunc = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  var init = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  var fn = fetchFunc || fetch_npm_browserify_default.a;\n  return fn(url, init).then(function (response) {\n    var jsonPromise = response.json();\n\n    if (response.ok) {\n      return jsonPromise.then(successFunc);\n    }\n\n    if (failFunc) {\n      return jsonPromise.then(failFunc);\n    }\n\n    console.log(error + \' url: \' + url);\n  })["catch"](function (error) {\n    if (failFunc) {\n      return failFunc(error);\n    }\n\n    console.log(error + \' url: \' + url);\n  });\n}\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/base-form-viewer.js\nfunction base_form_viewer_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { base_form_viewer_typeof = function _typeof(obj) { return typeof obj; }; } else { base_form_viewer_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return base_form_viewer_typeof(obj); }\n\nfunction base_form_viewer_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction base_form_viewer_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { base_form_viewer_ownKeys(Object(source), true).forEach(function (key) { base_form_viewer_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { base_form_viewer_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction base_form_viewer_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction base_form_viewer_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction base_form_viewer_createClass(Constructor, protoProps, staticProps) { if (protoProps) base_form_viewer_defineProperties(Constructor.prototype, protoProps); if (staticProps) base_form_viewer_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction base_form_viewer_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) base_form_viewer_setPrototypeOf(subClass, superClass); }\n\nfunction base_form_viewer_setPrototypeOf(o, p) { base_form_viewer_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return base_form_viewer_setPrototypeOf(o, p); }\n\nfunction base_form_viewer_createSuper(Derived) { var hasNativeReflectConstruct = base_form_viewer_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = base_form_viewer_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = base_form_viewer_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return base_form_viewer_possibleConstructorReturn(this, result); }; }\n\nfunction base_form_viewer_possibleConstructorReturn(self, call) { if (call && (base_form_viewer_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return base_form_viewer_assertThisInitialized(self); }\n\nfunction base_form_viewer_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction base_form_viewer_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction base_form_viewer_getPrototypeOf(o) { base_form_viewer_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return base_form_viewer_getPrototypeOf(o); }\n\nfunction base_form_viewer_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable eqeqeq */\n\n\n\n\n\nvar base_form_viewer_BaseFormViewer = /*#__PURE__*/function (_Component) {\n  base_form_viewer_inherits(BaseFormViewer, _Component);\n\n  var _super = base_form_viewer_createSuper(BaseFormViewer);\n\n  function BaseFormViewer(props) {\n    var _this;\n\n    base_form_viewer_classCallCheck(this, BaseFormViewer);\n\n    _this = _super.call(this, props);\n\n    base_form_viewer_defineProperty(base_form_viewer_assertThisInitialized(_this), "handleChangeErrors", function (e, _ref) {\n      var value = _ref.value;\n\n      _this.setState({\n        errors: value\n      });\n    });\n\n    _this.state = {\n      adaptiveViewType: \'desktop\',\n      model: isDefined(props.model) ? props.model : [],\n      data: isDefined(props.data) ? props.data : \'{}\',\n      errors: isDefined(props.errors) ? props.errors : \'{}\',\n      eventslog: \'\'\n    };\n\n    var me = base_form_viewer_assertThisInitialized(_this);\n\n    if (isDefined(props.modelurl)) {\n      sendRequest(props.modelurl, function (data) {\n        me.setState({\n          model: data\n        });\n      }, null, _this.props.fetchFunc);\n    }\n\n    if (isDefined(props.dataurl)) {\n      sendRequest(props.dataurl, function (data) {\n        var newData = data;\n\n        try {\n          var initial = external_json5_default.a.parse(me.state.data);\n\n          for (var i in initial) {\n            if (newData[i] == undefined) {\n              newData[i] = initial[i];\n            }\n          }\n        } catch (e) {}\n\n        me.setState({\n          data: external_json5_default.a.stringify(newData, null, 4)\n        });\n      }, null, _this.props.fetchFunc);\n    }\n\n    return _this;\n  }\n\n  base_form_viewer_createClass(BaseFormViewer, [{\n    key: "setData",\n    value: function setData(data) {\n      this.setState({\n        data: external_json5_default.a.stringify(data, null, 4)\n      });\n    }\n  }, {\n    key: "getAdditionalDataForControl",\n    value: function getAdditionalDataForControl(control, _ref2, callback) {\n      var startIndex = _ref2.startIndex,\n          pageSize = _ref2.pageSize,\n          filters = _ref2.filters,\n          sort = _ref2.sort,\n          model = _ref2.model;\n\n      if (control.props[\'data-buildertype\'] === \'dictionary\') {\n        setTimeout(function () {\n          var items = [];\n\n          for (var i = 0; i < 500; i++) {\n            var obj = {};\n            obj.key = \'Test_\' + i;\n            obj.text = \'Test_\' + i;\n            obj.value = i;\n            items.push(obj);\n          }\n\n          var res = [];\n          var rowsCount = items.length;\n\n          if (Array.isArray(filters) && filters.length > 0) {\n            var filter = filters[0];\n\n            if (filter.term === \'=\') {\n              for (var _i = 0; _i < items.length; _i++) {\n                if (items[_i].value == filter.value) {\n                  res.push(items[_i]);\n                }\n              }\n            } else if (filter.term === \'in\') {\n              for (var _i2 = 0; _i2 < items.length; _i2++) {\n                for (var j = 0; j < filter.value.length; j++) {\n                  if (items[_i2].value == filter.value[j]) {\n                    res.push(items[_i2]);\n                    break;\n                  }\n                }\n              }\n            } else if (filter.term === \'like\') {\n              var findIndex = 0;\n\n              for (var _i3 = 0; _i3 < items.length; _i3++) {\n                if (items[_i3].text.includes(filter.value)) {\n                  findIndex++;\n\n                  if (findIndex < startIndex) {\n                    continue;\n                  }\n\n                  if (res.length <= pageSize) {\n                    res.push(items[_i3]);\n                  }\n                }\n              }\n\n              callback({\n                items: res,\n                rowsCount: findIndex\n              });\n              return;\n            }\n\n            callback({\n              items: res,\n              rowsCount: res.length\n            });\n            return;\n          } else if (isUndefined(startIndex) || isUndefined(pageSize)) {\n            callback({\n              items: items,\n              rowsCount: rowsCount\n            });\n            return;\n          } else {\n            for (var _i4 = 0; _i4 < pageSize; _i4++) {\n              res.push(items[startIndex + _i4]);\n            }\n          }\n\n          callback({\n            items: res,\n            rowsCount: rowsCount\n          });\n        }, 100);\n      } else if (control.props[\'data-buildertype\'] === \'dictionarytree\') {\n        setTimeout(function () {\n          var items = [];\n\n          for (var i = 0; i < 10; i++) {\n            var obj = {};\n            obj.key = \'Test_\' + i;\n            obj.text = \'Test_\' + i;\n            obj.value = i;\n            obj.children = [];\n\n            for (var j = 0; j < 10; j++) {\n              var child = {};\n              child.key = obj.key + \'_\' + j;\n              child.text = obj.key + \'_\' + j;\n              child.value = j;\n              obj.children.push(child);\n            }\n\n            items.push(obj);\n          }\n\n          callback({\n            items: items,\n            rowsCount: items.length\n          });\n        });\n      } else if (control.props[\'data-buildertype\'] === \'workflowbar\') {\n        callback({\n          commands: [{\n            value: \'approve\',\n            type: \'1\',\n            text: \'Approve\'\n          }, {\n            value: \'back\',\n            type: \'2\',\n            text: \'Back\'\n          }],\n          states: [{\n            value: \'draft\',\n            text: \'Draft\'\n          }, {\n            value: \'state1\',\n            text: \'State 1\'\n          }, {\n            value: \'state2\',\n            text: \'State 2\'\n          }, {\n            value: \'final\',\n            text: \'Final\'\n          }]\n        });\n      } else {\n        setTimeout(function () {\n          var rowsCount = 100;\n          var items = [];\n\n          var _loop = function _loop(i) {\n            var obj = {};\n\n            if (isUndefined(control.props.columns)) {\n              obj[\'col1\'] = \'col1_\' + (Number(startIndex) + Number(i));\n              obj[\'col2\'] = \'col2_\' + (Number(startIndex) + Number(i));\n              obj[\'col3\'] = \'col3_\' + (Number(startIndex) + Number(i));\n            } else {\n              control.props.columns.forEach(function (c) {\n                obj[c.key] = c.key + \'_\' + (Number(startIndex) + Number(i));\n              });\n            }\n\n            items.push(obj);\n          };\n\n          for (var i = 0; i < pageSize; i++) {\n            _loop(i);\n          }\n\n          callback({\n            startIndex: startIndex,\n            pageSize: pageSize,\n            rowsCount: rowsCount,\n            items: items\n          });\n        }, 100);\n      }\n    }\n  }, {\n    key: "eventFunc",\n    value: function eventFunc(p) {\n      p.syntheticEvent = undefined;\n      p.component = undefined;\n      p.controlRef = undefined;\n      p.sourceEvent = undefined;\n      var eventslog = this.state.eventslog;\n      var sep = \'\';\n\n      if (eventslog.length > 0) {\n        sep = \'\\n\';\n      }\n\n      eventslog = new Date().toLocaleTimeString() + \': \' + external_json5_default.a.stringify(base_form_viewer_objectSpread(base_form_viewer_objectSpread({}, p), {}, {\n        e: undefined,\n        sourceControlRef: undefined\n      })) + sep + eventslog;\n      this.setState({\n        eventslog: eventslog\n      });\n\n      if (p.actions.includes("initSystem") && p.parameters && p.parameters["initialData"]) {\n        this.setState({\n          data: external_json5_default.a.stringify(p.parameters["initialData"], null, 4)\n        });\n      }\n    }\n  }, {\n    key: "getModel",\n    value: function getModel() {\n      return this.state.model;\n    }\n  }, {\n    key: "setModel",\n    value: function setModel(model) {\n      this.setState({\n        model: model\n      });\n    }\n  }, {\n    key: "formDataChaged",\n    value: function formDataChaged(form, _ref3) {\n      var key = _ref3.key,\n          value = _ref3.value;\n      this.setState({\n        data: external_json5_default.a.stringify(form.state.data, null, 4)\n      });\n    }\n  }, {\n    key: "handleChange",\n    value: function handleChange(e, _ref4) {\n      var value = _ref4.value;\n      this.setState({\n        data: value\n      });\n    }\n  }, {\n    key: "handleChangeModel",\n    value: function handleChangeModel(e, _ref5) {\n      var value = _ref5.value;\n      this.setState({\n        model: value\n      });\n    }\n  }]);\n\n  return BaseFormViewer;\n}(external_react_["Component"]);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/base-preview.js\nfunction base_preview_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { base_preview_typeof = function _typeof(obj) { return typeof obj; }; } else { base_preview_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return base_preview_typeof(obj); }\n\nfunction base_preview_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction base_preview_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction base_preview_createClass(Constructor, protoProps, staticProps) { if (protoProps) base_preview_defineProperties(Constructor.prototype, protoProps); if (staticProps) base_preview_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction base_preview_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) base_preview_setPrototypeOf(subClass, superClass); }\n\nfunction base_preview_setPrototypeOf(o, p) { base_preview_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return base_preview_setPrototypeOf(o, p); }\n\nfunction base_preview_createSuper(Derived) { var hasNativeReflectConstruct = base_preview_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = base_preview_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = base_preview_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return base_preview_possibleConstructorReturn(this, result); }; }\n\nfunction base_preview_possibleConstructorReturn(self, call) { if (call && (base_preview_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return base_preview_assertThisInitialized(self); }\n\nfunction base_preview_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction base_preview_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction base_preview_getPrototypeOf(o) { base_preview_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return base_preview_getPrototypeOf(o); }\n\n\n\n\nvar base_preview_BasePreview = /*#__PURE__*/function (_Component) {\n  base_preview_inherits(BasePreview, _Component);\n\n  var _super = base_preview_createSuper(BasePreview);\n\n  function BasePreview(props) {\n    var _this;\n\n    base_preview_classCallCheck(this, BasePreview);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      data: [],\n      editElement: null //buildermode: props.buildermode || true\n\n    };\n    return _this;\n  }\n\n  base_preview_createClass(BasePreview, [{\n    key: "componentDidMount",\n    value: function componentDidMount() {\n      this.props.dwkitStore.listen(this.dataChanged.bind(this));\n    }\n  }, {\n    key: "dataChanged",\n    value: function dataChanged(data) {\n      this.setState({\n        data: data,\n        editElement: null\n      });\n    }\n  }, {\n    key: "_onEdit",\n    value: function _onEdit(item) {\n      this.props.builderActions.showEditForm(item.key);\n    }\n  }, {\n    key: "_onCopy",\n    value: function _onCopy(item) {\n      this.props.dwkitStore.copy(item);\n    }\n  }, {\n    key: "_onDestroy",\n    value: function _onDestroy(item) {\n      this.props.dwkitStore.remove(item);\n    }\n  }, {\n    key: "_handleEvent",\n    value: function _handleEvent(p) {// if(console != undefined){\n      //   console.log("DWKitFormBuilder: handleEvent", p);\n      // }\n    }\n  }, {\n    key: "getPreview",\n    value: function getPreview() {\n      var me = this;\n\n      function getDropzone(key, dropzoneText) {\n        return me.props.dwKitControls.createBuilderDropzone(key, undefined, undefined, dropzoneText);\n      }\n\n      var items = this.props.dwKitControls.createControls(this, {\n        model: this.state.data,\n        data: undefined,\n        buildermode: this.props.buildermode,\n        eventOnEdit: this._onEdit.bind(this),\n        eventOnDelete: this._onDestroy.bind(this),\n        eventOnCopy: this._onCopy.bind(this),\n        parentItem: undefined,\n        handleEvent: this._handleEvent.bind(this),\n        getFormFunc: this.props.getFormFunc,\n        getFormFist: this.props.getFormFist,\n        getAdditionalDataForControl: this.props.getAdditionalDataForControl,\n        disableRefs: true,\n        downloadUrl: this.props.downloadUrl,\n        uploadUrl: this.props.uploadUrl,\n        controlsToReplace: [],\n        needCheckReplace: false,\n        externalControlRender: this.props.externalControlRender,\n        externalControlList: this.props.externalControlList\n      });\n      var dropzoneText = undefined;\n\n      if (isDefined(this.props.localization) && isDefined(this.props.localization.preview)) {\n        dropzoneText = this.props.localization.preview.dropzonetext;\n      }\n\n      var dropzoneHeader = getDropzone(\'dropzone_header\', dropzoneText);\n      var dropzoneFooter = items.length > 0 ? getDropzone(\'dropzone_footer\', dropzoneText) : null;\n      return {\n        dropzoneHeader: dropzoneHeader,\n        dropzoneFooter: dropzoneFooter,\n        items: items\n      };\n    }\n  }]);\n\n  return BasePreview;\n}(external_react_["Component"]);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/base-toolbar.js\nfunction base_toolbar_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { base_toolbar_typeof = function _typeof(obj) { return typeof obj; }; } else { base_toolbar_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return base_toolbar_typeof(obj); }\n\nfunction base_toolbar_toConsumableArray(arr) { return base_toolbar_arrayWithoutHoles(arr) || base_toolbar_iterableToArray(arr) || base_toolbar_unsupportedIterableToArray(arr) || base_toolbar_nonIterableSpread(); }\n\nfunction base_toolbar_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction base_toolbar_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return base_toolbar_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return base_toolbar_arrayLikeToArray(o, minLen); }\n\nfunction base_toolbar_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\n\nfunction base_toolbar_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return base_toolbar_arrayLikeToArray(arr); }\n\nfunction base_toolbar_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction base_toolbar_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction base_toolbar_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction base_toolbar_createClass(Constructor, protoProps, staticProps) { if (protoProps) base_toolbar_defineProperties(Constructor.prototype, protoProps); if (staticProps) base_toolbar_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction base_toolbar_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) base_toolbar_setPrototypeOf(subClass, superClass); }\n\nfunction base_toolbar_setPrototypeOf(o, p) { base_toolbar_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return base_toolbar_setPrototypeOf(o, p); }\n\nfunction base_toolbar_createSuper(Derived) { var hasNativeReflectConstruct = base_toolbar_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = base_toolbar_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = base_toolbar_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return base_toolbar_possibleConstructorReturn(this, result); }; }\n\nfunction base_toolbar_possibleConstructorReturn(self, call) { if (call && (base_toolbar_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return base_toolbar_assertThisInitialized(self); }\n\nfunction base_toolbar_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction base_toolbar_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction base_toolbar_getPrototypeOf(o) { base_toolbar_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return base_toolbar_getPrototypeOf(o); }\n\n/* eslint-disable no-useless-escape */\n\n\n\n\nvar base_toolbar_BaseToolbar = /*#__PURE__*/function (_Component) {\n  base_toolbar_inherits(BaseToolbar, _Component);\n\n  var _super = base_toolbar_createSuper(BaseToolbar);\n\n  function BaseToolbar(props) {\n    var _this;\n\n    base_toolbar_classCallCheck(this, BaseToolbar);\n\n    _this = _super.call(this, props);\n    _this.state = {};\n    return _this;\n  }\n\n  base_toolbar_createClass(BaseToolbar, [{\n    key: "onDoubleClick",\n    value: function onDoubleClick(item) {\n      this.props.builderActions.add(item);\n    }\n  }, {\n    key: "onExpand",\n    value: function onExpand(item, value) {\n      item.isexpanded = value;\n      this.setCookie(\'toolbar_\' + item.key, value);\n      this.forceUpdate();\n    }\n  }, {\n    key: "getCookie",\n    value: function getCookie(name) {\n      var matches = document.cookie.match(new RegExp(\'(?:^|; )\' + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, \'\\\\$1\') + \'=([^;]*)\'));\n      return matches ? decodeURIComponent(matches[1]) : undefined;\n    }\n  }, {\n    key: "setCookie",\n    value: function setCookie(name, value, options) {\n      options = options || {};\n      var expires = options.expires;\n\n      if (typeof expires == \'number\' && expires) {\n        var d = new Date();\n        d.setTime(d.getTime() + expires * 1000);\n        expires = options.expires = d;\n      }\n\n      if (expires && expires.toUTCString) {\n        options.expires = expires.toUTCString();\n      }\n\n      value = encodeURIComponent(value);\n      var updatedCookie = name + \'=\' + value;\n\n      for (var propName in options) {\n        updatedCookie += \'; \' + propName;\n        var propValue = options[propName];\n\n        if (propValue !== true) {\n          updatedCookie += \'=\' + propValue;\n        }\n      }\n\n      document.cookie = updatedCookie;\n    }\n  }], [{\n    key: "getDerivedStateFromProps",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var externalControlsOnly = nextProps.externalControlsOnly;\n\n      if (externalControlsOnly !== true && externalControlsOnly !== false) {\n        externalControlsOnly = dwKitExternalControlsOnly();\n      }\n\n      var items = [];\n\n      if (!externalControlsOnly) {\n        items = base_toolbar_toConsumableArray(nextProps.dwKitControls.getItems());\n      }\n\n      if (Array.isArray(nextProps.templates) && nextProps.templates.length > 0) {\n        items.push({\n          key: \'sepTemplates\',\n          title: \'Templates\',\n          isseparate: true,\n          defaultopen: false\n        });\n        nextProps.templates.forEach(function (template) {\n          items.push({\n            key: template,\n            builderType: \'customblock\',\n            title: template,\n            control: undefined,\n            editControl: nextProps.editControl,\n            defaultValues: {\n              formname: template,\n              sourceType: \'form\'\n            }\n          });\n        });\n      }\n\n      var externalControls = nextProps.externalControlList || dwKitExternalControlList();\n\n      if (externalControls) {\n        items = items.concat(externalControls);\n      }\n\n      function makeLocalization(items, props) {\n        if (!props.localization) {\n          return;\n        }\n\n        var local = props.localization;\n\n        for (var i = 0; i < items.length; i++) {\n          if (isDefined(local[items[i].key])) {\n            items[i].title = local[items[i].key];\n          }\n        }\n      }\n\n      makeLocalization(items, nextProps);\n      var stateDelta = {\n        items: items\n      };\n      return stateDelta;\n    }\n  }]);\n\n  return BaseToolbar;\n}(external_react_["Component"]);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/component-item-registry.js\nfunction component_item_registry_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction component_item_registry_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction component_item_registry_createClass(Constructor, protoProps, staticProps) { if (protoProps) component_item_registry_defineProperties(Constructor.prototype, protoProps); if (staticProps) component_item_registry_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction component_item_registry_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Components registry\n */\nvar ItemRegistry = /*#__PURE__*/function () {\n  function ItemRegistry() {\n    component_item_registry_classCallCheck(this, ItemRegistry);\n\n    component_item_registry_defineProperty(this, "items", []);\n  }\n\n  component_item_registry_createClass(ItemRegistry, [{\n    key: "registerItems",\n    value: function registerItems(components) {\n      component_item_registry_registry.items = components;\n    }\n  }, {\n    key: "getItems",\n    value: function getItems() {\n      return component_item_registry_registry.items;\n    }\n  }]);\n\n  return ItemRegistry;\n}();\n\nvar component_item_registry_registry = new ItemRegistry();\nvar registerItems = component_item_registry_registry.registerItems;\nvar getItems = component_item_registry_registry.getItems;\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/dropzone-context.js\n\nvar DropzoneContext = /*#__PURE__*/external_react_default.a.createContext({\n  visible: false\n});\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/dwkit-const.js\nfunction dwkit_const_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction dwkit_const_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar DWKitConst = function DWKitConst() {\n  dwkit_const_classCallCheck(this, DWKitConst);\n};\n\ndwkit_const_defineProperty(DWKitConst, "regexForReplace", /{\\S[A-z,0-9,_,-,.,:, ,/]+?}/gm);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/timeout.js\nfunction timeout_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction timeout_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction timeout_createClass(Constructor, protoProps, staticProps) { if (protoProps) timeout_defineProperties(Constructor.prototype, protoProps); if (staticProps) timeout_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar timeoutsIdNameMap = {};\n\nvar Timeout = /*#__PURE__*/function () {\n  function Timeout() {\n    timeout_classCallCheck(this, Timeout);\n  }\n\n  timeout_createClass(Timeout, null, [{\n    key: "Set",\n    value: function Set(name, callback, delay) {\n      if (timeoutsIdNameMap.hasOwnProperty(name)) {\n        clearTimeout(timeoutsIdNameMap[name]);\n      }\n\n      timeoutsIdNameMap[name] = setTimeout(callback, delay);\n    }\n  }, {\n    key: "Clear",\n    value: function Clear(name) {\n      if (timeoutsIdNameMap.hasOwnProperty(name)) {\n        clearTimeout(timeoutsIdNameMap[name]);\n        delete timeoutsIdNameMap[name];\n      }\n    }\n  }]);\n\n  return Timeout;\n}();\n\n\n// EXTERNAL MODULE: ../optimajet-builder-shared/node_modules/abortcontroller-polyfill/dist/abortcontroller-polyfill-only.js\nvar abortcontroller_polyfill_only = __webpack_require__(24);\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/dwkit-form.js\nfunction dwkit_form_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { dwkit_form_typeof = function _typeof(obj) { return typeof obj; }; } else { dwkit_form_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return dwkit_form_typeof(obj); }\n\nvar _excluded = ["children", "placeholders"];\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction dwkit_form_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction dwkit_form_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { dwkit_form_ownKeys(Object(source), true).forEach(function (key) { dwkit_form_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { dwkit_form_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction dwkit_form_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction dwkit_form_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction dwkit_form_createClass(Constructor, protoProps, staticProps) { if (protoProps) dwkit_form_defineProperties(Constructor.prototype, protoProps); if (staticProps) dwkit_form_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction dwkit_form_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) dwkit_form_setPrototypeOf(subClass, superClass); }\n\nfunction dwkit_form_setPrototypeOf(o, p) { dwkit_form_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return dwkit_form_setPrototypeOf(o, p); }\n\nfunction dwkit_form_createSuper(Derived) { var hasNativeReflectConstruct = dwkit_form_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = dwkit_form_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = dwkit_form_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return dwkit_form_possibleConstructorReturn(this, result); }; }\n\nfunction dwkit_form_possibleConstructorReturn(self, call) { if (call && (dwkit_form_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return dwkit_form_assertThisInitialized(self); }\n\nfunction dwkit_form_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction dwkit_form_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction dwkit_form_getPrototypeOf(o) { dwkit_form_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return dwkit_form_getPrototypeOf(o); }\n\nfunction dwkit_form_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable eqeqeq */\n\n/* eslint-disable react/no-direct-mutation-state */\n\n\n\n\n\n\n\n\n\nvar dwkit_form_isEqual = __webpack_require__(7);\n\nvar dwkit_form_DWKitFormAbstract = /*#__PURE__*/function (_Component) {\n  dwkit_form_inherits(DWKitFormAbstract, _Component);\n\n  var _super = dwkit_form_createSuper(DWKitFormAbstract);\n\n  function DWKitFormAbstract(props) {\n    var _this;\n\n    dwkit_form_classCallCheck(this, DWKitFormAbstract);\n\n    _this = _super.call(this, props);\n\n    dwkit_form_defineProperty(dwkit_form_assertThisInitialized(_this), "_asyncGetData", null);\n\n    dwkit_form_defineProperty(dwkit_form_assertThisInitialized(_this), "_asyncGetModel", null);\n\n    dwkit_form_defineProperty(dwkit_form_assertThisInitialized(_this), "handleEvent", function (_ref) {\n      var e = _ref.e,\n          key = _ref.key,\n          propertyName = _ref.propertyName,\n          eventName = _ref.eventName,\n          parameters = _ref.parameters,\n          name = _ref.name,\n          value = _ref.value,\n          additionalValues = _ref.additionalValues;\n\n      var me = dwkit_form_assertThisInitialized(_this);\n\n      var isOnchange = eventName === \'onChange\';\n\n      if (isOnchange) {\n        if (!_this.props.onlyExternalDataChanged) {\n          var _this2, _this2$stateBackup;\n\n          if (_this.state.data === undefined) {\n            _this.state.data = {};\n          }\n\n          var pn = propertyName ? propertyName : key;\n          var data = _this.state.data;\n          data[pn] = value;\n\n          var _checkConditions = Object(formdata["checkConditions"])({\n            data: data,\n            model: _this.state.model\n          }),\n              hideControls = _checkConditions.hideControls;\n\n          (_this2$stateBackup = (_this2 = _this).stateBackup) !== null && _this2$stateBackup !== void 0 ? _this2$stateBackup : _this2.stateBackup = {};\n          hideControls === null || hideControls === void 0 ? void 0 : hideControls.forEach(function (key) {\n            if (isDefined(data[key])) {\n              _this.stateBackup[key] = data[key];\n              delete data[key];\n            }\n          });\n          Object.keys(_this.stateBackup).forEach(function (key) {\n            if (!(hideControls !== null && hideControls !== void 0 && hideControls.includes(key))) {\n              data[key] = _this.stateBackup[key];\n              delete _this.stateBackup[key];\n            }\n          });\n\n          _this.setState({\n            data: data\n          });\n        }\n\n        if (_this.props.dataChanged !== undefined) {\n          _this.props.dataChanged(dwkit_form_assertThisInitialized(_this), {\n            key: key,\n            propertyName: propertyName,\n            value: value,\n            additionalValues: additionalValues\n          });\n        }\n\n        _this.onConditions(key, eventName, parameters, name, value);\n      }\n\n      if (_this.props.eventFunc === undefined) {\n        return;\n      }\n\n      var item = _this.findModelItembyKey(key);\n\n      if (item === undefined) {\n        return;\n      }\n\n      if (item.events !== undefined && item.events[eventName] !== undefined && item.events[eventName].active) {\n        item.events = Object(formdata["updateEventsFormat"])(item.events);\n        var event = item.events[eventName];\n\n        var eventParameters = dwkit_form_objectSpread({}, parameters);\n\n        if (Array.isArray(event.triggers) && event.triggers.length > 0) {\n          event.triggers.forEach(function (trigger) {\n            if (Array.isArray(trigger.parameters) && trigger.parameters.length > 0) {\n              trigger.parameters.forEach(function (p) {\n                if (typeof p.value === \'string\') {\n                  eventParameters[p.name] = p.value.replace(DWKitConst.regexForReplace, function (m) {\n                    return me.applySubstitution(m, parameters ? parameters.row : undefined, me.state.data);\n                  });\n                } else {\n                  eventParameters[p.name] = p.value;\n                }\n              });\n            }\n\n            var sourceControl = me.findRefs(key);\n            var sourceControlValue = value;\n            var fireEvent;\n\n            if (Array.isArray(trigger.targets) && trigger.targets.length > 0) {\n              fireEvent = function fireEvent() {\n                return trigger.targets.forEach(function (t) {\n                  me.props.eventFunc({\n                    key: t,\n                    sourceControlRef: sourceControl,\n                    sourceControlValue: sourceControlValue,\n                    controlRef: me.findRefs(t),\n                    formName: me.props.formName,\n                    component: me,\n                    eventName: eventName,\n                    actions: trigger.actions,\n                    parameters: eventParameters\n                  });\n                });\n              };\n            } else {\n              fireEvent = function fireEvent() {\n                return me.props.eventFunc({\n                  key: key,\n                  sourceControlRef: sourceControl,\n                  sourceControlValue: sourceControlValue,\n                  controlRef: sourceControl,\n                  formName: me.props.formName,\n                  component: me,\n                  eventName: eventName,\n                  actions: trigger.actions,\n                  parameters: eventParameters\n                });\n              };\n            }\n\n            if (!isOnchange || item.onChangeTimeout === undefined || item.onChangeTimeout === \'\' || Number(item.onChangeTimeout) < 1) {\n              fireEvent();\n            } else {\n              Timeout.Set(key, fireEvent, Number(item.onChangeTimeout));\n            }\n          });\n        }\n      }\n    });\n\n    _this.state = {\n      data: props.data,\n      model: props.model,\n      extendedData: props.extendedData,\n      controlsToReplace: null,\n      adaptiveViewType: _this.getAdaptiveViewType()\n    };\n\n    _this.checkConditions(_this.state.model);\n\n    _this.checkLoadedState(_this.state.data, _this.state.model, true);\n\n    _this.abortController = new AbortController();\n    _this.abortSignal = _this.abortController.signal;\n    return _this;\n  }\n\n  dwkit_form_createClass(DWKitFormAbstract, [{\n    key: "createControls",\n    value: function createControls() {\n      throw new Error(\'Function createControls must be implemented in ancestor!\');\n    }\n  }, {\n    key: "componentDidMount",\n    value: function componentDidMount() {\n      this.PrepareState();\n    }\n  }, {\n    key: "componentDidUpdate",\n    value: function componentDidUpdate(prevProps, prevState) {\n      this.PrepareState();\n\n      if (!dwkit_form_isEqual(prevState.errors, this.state.errors)) {\n        var _this$props$handleCha, _this$props;\n\n        (_this$props$handleCha = (_this$props = this.props).handleChangeErrors) === null || _this$props$handleCha === void 0 ? void 0 : _this$props$handleCha.call(_this$props, this.state.errors);\n      }\n    }\n  }, {\n    key: "componentWillUnmount",\n    value: function componentWillUnmount() {\n      if (this._asyncGetData || this._asyncGetModel) {\n        this.abortController.abort();\n      }\n    }\n  }, {\n    key: "PrepareState",\n    value: function PrepareState() {\n      var me = this;\n\n      if (this.state.needFetchModel) {\n        me.setState({\n          needFetchModel: false\n        });\n        this._asyncGetModel = sendRequest(this.state.modelurl, function (data) {\n          me._asyncGetModel = null;\n          me.modelChanged(data);\n        }, function (err) {\n          me._asyncGetModel = null;\n          me.handleErrEvent(err);\n        }, this.props.fetchFunc, {\n          signal: this.abortSignal\n        });\n      }\n\n      if (this.state.needFetchData) {\n        me.setState({\n          needFetchData: false\n        });\n        this._asyncGetData = sendRequest(this.state.modelurl, function (data) {\n          me._asyncGetData = null;\n          me.dataChanged(data);\n        }, function (err) {\n          me._asyncGetData = null;\n          me.handleErrEvent(err);\n        }, this.props.fetchFunc, {\n          signal: this.abortSignal\n        });\n      }\n\n      this.checkConditions(this.state.model);\n      this.checkLoadedState(this.state.data, this.state.model);\n    }\n  }, {\n    key: "modelChanged",\n    value: function modelChanged(model) {\n      this.setState({\n        model: model,\n        controlsToReplace: null\n      });\n      this.checkConditions(model);\n    }\n  }, {\n    key: "dataChanged",\n    value: function dataChanged(data) {\n      this.setState({\n        data: data\n      });\n      this.checkLoadedState(data, this.state.model);\n    }\n  }, {\n    key: "checkLoadedState",\n    value: function checkLoadedState(data, model, blockSetState) {\n      // if(this.state.filter !== this.props.filter){\n      //     this.state.isLoaded = false;\n      // }\n      if (!this.state.isLoaded && isEmptyObj(data) && model !== null && model !== void 0 && model.length) {\n        var initialData = {};\n        Object(formdata["initDefaultState"])({\n          model: model,\n          data: initialData\n        });\n        this.state.data = initialData;\n      }\n\n      if (!this.state.isLoaded && !isEmptyObj(data) && model !== null && model !== void 0 && model.length) {\n        var _this$props2;\n\n        if (blockSetState) {\n          this.state.isLoaded = true; //this.state.filter = this.props.filter;\n        } else {\n          this.setState({\n            isLoaded: true\n          }); //filter: this.props.filter\n        }\n\n        var _initialData = dwkit_form_objectSpread({}, data);\n\n        Object(formdata["initDefaultState"])({\n          model: model,\n          data: _initialData\n        });\n        this === null || this === void 0 ? void 0 : (_this$props2 = this.props) === null || _this$props2 === void 0 ? void 0 : _this$props2.eventFunc({\n          key: undefined,\n          controlRef: this,\n          formName: this.props.formName,\n          component: this,\n          eventName: \'init\',\n          actions: [\'initSystem\', \'init\'],\n          parameters: {\n            initialData: _initialData\n          }\n        });\n      }\n    } //handle event must be arrow function, otherwise \'this\' won\'t work correctly\n\n  }, {\n    key: "findRefs",\n    value: function findRefs(key, targetRefs) {\n      if (!targetRefs) targetRefs = this.refs;\n      if (!targetRefs) return undefined;\n      var control = targetRefs[key];\n\n      if (!control) {\n        for (var r in targetRefs) {\n          if (targetRefs[r].refs) control = this.findRefs(key, targetRefs[r].refs);\n          if (control) break;\n        }\n      }\n\n      return control;\n    }\n  }, {\n    key: "checkConditions",\n    value: function checkConditions(model) {\n      this.state.enableCheckConditions = dwkit_form_hasConditions(model);\n    }\n  }, {\n    key: "onConditions",\n    value: function onConditions(key, eventName, parameters, name, value) {\n      if (this.state.enableCheckConditions) {\n        if (this.props.autoCheckConditions && this.state.enableCheckConditions) {\n          var res = Object(formdata["checkConditions"])({\n            data: this.state.data,\n            model: this.state.model\n          });\n          this.setState({\n            hideControls: res.hideControls,\n            readOnlyControls: res.readOnlyControls\n          });\n        } else {\n          this.props.eventFunc({\n            key: key,\n            controlRef: this.findRefs(key),\n            formName: this.props.formName,\n            component: this,\n            eventName: eventName,\n            actions: ["checkConditions"],\n            parameters: parameters\n          });\n        }\n      }\n    }\n  }, {\n    key: "handleErrEvent",\n    value: function handleErrEvent(message) {\n      if (this.props.eventErrFunc) {\n        this.props.eventErrFunc(this, message);\n      }\n    }\n  }, {\n    key: "findModelItembyKey",\n    value: function findModelItembyKey(key, array) {\n      if (array === undefined) {\n        array = this.state.model;\n      }\n\n      for (var i = 0; i < array.length; i++) {\n        if (array[i].key === key) {\n          return array[i];\n        }\n\n        if (array[i].children !== undefined) {\n          var item = this.findModelItembyKey(key, array[i].children);\n\n          if (item !== undefined) {\n            return item;\n          }\n        }\n\n        if (array[i].placeholders !== undefined) {\n          for (var ph in array[i].placeholders) {\n            var _item = this.findModelItembyKey(key, array[i].placeholders[ph]);\n\n            if (_item !== undefined) {\n              return _item;\n            }\n          }\n        }\n\n        if (array[i][\'data-buildertype\'] === \'customblock\' && array[i].sourceType === \'source\' && array[i].source != undefined) {\n          var children = external_json5_default.a.parse(array[i].source);\n\n          var _item2 = this.findModelItembyKey(key, children);\n\n          if (_item2 !== undefined) {\n            return _item2;\n          }\n        }\n\n        if (array[i][\'data-buildertype\'] === \'customblock\' && array[i].sourceType === \'form\' && array[i].formname !== undefined && array[i].formname !== \'\') {\n          var _this$props$getFormFu;\n\n          var _children = array[i].children ? array[i].children : JSON.parse(JSON.stringify((_this$props$getFormFu = this.props.getFormFunc(array[i].formname)) !== null && _this$props$getFormFu !== void 0 ? _this$props$getFormFu : {}));\n\n          var _item3 = this.findModelItembyKey(key, _children);\n\n          if (_item3 !== undefined) {\n            return _item3;\n          }\n        }\n      }\n\n      return undefined;\n    }\n  }, {\n    key: "getAdaptiveViewType",\n    value: function getAdaptiveViewType() {\n      // mobile first\n      return \'mobile\';\n    }\n  }, {\n    key: "handleResize",\n    value: function handleResize() {\n      var viewType = this.getAdaptiveViewType();\n\n      if (this.state.adaptiveViewType !== viewType) {\n        this.setState({\n          adaptiveViewType: viewType\n        });\n      }\n    }\n  }, {\n    key: "applySubstitution",\n    value: function applySubstitution(m, row, data) {\n      var value = m;\n\n      if (row !== undefined && row !== null) {\n        if (m.slice(1, 5) == \'row.\') {\n          value = row[m.slice(5, m.length - 1)];\n\n          if (value === null || value === undefined) {\n            return \'\';\n          } else {\n            return value;\n          }\n        }\n      }\n\n      if (data !== undefined && data !== null) {\n        value = data[m.slice(1, m.length - 1)];\n\n        if (value === null || value === undefined) {\n          return \'\';\n        }\n      }\n\n      return value;\n    }\n  }], [{\n    key: "getDerivedStateFromProps",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var stateDelta = {};\n\n      if (nextProps.adaptiveViewType && prevState.adaptiveViewType !== nextProps.adaptiveViewType) {\n        stateDelta.adaptiveViewType = nextProps.adaptiveViewType;\n      }\n\n      if (nextProps.modelurl !== undefined && nextProps.modelurl !== \'\' && nextProps.modelurl !== prevState.modelurl) {\n        stateDelta.modelurl = nextProps.modelurl;\n        stateDelta.needFetchModel = true;\n      }\n\n      var enableCheckConditions = prevState.enableCheckConditions; //TODO add json equal?\n\n      if (nextProps.model !== undefined && nextProps.model !== prevState.model) {\n        stateDelta.controlsToReplace = null;\n        stateDelta.model = nextProps.model;\n        enableCheckConditions = dwkit_form_hasConditions(nextProps.model);\n      }\n\n      if (nextProps.dataurl !== undefined && nextProps.dataurl !== \'\' && nextProps.dataurl !== prevState.dataurl) {\n        stateDelta.dataurl = nextProps.dataurl;\n        stateDelta.needFetchData = true;\n      }\n\n      if (nextProps.data !== undefined) {\n        stateDelta.data = nextProps.data;\n\n        if (nextProps.autoCheckConditions && enableCheckConditions) {\n          var res = Object(formdata["checkConditions"])({\n            data: stateDelta.data,\n            model: stateDelta.model ? stateDelta.model : prevState.model\n          });\n          stateDelta.hideControls = res.hideControls;\n          stateDelta.readOnlyControls = res.readOnlyControls;\n        }\n\n        if (nextProps.autoValidate) {\n          var res = Object(formdata["validate"])({\n            data: stateDelta.data,\n            model: stateDelta.model ? stateDelta.model : prevState.model\n          });\n\n          if (!res.valid) {\n            stateDelta.errors = res.errors;\n\n            if (nextProps.errors) {\n              for (var filed in nextProps.errors) {\n                stateDelta.errors[filed] = nextProps.errors[filed];\n              }\n            }\n          } else {\n            stateDelta.errors = undefined;\n          }\n        }\n      }\n\n      if (nextProps.objectId !== prevState.objectId) {\n        stateDelta.objectId = nextProps.objectId;\n        stateDelta.isLoaded = false;\n      }\n\n      return stateDelta;\n    }\n  }]);\n\n  return DWKitFormAbstract;\n}(external_react_["Component"]);\n\n\n\nvar dwkit_form_hasConditions = function hasConditions(model) {\n  var _model$some;\n\n  return !!(model !== null && model !== void 0 && (_model$some = model.some) !== null && _model$some !== void 0 && _model$some.call(model, function (_ref2) {\n    var children = _ref2.children,\n        placeholders = _ref2.placeholders,\n        item = _objectWithoutProperties(_ref2, _excluded);\n\n    return !!(item[\'other-visibleConition\'] || item[\'other-readOnlyConition\']) || hasConditions(children) || values(placeholders).some(hasConditions);\n  }));\n};\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/edit-form.js\nfunction edit_form_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { edit_form_typeof = function _typeof(obj) { return typeof obj; }; } else { edit_form_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return edit_form_typeof(obj); }\n\nfunction edit_form_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction edit_form_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction edit_form_createClass(Constructor, protoProps, staticProps) { if (protoProps) edit_form_defineProperties(Constructor.prototype, protoProps); if (staticProps) edit_form_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction edit_form_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) edit_form_setPrototypeOf(subClass, superClass); }\n\nfunction edit_form_setPrototypeOf(o, p) { edit_form_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return edit_form_setPrototypeOf(o, p); }\n\nfunction edit_form_createSuper(Derived) { var hasNativeReflectConstruct = edit_form_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = edit_form_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = edit_form_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return edit_form_possibleConstructorReturn(this, result); }; }\n\nfunction edit_form_possibleConstructorReturn(self, call) { if (call && (edit_form_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return edit_form_assertThisInitialized(self); }\n\nfunction edit_form_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction edit_form_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction edit_form_getPrototypeOf(o) { edit_form_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return edit_form_getPrototypeOf(o); }\n\n\n\n\n\nvar edit_form_EditForm = /*#__PURE__*/function (_Component) {\n  edit_form_inherits(EditForm, _Component);\n\n  var _super = edit_form_createSuper(EditForm);\n\n  function EditForm(props) {\n    var _this;\n\n    edit_form_classCallCheck(this, EditForm);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      key: undefined,\n      item: undefined,\n      open: false\n    };\n    return _this;\n  }\n\n  edit_form_createClass(EditForm, [{\n    key: "componentDidMount",\n    value: function componentDidMount() {\n      this.props.dwkitStore.listenTo(this.props.builderActions.showEditForm, this.onShow.bind(this));\n    }\n  }, {\n    key: "handleChange",\n    value: function handleChange(e, _ref) {\n      var name = _ref.name,\n          value = _ref.value,\n          checked = _ref.checked;\n      var data = this.state.item;\n      var initData = Object.assign({}, data);\n\n      if (isUndefined(value)) {\n        data[name] = checked;\n      } else {\n        data[name] = value;\n      } // For Tab and CollectionEditor controls\n      // Remove unused placeholders if bounded pane or column was deleted\n\n\n      if (data["data-buildertype"] === \'tab\' && data.placeholders != null || data["data-buildertype"] === \'collectioneditor\' && data.placeholders != null) {\n        var _loop = function _loop(placeholder) {\n          if (Object.prototype.hasOwnProperty.call(data.placeholders, placeholder)) {\n            var shouldBeDeleted = true; // Condition for Tab-control\n\n            if (data.panes != null) {\n              data.panes.forEach(function (pane) {\n                if (placeholder === pane.psid) {\n                  shouldBeDeleted = false;\n                }\n              });\n            } //Condition for CollectionEditor-control\n\n\n            if (data.columns != null) {\n              data.columns.forEach(function (column) {\n                if (placeholder === column.key && column.control === \'custom\') {\n                  shouldBeDeleted = false;\n                }\n              });\n            }\n\n            if (shouldBeDeleted) {\n              delete data.placeholders[placeholder];\n            }\n          }\n        };\n\n        for (var placeholder in data.placeholders) {\n          _loop(placeholder);\n        }\n      }\n\n      this.setState({\n        item: data\n      });\n    }\n  }, {\n    key: "onShow",\n    value: function onShow(key) {\n      var data = this.props.dwkitStore.getByKey(key);\n      var item = {};\n\n      for (var i in data) {\n        if (edit_form_typeof(data[i]) === \'object\') {\n          item[i] = JSON.parse(JSON.stringify(data[i]));\n        } else {\n          item[i] = data[i];\n        }\n      }\n\n      this.setState({\n        key: key,\n        item: item,\n        open: true\n      });\n    }\n  }, {\n    key: "isChangedItem",\n    value: function isChangedItem() {\n      var data = this.props.dwkitStore.getByKey(this.state.key);\n      var item = this.state.item;\n\n      for (var i in item) {\n        if (JSON.stringify(item[i]) !== JSON.stringify(data[i])) {\n          if (i === \'events\' && (isUndefined(item[i]) || JSON.stringify(item[i]) === \'{}\') && (isUndefined(data[i]) || JSON.stringify(data[i]) === \'{}\')) {\n            continue;\n          } else {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: "getControlsList",\n    value: function getControlsList() {\n      return this.props.dwkitStore.getAllKeys(this.props.dwkitStore.getData());\n    }\n  }, {\n    key: "showConfirm",\n    value: function showConfirm(text, confirmHandle) {\n      this.setState({\n        confirm: true,\n        confirmtext: text,\n        confirmHandle: confirmHandle\n      });\n    }\n  }, {\n    key: "onClose",\n    value: function onClose() {\n      var ischanged = this.isChangedItem();\n\n      if (ischanged) {\n        var msg = \'Close without save?\';\n\n        if (isDefined(this.props.localization)) {\n          msg = this.props.localization.base.closewithoutsavequestion;\n        }\n\n        this.showConfirm(msg, this.onCloseConfirmed.bind(this));\n      } else {\n        this.onCloseConfirmed();\n      }\n    }\n  }, {\n    key: "onSave",\n    value: function onSave() {\n      this.props.dwkitStore.updateItemByKey(this.state.key, this.state.item);\n      this.onCloseConfirmed();\n\n      if (this.state.item[\'data-buildertype\'] === \'gridlayout\') {\n        setTimeout(function () {\n          if (typeof Event === \'function\') {\n            window.dispatchEvent(new Event(\'resize\'));\n          } else {\n            var evt = window.document.createEvent(\'UIEvents\');\n            evt.initUIEvent(\'resize\', true, false, window, 0);\n            window.dispatchEvent(evt);\n          }\n        }, 100);\n      }\n    }\n  }, {\n    key: "onCloseConfirmed",\n    value: function onCloseConfirmed() {\n      this.setState({\n        open: false,\n        confirm: false\n      });\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      var _this2 = this;\n\n      return draw(\'edit-form\', {\n        confirmHandleCancel: function confirmHandleCancel() {\n          return _this2.setState({\n            confirm: false\n          });\n        },\n        dwKitControls: this.props.dwKitControls,\n        parent: this,\n        props: this.props,\n        onClose: this.onClose.bind(this),\n        onSave: this.onSave.bind(this),\n        state: this.state\n      });\n    }\n  }]);\n\n  return EditForm;\n}(external_react_["Component"]);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/structure-converter.js\nfunction structure_converter_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction structure_converter_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction structure_converter_createClass(Constructor, protoProps, staticProps) { if (protoProps) structure_converter_defineProperties(Constructor.prototype, protoProps); if (staticProps) structure_converter_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction initPush(arrayName, obj, toPush) {\n  if (obj[arrayName] === undefined) {\n    obj[arrayName] = [];\n  }\n\n  obj[arrayName].push(toPush);\n}\n\nfunction multiInitPush(arrayName, obj, toPushArray) {\n  var len;\n  len = toPushArray.length;\n\n  if (obj[arrayName] === undefined) {\n    obj[arrayName] = [];\n  }\n\n  while (len-- > 0) {\n    obj[arrayName].push(toPushArray.shift());\n  }\n}\n\nvar StructureConverter = /*#__PURE__*/function () {\n  function StructureConverter(config) {\n    structure_converter_classCallCheck(this, StructureConverter);\n\n    this.config = config = config || {};\n    this.config.id = config.id || \'id\';\n    this.config.parent = config.parent || \'parent\';\n    this.config.children = config.children || \'nodes\';\n    this.config.options = config.options || {\n      deleteParent: false\n    };\n  }\n\n  structure_converter_createClass(StructureConverter, [{\n    key: "toNested",\n    value: function toNested(flat, rootNodeId) {\n      var i, len, temp, roots, id, parent, pendingChildOf, flatEl;\n      i = 0;\n      roots = [];\n      temp = {};\n      pendingChildOf = {};\n\n      for (i, len = flat.length; i < len; i++) {\n        flatEl = flat[i];\n        id = flatEl[this.config.id];\n        parent = flatEl[this.config.parent];\n        temp[id] = flatEl;\n\n        if (parent === rootNodeId) {\n          roots.push(flatEl);\n        } else {\n          if (temp[parent] !== undefined) {\n            // Parent is already in temp, adding the current object to its children array.\n            initPush(this.config.children, temp[parent], flatEl);\n          } else {\n            // Parent for this object is not yet in temp, adding it to pendingChildOf.\n            initPush(parent, pendingChildOf, flatEl);\n          }\n        }\n\n        if (this.config.options.deleteParent) {\n          delete flatEl[this.config.parent];\n        }\n\n        if (pendingChildOf[id] !== undefined) {\n          // Current object has children pending for it. Adding these to the object.\n          multiInitPush(this.config.children, flatEl, pendingChildOf[id]);\n        }\n      }\n\n      return roots;\n    }\n  }]);\n\n  return StructureConverter;\n}();\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/src/web-form.jsx\nfunction web_form_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { web_form_typeof = function _typeof(obj) { return typeof obj; }; } else { web_form_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return web_form_typeof(obj); }\n\nfunction web_form_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction web_form_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction web_form_createClass(Constructor, protoProps, staticProps) { if (protoProps) web_form_defineProperties(Constructor.prototype, protoProps); if (staticProps) web_form_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = web_form_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction web_form_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) web_form_setPrototypeOf(subClass, superClass); }\n\nfunction web_form_setPrototypeOf(o, p) { web_form_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return web_form_setPrototypeOf(o, p); }\n\nfunction web_form_createSuper(Derived) { var hasNativeReflectConstruct = web_form_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = web_form_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = web_form_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return web_form_possibleConstructorReturn(this, result); }; }\n\nfunction web_form_possibleConstructorReturn(self, call) { if (call && (web_form_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return web_form_assertThisInitialized(self); }\n\nfunction web_form_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction web_form_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction web_form_getPrototypeOf(o) { web_form_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return web_form_getPrototypeOf(o); }\n\n\n\nvar DWKitWebForm = /*#__PURE__*/function (_DWKitFormAbstract) {\n  web_form_inherits(DWKitWebForm, _DWKitFormAbstract);\n\n  var _super = web_form_createSuper(DWKitWebForm);\n\n  function DWKitWebForm() {\n    web_form_classCallCheck(this, DWKitWebForm);\n\n    return _super.apply(this, arguments);\n  }\n\n  web_form_createClass(DWKitWebForm, [{\n    key: "componentDidMount",\n    value: function componentDidMount() {\n      _get(web_form_getPrototypeOf(DWKitWebForm.prototype), "componentDidMount", this).call(this);\n\n      window.addEventListener && window.addEventListener(\'resize\', this.handleResize.bind(this));\n    }\n  }, {\n    key: "componentWillUnmount",\n    value: function componentWillUnmount() {\n      _get(web_form_getPrototypeOf(DWKitWebForm.prototype), "componentWillUnmount", this).call(this);\n\n      window.removeEventListener && window.removeEventListener(\'resize\', this.handleResize.bind(this));\n    }\n  }, {\n    key: "getItemsForRender",\n    value: function getItemsForRender() {\n      var controlsToReplace = [];\n      var needCheckReplace = false;\n\n      if (this.state.model !== null && this.state.model !== undefined) {\n        controlsToReplace = this.state.controlsToReplace === null ? [] : this.state.controlsToReplace;\n        needCheckReplace = this.state.controlsToReplace === null;\n      }\n\n      var items = this.createControls(this, {\n        model: this.state.model,\n        data: this.state.data,\n        errors: this.state.errors ? this.state.errors : this.props.errors,\n        handleEvent: this.handleEvent,\n        getFormFunc: this.props.getFormFunc,\n        getAdditionalDataForControl: this.props.getAdditionalDataForControl,\n        hideControls: this.props.autoCheckConditions ? this.state.hideControls : this.props.hideControls,\n        readOnlyControls: this.props.autoCheckConditions ? this.state.readOnlyControls : this.props.readOnlyControls,\n        readOnly: this.props.readOnly,\n        uploadUrl: this.props.uploadUrl,\n        downloadUrl: this.props.downloadUrl,\n        extendedData: this.props.extendedData,\n        controlsToReplace: controlsToReplace,\n        needCheckReplace: needCheckReplace,\n        externalControlRender: this.props.externalControlRender,\n        externalControlList: this.props.externalControlList,\n        adaptiveViewType: this.props.adaptiveViewType ? this.props.adaptiveViewType : this.state.adaptiveViewType\n      });\n\n      if (needCheckReplace) {\n        this.state.controlsToReplace = controlsToReplace;\n      }\n\n      return items;\n    }\n  }, {\n    key: "getAdaptiveViewType",\n    value: function getAdaptiveViewType() {\n      if (window.matchMedia && window.matchMedia(\'(max-width: 997px)\').matches) {\n        return \'mobile\';\n      }\n\n      return \'desktop\';\n    }\n  }]);\n\n  return DWKitWebForm;\n}(dwkit_form_DWKitFormAbstract);\n\n\n// CONCATENATED MODULE: ../optimajet-builder-shared/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// EXTERNAL MODULE: external "semantic-ui-react"\nvar external_semantic_ui_react_ = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/collection/collection-checkbox.jsx\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n\n\n\nregister(\'collection-checkbox\', function (options) {\n  var props = {};\n\n  if (options.props.errorFlag) {\n    props.className = "error";\n  }\n\n  return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Checkbox"], _extends({}, props, {\n    name: options.props.colName,\n    checked: options.props.checked,\n    readOnly: options.props.readOnly,\n    onChange: options.me.handleChange\n  }));\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/collection/collection-custom-control.jsx\n\nregister(\'collection-custom-control\', function (options) {\n  var model = options.props.model;\n  return options.props.createControl(options.props.parent, model[\'data-buildertype\'], {\n    model: model,\n    data: options.props.row,\n    errors: options.props.errorOnRow,\n    parentItem: options.props.name,\n    buildermode: options.props.buildermode,\n    handleEvent: options.handleEvent,\n    getAdditionalDataForControl: options.getAdditionalDataForControl,\n    readOnly: options.props.readOnly,\n    uploadUrl: options.props.uploadUrl,\n    downloadUrl: options.props.downloadUrl,\n    controlsToReplace: [],\n    formData: options.props.data,\n    adaptiveViewType: options.props.adaptiveViewType\n  }, options.props.controlBarParams);\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/collection/collection-date-time.jsx\n\n\nregister(\'collection-date-time\', function (options) {\n  return /*#__PURE__*/external_react_default.a.createElement(date_picker_DatePicker, {\n    name: options.props.colName,\n    error: options.props.errorFlag,\n    value: options.props.value,\n    readOnly: options.props.readOnly,\n    onChange: options.me.handleChange,\n    type: options.props.type,\n    isForm: true\n  });\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/collection/collection-dropdown.jsx\n\n\n\nregister(\'collection-dropdown\', function (options) {\n  return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Dropdown"], {\n    name: options.props.colName,\n    multiple: options.props.multiple,\n    placeholder: options.props.placeholder,\n    options: options.props.options,\n    error: options.props.errorFlag,\n    value: options.props.value,\n    readOnly: options.props.readOnly,\n    onChange: options.me.handleChange,\n    selection: true,\n    fluid: true,\n    search: true\n  });\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/collection/collection-editor.jsx\nfunction collection_editor_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction collection_editor_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { collection_editor_ownKeys(Object(source), true).forEach(function (key) { collection_collection_editor_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { collection_editor_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction collection_collection_editor_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction collection_collection_editor_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { collection_collection_editor_typeof = function _typeof(obj) { return typeof obj; }; } else { collection_collection_editor_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return collection_collection_editor_typeof(obj); }\n\n\n\n\nregister(\'collection-editor\', function (options) {\n  var _options$state$data;\n\n  function getDragColumn(rows, i) {\n    var draggable = !options.props.readOnly && Boolean(options.props.draggable);\n\n    if (draggable) {\n      return /*#__PURE__*/external_react_default.a.createElement("div", {\n        draggable: draggable,\n        onDragStart: options.onDragStart.bind(options.me, i, rows),\n        onDragEnd: options.onDragEnd.bind(options.me, i, rows),\n        onDragOver: options.onDragOver.bind(options.me),\n        onDrop: options.onDrop.bind(options.me, i, rows),\n        key: "celldrag",\n        className: "dwkit-collectioneditor-action"\n      }, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Icon"], {\n        onClick: options.onExpand.bind(options.me, i, false),\n        name: "ellipsis vertical"\n      }));\n    }\n\n    return undefined;\n  }\n\n  function renderHeaderRow(columns) {\n    var res = [];\n    var index = 0;\n    columns.forEach(function (c) {\n      var key;\n      var title;\n      var width;\n      var dataListOptions = undefined;\n\n      if (collection_collection_editor_typeof(c) === \'object\') {\n        key = c.key;\n        title = c.name;\n        width = c.width;\n\n        if (Array.isArray(c.dataList)) {\n          dataListOptions = c.dataList;\n        }\n      } else {\n        key = c;\n        title = c;\n      }\n\n      if (isDefined(title) && title.length >= 2) {\n        title = title.charAt(0).toUpperCase() + title.slice(1);\n      }\n\n      var dataListControl;\n      var dataListId = undefined;\n\n      if (isDefined(dataListOptions) && dataListOptions != null) {\n        dataListId = key + \'_datalist\';\n        var optValue = [];\n        dataListOptions.forEach(function (o) {\n          optValue.push( /*#__PURE__*/external_react_default.a.createElement("option", {\n            key: o,\n            value: o\n          }));\n        });\n        dataListControl = /*#__PURE__*/external_react_default.a.createElement("datalist", {\n          key: dataListId,\n          id: dataListId\n        }, optValue);\n      }\n\n      var display = index == 0 ? {\n        display: \'flex\'\n      } : {};\n      res.push( /*#__PURE__*/external_react_default.a.createElement("td", {\n        key: index,\n        style: collection_editor_objectSpread({\n          width: width\n        }, display)\n      }, title, dataListControl));\n      index++;\n    });\n    var showAdd = options.props.disableAdd !== true;\n    var showCopy = options.props.disableCopy !== true;\n    var showDelete = options.props.disableDelete !== true;\n\n    if (!options.props.readOnly && (showAdd || showCopy || showDelete)) {\n      var addContent = \'Add\';\n      var adminLangCollectionEditor = dwKitAdminLangCollectionEditor();\n\n      if (isDefined(adminLangCollectionEditor)) {\n        addContent = adminLangCollectionEditor.add;\n      }\n\n      res.push( /*#__PURE__*/external_react_default.a.createElement("td", {\n        key: "btntd",\n        className: "dwkit-collectioneditor-buttoncol"\n      }, showAdd && /*#__PURE__*/external_react_default.a.createElement("a", {\n        key: "btnadd",\n        className: "dwkit-btn",\n        onClick: options.btnAdd\n      }, addContent)));\n    }\n\n    return /*#__PURE__*/external_react_default.a.createElement("tr", {\n      key: "headertr",\n      className: "dwkit-collectioneditor-header"\n    }, res);\n  }\n\n  function renderRows(columns, data, errors, parentIdValue, level, prefix) {\n    var me = options.me;\n    var res = [];\n    if (data == undefined) return res;\n    var rows = data;\n\n    if (isUndefined(level)) {\n      level = 0;\n    }\n\n    if (prefix === undefined) {\n      prefix = \'\';\n    }\n\n    if (options.props.filter) {\n      rows = options.getFilteredItems(rows, options.props.filter);\n    }\n\n    for (var i = 0; i < rows.length; i++) {\n      if (options.props.childrenField === undefined && options.props.hierarchical) {\n        if (rows[i][options.props.parentIdField] != parentIdValue) {\n          continue;\n        }\n      }\n\n      var dragcol = getDragColumn(rows, i);\n      var expand = undefined;\n      var children = undefined;\n      var rowKey = rows[i][options.props.idField] || rows[i]["__id"] || i;\n\n      if (options.props.hierarchical) {\n        var icon = void 0;\n        var parentPrefix = prefix + String(i + \'_\');\n\n        if (isNotEmptyString(options.props.parentIdField)) {\n          var parentId = rows[i][options.props.idField] || rows[i][\'__id\'];\n\n          if (isNotEmptyString(parentId)) {\n            children = renderRows(columns, data, errors, parentId, level + 1, parentPrefix);\n\n            if (children.length > 0) {\n              var isexpanded = options.state.expanded[prefix + i];\n\n              if (isUndefined(isexpanded) || isexpanded) {\n                icon = /*#__PURE__*/external_react_default.a.createElement("img", {\n                  onClick: options.onExpand.bind(options.me, prefix + i, false),\n                  className: "dwkit-collectioneditor-imgbutton-collapse"\n                });\n              } else {\n                icon = /*#__PURE__*/external_react_default.a.createElement("img", {\n                  onClick: options.onExpand.bind(options.me, prefix + i, true),\n                  className: "dwkit-collectioneditor-imgbutton-expand"\n                });\n                children = undefined;\n              }\n            }\n          }\n        } else if (Array.isArray(rows[i][options.props.childrenField]) && rows[i][options.props.childrenField].length > 0) {\n          children = renderRows(columns, rows[i][options.props.childrenField], errors, undefined, level + 1, parentPrefix);\n\n          if (children.length > 0) {\n            var _isexpanded = options.state.expanded[prefix + i];\n\n            if (isUndefined(_isexpanded) || _isexpanded) {\n              icon = /*#__PURE__*/external_react_default.a.createElement("img", {\n                onClick: options.onExpand.bind(options.me, prefix + i, false),\n                className: "dwkit-collectioneditor-imgbutton-collapse"\n              });\n            } else {\n              icon = /*#__PURE__*/external_react_default.a.createElement("img", {\n                onClick: options.onExpand.bind(options.me, prefix + i, true),\n                className: "dwkit-collectioneditor-imgbutton-expand"\n              });\n              children = undefined;\n            }\n          }\n        } else {\n          icon = /*#__PURE__*/external_react_default.a.createElement("img", {\n            style: {\n              opacity: 0\n            },\n            className: "dwkit-collectioneditor-imgbutton-collapse"\n          });\n        }\n\n        expand = /*#__PURE__*/external_react_default.a.createElement("div", {\n          className: "dwkit-collectioneditor-action"\n        }, icon);\n      }\n\n      var row = [];\n      var errorOnRow = undefined;\n\n      if (Array.isArray(errors) && errors.length > 0) {\n        //let check what kind of errors we have\n        var errorsHaveId = errors[0].__id !== undefined && errors[0].__id !== null;\n\n        if (errorsHaveId) {\n          (function () {\n            //TODO id comparison\n            var rowId = rows[i].__id;\n\n            if (rowId !== undefined && rowId != null) {\n              errorOnRow = errors.find(function (e) {\n                return e.__id === rowId;\n              });\n            }\n          })();\n        } else {\n          errorOnRow = errors[i];\n        }\n      }\n\n      for (var j = 0; j < columns.length; j++) {\n        var colName = void 0;\n        var control = options.props.readOnly ? \'\' : \'input\';\n        var dataListId = undefined;\n        var customControl = undefined;\n        var opts = undefined;\n\n        if (collection_collection_editor_typeof(columns[j]) === \'object\') {\n          colName = columns[j].key;\n          control = columns[j].control;\n          customControl = columns[j].customControl;\n\n          if (Array.isArray(columns[j].dataList)) {\n            dataListId = colName + \'_datalist\';\n          }\n\n          if (Array.isArray(columns[j].options)) {\n            opts = columns[j].options;\n          }\n        } else {\n          colName = columns[j];\n        }\n\n        var errorFlag = undefined;\n\n        if (isDefined(errorOnRow)) {\n          errorFlag = Boolean(errorOnRow[colName]);\n        }\n\n        var cellStyle = {};\n\n        if (j === 0 && (dragcol || options.props.hierarchical)) {\n          cellStyle.display = \'flex\';\n        }\n\n        var element = undefined;\n\n        if (control === \'checkbox\') {\n          element = /*#__PURE__*/external_react_default.a.createElement(checkbox_control_CheckboxControl, {\n            key: rowKey + \'_\' + j,\n            row: rows[i],\n            handleChange: options.handleChange,\n            colName: colName,\n            checked: rows[i][colName],\n            errorFlag: errorFlag,\n            readOnly: options.props.readOnly\n          });\n        } else if (control === \'span\') {\n          cellStyle.verticalAlign = \'middle\';\n          element = /*#__PURE__*/external_react_default.a.createElement("span", {\n            key: rowKey + \'_\' + j,\n            name: colName\n          }, rows[i][colName]);\n        } else if (control === \'number\') {\n          var value = rows[i][colName] === null || rows[i][colName] === undefined ? \'\' : rows[i][colName];\n          var inputProps = {\n            name: colName,\n            type: \'number\',\n            error: errorFlag,\n            value: value,\n            readOnly: options.props.readOnly\n          };\n          element = /*#__PURE__*/external_react_default.a.createElement(input_control_InputControl, {\n            key: rowKey + \'_\' + j,\n            row: rows[i],\n            inputProps: inputProps,\n            handleChange: options.handleChange\n          });\n        } else if (control === \'date\') {\n          var _value = rows[i][colName] === null || rows[i][colName] === undefined ? \'\' : rows[i][colName];\n\n          element = /*#__PURE__*/external_react_default.a.createElement(date_time_control_DateTimeControl, {\n            key: rowKey + \'_\' + j,\n            row: rows[i],\n            colName: colName,\n            value: _value,\n            errorFlag: errorFlag,\n            readOnly: options.props.readOnly,\n            handleChange: options.handleChange,\n            type: "date"\n          });\n        } else if (control === \'datetime\') {\n          var _value2 = rows[i][colName] === null || rows[i][colName] === undefined ? \'\' : rows[i][colName];\n\n          element = /*#__PURE__*/external_react_default.a.createElement(date_time_control_DateTimeControl, {\n            key: rowKey + \'_\' + j,\n            row: rows[i],\n            colName: colName,\n            value: _value2,\n            errorFlag: errorFlag,\n            readOnly: options.props.readOnly,\n            handleChange: options.handleChange,\n            type: "datetime"\n          });\n        } else if (control === \'dropdown\') {\n          var _value3 = rows[i][colName] == null ? columns[j].multiple ? [] : \'\' : rows[i][colName];\n\n          element = /*#__PURE__*/external_react_default.a.createElement(dropdown_control_DropdownControl, {\n            key: rowKey + \'_\' + j,\n            row: rows[i],\n            colName: colName,\n            multiple: columns[j].multiple,\n            placeholder: columns[j].placeholder,\n            errorFlag: errorFlag,\n            value: _value3,\n            options: opts,\n            readOnly: options.props.readOnly,\n            handleChange: options.handleChange\n          });\n        } else if (control === \'file\' || control === \'file2\') {\n          var _value4 = rows[i][colName] === null || rows[i][colName] === undefined ? \'\' : rows[i][colName];\n\n          element = /*#__PURE__*/external_react_default.a.createElement(upload_control_UploadControl, {\n            key: rowKey + \'_\' + j,\n            row: rows[i],\n            colName: colName,\n            errorFlag: errorFlag,\n            value: _value4,\n            readOnly: options.props.readOnly,\n            handleChange: options.handleChange,\n            downloadUrl: options.props.downloadUrl,\n            uploadUrl: options.props.uploadUrl,\n            control: control,\n            additionalData: columns[j].additionalData,\n            handleEvent: options.props.handleEvent\n          });\n        } else if (control === \'camera\') {\n          var _value5 = rows[i][colName] === null || rows[i][colName] === undefined ? \'\' : rows[i][colName];\n\n          element = /*#__PURE__*/external_react_default.a.createElement(camera_control_CameraControl, {\n            key: rowKey + \'_\' + j,\n            row: rows[i],\n            colName: colName,\n            errorFlag: errorFlag,\n            value: _value5,\n            readOnly: options.props.readOnly,\n            handleChange: options.handleChange,\n            downloadUrl: options.props.downloadUrl,\n            uploadUrl: options.props.uploadUrl,\n            control: control,\n            additionalData: columns[j].additionalData\n          });\n        } else if (control === \'signature\') {\n          var _value6 = rows[i][colName] === null || rows[i][colName] === undefined ? \'\' : rows[i][colName];\n\n          element = /*#__PURE__*/external_react_default.a.createElement(signature_control_SignatureControl, {\n            key: rowKey + \'_\' + j,\n            row: rows[i],\n            colName: colName,\n            errorFlag: errorFlag,\n            value: _value6,\n            readOnly: options.props.readOnly,\n            handleChange: options.handleChange,\n            downloadUrl: options.props.downloadUrl,\n            uploadUrl: options.props.uploadUrl,\n            control: control,\n            additionalData: columns[j].additionalData\n          });\n        } else if (control === \'custom\') {\n          if (customControl) {\n            (function () {\n              var value = rows[i][colName] ? rows[i][colName] : \'\';\n              var initProps = {};\n\n              if (columns[j].customControlGetPropsFunc) {\n                initProps = columns[j].customControlGetPropsFunc(rows[i]);\n              }\n\n              var customControlProps = collection_editor_objectSpread(collection_editor_objectSpread({}, initProps), {}, {\n                key: rowKey + \'_\' + j,\n                name: colName,\n                error: errorFlag,\n                value: value,\n                colName: colName,\n                row: rows[i],\n                readOnly: options.props.readOnly,\n                onChange: function onChange(e, data) {\n                  me.handleChange(customControlProps.row, e, data);\n                }\n              });\n\n              element = /*#__PURE__*/external_react_default.a.createElement(customControl, customControlProps);\n            })();\n          } else if (isDefined(options.props.placeholders) && Array.isArray(options.props.placeholders[colName]) && options.props.placeholders[colName].length > 0) {\n            var model = options.props.placeholders[colName][0];\n\n            if (model) {\n              var _row = rows[i];\n\n              if (model.propertyName === undefined || model.propertyName === \'\') {\n                model.propertyName = colName;\n              }\n\n              cellStyle.position = "relative";\n              element = /*#__PURE__*/external_react_default.a.createElement(custom_control_CustomControl, {\n                key: rowKey + "_" + j,\n                model: model,\n                parent: options.me,\n                row: _row,\n                errorOnRow: errorOnRow,\n                name: options.props.name,\n                buildermode: options.props.buildermode,\n                handleChange: options.handleChange,\n                handleEvent: options.props.handleEvent,\n                getAdditionalDataForControl: options.props.getAdditionalDataForControl,\n                readOnly: options.props.readOnly,\n                uploadUrl: options.props.uploadUrl,\n                downloadUrl: options.props.downloadUrl,\n                data: options.props.data,\n                adaptiveViewType: options.props.adaptiveViewType,\n                controlBarParams: options.props.controlBarParams,\n                createControl: options.props.createControl\n              });\n            }\n          } else if (options.props.buildermode && options.props.createBuilderDropzone) {\n            element = options.props.createBuilderDropzone(options.props.name, options.props.name, undefined, colName, colName);\n          }\n        } else {\n          var _value7 = rows[i][colName] === null || rows[i][colName] === undefined ? \'\' : rows[i][colName];\n\n          var _inputProps = {\n            name: colName,\n            list: dataListId,\n            error: errorFlag,\n            value: _value7,\n            readOnly: options.props.readOnly\n          };\n          element = /*#__PURE__*/external_react_default.a.createElement(input_control_InputControl, {\n            key: rowKey + \'_\' + j,\n            row: rows[i],\n            inputProps: _inputProps,\n            handleChange: options.handleChange\n          });\n        }\n\n        if (j === 0) {\n          if (level) {\n            cellStyle.paddingLeft = String(level * 15 + 5) + \'px\';\n          }\n\n          row.push( /*#__PURE__*/external_react_default.a.createElement("td", {\n            key: rowKey + \'_\' + j + \'td\',\n            style: cellStyle\n          }, expand, dragcol, element));\n        } else {\n          row.push( /*#__PURE__*/external_react_default.a.createElement("td", {\n            key: rowKey + \'_\' + j + \'td\',\n            style: cellStyle\n          }, element));\n        }\n      }\n\n      if (!options.props.readOnly) {\n        var showAdd = !options.props.disableAdd;\n        var showCopy = !options.props.disableCopy;\n        var showDelete = !options.props.disableDelete;\n\n        if (showAdd || showCopy || showDelete) {\n          if (options.props.hierarchical) {\n            row.push( /*#__PURE__*/external_react_default.a.createElement("td", {\n              key: "celldelete",\n              className: "dwkit-collectioneditor-cellbtn"\n            }, /*#__PURE__*/external_react_default.a.createElement("div", {\n              className: "field"\n            }, showAdd && /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Icon"], {\n              key: "addchild",\n              onClick: options.btnAddChild.bind(options.me, i, rows),\n              link: true,\n              name: "add"\n            }), showCopy && /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Icon"], {\n              key: "copy",\n              onClick: options.btnCopy.bind(options.me, i, rows),\n              link: true,\n              name: "copy"\n            }), showDelete && /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Icon"], {\n              key: "delete",\n              onClick: options.btnDelete.bind(options.me, i, rows),\n              link: true,\n              name: "delete"\n            }))));\n          } else {\n            row.push( /*#__PURE__*/external_react_default.a.createElement("td", {\n              key: "celldelete",\n              className: "dwkit-collectioneditor-cellbtn"\n            }, /*#__PURE__*/external_react_default.a.createElement("div", {\n              className: "field"\n            }, showCopy && /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Icon"], {\n              key: "copy",\n              onClick: options.btnCopy.bind(options.me, i, undefined),\n              link: true,\n              name: "copy"\n            }), showDelete && /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Icon"], {\n              key: "delete",\n              onClick: options.btnDelete.bind(options.me, i, undefined),\n              link: true,\n              name: "delete"\n            }))));\n          }\n        }\n      }\n\n      res.push( /*#__PURE__*/external_react_default.a.createElement("tr", {\n        key: prefix + rowKey,\n        className: "dwkit-collectioneditor-row",\n        "data-rowindex": i\n      }, row));\n      res = res.concat(children);\n    }\n\n    return res;\n  }\n\n  var columns = options.props.columns;\n  var data = options.props.value;\n  var error = options.props.error;\n\n  if (options.props.collapseAll && Array.isArray(data)) {\n    options.applyCollapseAll(data);\n  }\n\n  if (!columns || !columns.length) {\n    return /*#__PURE__*/external_react_default.a.createElement("div", null, "Fill columns property!");\n  }\n\n  var controlProps = {\n    style: options.props.style,\n    className: options.props.className,\n    onBlur: options.props.onBlur,\n    onClick: options.props.onClick,\n    onFocus: options.props.onFocus,\n    onMouseEnter: options.props.onMouseEnter,\n    onMouseLeave: options.props.onMouseLeave\n  };\n\n  if (controlProps.className) {\n    controlProps.className += \' field\';\n  } else {\n    controlProps.className = \'field\';\n  }\n\n  if (options.props.error && collection_collection_editor_typeof(options.props.error) !== \'object\') {\n    controlProps.className += \' error\';\n  }\n\n  controlProps.className += \' dwkit-collectioneditor-control\';\n  return /*#__PURE__*/external_react_default.a.createElement("div", controlProps, /*#__PURE__*/external_react_default.a.createElement("label", null, options.props.label), /*#__PURE__*/external_react_default.a.createElement("table", {\n    className: "dwkit-collectioneditor"\n  }, /*#__PURE__*/external_react_default.a.createElement("tbody", null, (!options.props.hideHeaderWhenEmptyData || !!((_options$state$data = options.state.data) !== null && _options$state$data !== void 0 && _options$state$data.length)) && renderHeaderRow(columns), renderRows(columns, options.state.data, error))));\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/collection/collection-input.jsx\nfunction collection_input_extends() { collection_input_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return collection_input_extends.apply(this, arguments); }\n\n\n\n\nregister(\'collection-input\', function (options) {\n  return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Input"], collection_input_extends({}, options.props.inputProps, {\n    onChange: options.me.handleChange\n  }));\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/collection/collection-upload.jsx\n\n\nregister(\'collection-upload\', function (options) {\n  return /*#__PURE__*/external_react_default.a.createElement(upload_Upload, {\n    name: options.props.colName,\n    error: options.props.errorFlag,\n    value: options.props.value,\n    readOnly: options.props.readOnly,\n    onChange: options.me.handleChange,\n    downloadUrl: options.props.downloadUrl,\n    uploadUrl: options.props.uploadUrl,\n    additionalData: options.props.additionalData,\n    me: options.me,\n    isForm: true,\n    hideClearButton: options.props.control === \'file2\',\n    handleEvent: options.props.handleEvent\n  });\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/collection/collection-camera.jsx\n\n\nregister(\'collection-camera\', function (options) {\n  return /*#__PURE__*/external_react_default.a.createElement(camera_Camera, {\n    name: options.props.colName,\n    error: options.props.errorFlag,\n    value: options.props.value,\n    readOnly: options.props.readOnly,\n    onChange: options.me.handleChange,\n    downloadUrl: options.props.downloadUrl,\n    uploadUrl: options.props.uploadUrl,\n    additionalData: options.props.additionalData,\n    compact: true,\n    showPreview: true,\n    hideClear: true,\n    fluid: true,\n    isForm: true,\n    compression: 0.75\n  });\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/collection/collection-signature.jsx\n\n\nregister(\'collection-signature\', function (options) {\n  return /*#__PURE__*/external_react_default.a.createElement(signature_Signature, {\n    name: options.props.colName,\n    error: options.props.errorFlag,\n    value: options.props.value,\n    readOnly: options.props.readOnly,\n    onChange: options.me.handleChange,\n    downloadUrl: options.props.downloadUrl,\n    uploadUrl: options.props.uploadUrl,\n    additionalData: options.props.additionalData,\n    compact: true,\n    showPreview: true,\n    fluid: true,\n    isForm: true\n  });\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/breadcrumb.jsx\nfunction breadcrumb_extends() { breadcrumb_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return breadcrumb_extends.apply(this, arguments); }\n\n\n\n\nregister(\'breadcrumb\', function (options) {\n  var items = [];\n\n  for (var i = 0; i < options.children.length; i++) {\n    var child = options.children[i];\n\n    if (child.isDivider) {\n      items.push( /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Breadcrumb"].Divider, child.dividerProps));\n    } else {\n      items.push( /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Breadcrumb"].Section, child.childProps, child.text));\n    }\n  }\n\n  return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Breadcrumb"], breadcrumb_extends({}, options.propsControl, {\n    children: items\n  }));\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/style-helper.js\nfunction getDisplayStyle(visible) {\n  if (visible === true) {\n    return {};\n  }\n\n  return {\n    display: \'none\'\n  };\n}\n\n\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/builder-dropzone.jsx\n\n\n\n\nregister(\'builder-dropzone\', function (options) {\n  function getDz(visible) {\n    return /*#__PURE__*/external_react_default.a.createElement("div", {\n      name: options.key,\n      key: options.key,\n      elementafter: options.elementAfter,\n      elementtoinsert: options.elementToInsert,\n      placeholderkey: options.placeholderKey,\n      className: "dwkit-formbuilder-zone",\n      style: getDisplayStyle(visible)\n    }, options.text);\n  }\n\n  return /*#__PURE__*/external_react_default.a.createElement(DropzoneContext.Consumer, {\n    key: options.key + \'_dropzone\'\n  }, function (_ref) {\n    var visible = _ref.visible;\n    return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Popup"], {\n      trigger: getDz(visible),\n      onClose: options.onClosePopup,\n      content: /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["TextArea"], {\n        rows: "10",\n        width: "200px",\n        onChange: options.onChangeDZ,\n        placeholder: "Insert a model control"\n      }),\n      on: "click"\n    });\n  });\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/button.jsx\n\n\n\nregister(\'button\', function (options) {\n  if (options.propsControl.link) {\n    options.propsControl.style.cursor = "pointer";\n    return /*#__PURE__*/external_react_default.a.createElement("a", options.propsControl, options.propsControl.content);\n  } else {\n    if (options.propsControl.isForm) {\n      return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Button, options.propsControl);\n    }\n\n    return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Button"], options.propsControl);\n  }\n});\n// EXTERNAL MODULE: ./node_modules/react-html5-camera-photo/build/index.js\nvar build = __webpack_require__(14);\n\n// CONCATENATED MODULE: ./src/components/semantic-web/LoadingSpinner.jsx\n\n\n\nvar LoadingSpinner_LoadingSpinner = function LoadingSpinner(props) {\n  return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Dimmer"], {\n    active: true,\n    inverted: true\n  }, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Loader"], props));\n};\n\nvar LoadingSpinner_LoadingWrapper = function LoadingWrapper(props) {\n  return /*#__PURE__*/external_react_default.a.createElement("div", props, props.children, props.isLoading && /*#__PURE__*/external_react_default.a.createElement(LoadingSpinner_LoadingSpinner, null));\n};\n\n\n// CONCATENATED MODULE: ./src/components/semantic-web/UploadedImage.jsx\nfunction UploadedImage_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { UploadedImage_typeof = function _typeof(obj) { return typeof obj; }; } else { UploadedImage_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return UploadedImage_typeof(obj); }\n\nfunction UploadedImage_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction UploadedImage_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction UploadedImage_createClass(Constructor, protoProps, staticProps) { if (protoProps) UploadedImage_defineProperties(Constructor.prototype, protoProps); if (staticProps) UploadedImage_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction UploadedImage_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) UploadedImage_setPrototypeOf(subClass, superClass); }\n\nfunction UploadedImage_setPrototypeOf(o, p) { UploadedImage_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return UploadedImage_setPrototypeOf(o, p); }\n\nfunction UploadedImage_createSuper(Derived) { var hasNativeReflectConstruct = UploadedImage_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = UploadedImage_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = UploadedImage_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return UploadedImage_possibleConstructorReturn(this, result); }; }\n\nfunction UploadedImage_possibleConstructorReturn(self, call) { if (call && (UploadedImage_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return UploadedImage_assertThisInitialized(self); }\n\nfunction UploadedImage_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction UploadedImage_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction UploadedImage_getPrototypeOf(o) { UploadedImage_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return UploadedImage_getPrototypeOf(o); }\n\nfunction UploadedImage_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar imageType = \'image/png\';\nvar defaultFileName = \'signature-image\';\n\nvar UploadedImage_UploadedImage = /*#__PURE__*/function (_React$Component) {\n  UploadedImage_inherits(UploadedImage, _React$Component);\n\n  var _super = UploadedImage_createSuper(UploadedImage);\n\n  function UploadedImage(_props) {\n    var _this;\n\n    UploadedImage_classCallCheck(this, UploadedImage);\n\n    _this = _super.call(this, _props);\n\n    UploadedImage_defineProperty(UploadedImage_assertThisInitialized(_this), "labels", function () {\n      return _this.props.compact ? {} : {\n        open: _this.props.openLabel || \'Open\',\n        clear: _this.props.clearLabel || \'Clear\'\n      };\n    });\n\n    UploadedImage_defineProperty(UploadedImage_assertThisInitialized(_this), "load", function (onLoadCallback) {\n      var _assertThisInitialize = UploadedImage_assertThisInitialized(_this),\n          props = _assertThisInitialize.props;\n\n      var token = props.value;\n      var request = new XMLHttpRequest();\n      request.open(\'POST\', props.downloadUrl + token, true);\n      request.responseType = \'arraybuffer\';\n\n      request.onload = function () {\n        var filename = defaultFileName;\n        var disposition = request.getResponseHeader(\'Content-Disposition\');\n\n        if (disposition && disposition.indexOf(\'attachment\') !== -1) {\n          var filenameRegex = /filename[^;=\\n]*=(([\'"]).*?\\2|[^;\\n]*)/;\n          var matches = filenameRegex.exec(disposition);\n\n          if (matches && matches[1]) {\n            filename = matches[1].replace(/[\'"]/g, \'\');\n          }\n        }\n\n        var response = request.response;\n        response.filename = filename;\n        var image = URL.createObjectURL(new Blob([response], {\n          type: imageType\n        }));\n\n        _this.setState({\n          image: image,\n          loading: false\n        });\n\n        if (onLoadCallback) onLoadCallback(image);\n      };\n\n      request.send(null);\n    });\n\n    UploadedImage_defineProperty(UploadedImage_assertThisInitialized(_this), "download", function (ev) {\n      ev.preventDefault();\n\n      _this.load(function (response) {\n        var link = document.createElement(\'a\');\n        link.setAttribute(\'href\', window.URL.createObjectURL(new Blob([response], {\n          type: imageType\n        })));\n        link.setAttribute(\'download\', response.filename ? response.filename : \'unknown\');\n        document.body.appendChild(link);\n\n        link.onclick = function () {\n          document.body.removeChild(link);\n        };\n\n        link.click();\n      });\n    });\n\n    UploadedImage_defineProperty(UploadedImage_assertThisInitialized(_this), "clear", function () {\n      _this.props.clear();\n\n      _this.setState({\n        image: null\n      });\n    });\n\n    UploadedImage_defineProperty(UploadedImage_assertThisInitialized(_this), "openFullscreen", function () {\n      var _assertThisInitialize2 = UploadedImage_assertThisInitialized(_this),\n          state = _assertThisInitialize2.state;\n\n      if (state.image) {\n        window.open(state.image);\n      } else {\n        _this.load(function (image) {\n          window.open(image);\n        });\n      }\n    });\n\n    UploadedImage_defineProperty(UploadedImage_assertThisInitialized(_this), "preview", function () {\n      var _assertThisInitialize3 = UploadedImage_assertThisInitialized(_this),\n          props = _assertThisInitialize3.props,\n          state = _assertThisInitialize3.state;\n\n      return props.showPreview && /*#__PURE__*/external_react_default.a.createElement(LoadingSpinner_LoadingWrapper, {\n        isLoading: state.loading,\n        className: \'image-uploaded-preview\' + (props.compact ? \' compact\' : \'\'),\n        onClick: _this.openFullscreen\n      }, props.compact ? /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Image"], {\n        rounded: true,\n        src: state.image,\n        className: "compact-image-preview signature"\n      }) : /*#__PURE__*/external_react_default.a.createElement("img", {\n        src: state.image,\n        className: \'image-preview\'\n      }));\n    });\n\n    _this.state = {\n      image: null,\n      loading: !!_props.showPreview\n    };\n\n    if (_props.value && _props.showPreview) {\n      _this.load();\n    }\n\n    return _this;\n  }\n\n  UploadedImage_createClass(UploadedImage, [{\n    key: "componentDidUpdate",\n    value: function componentDidUpdate(prevProps) {\n      var props = this.props;\n\n      if (props.value !== prevProps.value) {\n        if (!props.value) {\n          this.setState({\n            image: null\n          });\n          return;\n        }\n\n        if (props.showPreview) {\n          this.load();\n        }\n      }\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      var props = this.props,\n          state = this.state,\n          labels = this.labels;\n      return /*#__PURE__*/external_react_default.a.createElement("div", {\n        style: {\n          display: \'flex\',\n          flexDirection: props.showPreview && !props.compact ? \'column\' : \'row\'\n        }\n      }, props.showPreview ? this.preview() : /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Button"], {\n        content: labels().open,\n        onClick: this.openFullscreen,\n        icon: "zoom-in",\n        fluid: !props.compact\n      }), !props.hideClear && /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Button"], {\n        onClick: this.clear,\n        content: labels().clear,\n        icon: "cancel",\n        fluid: !props.compact\n      }));\n    }\n  }]);\n\n  return UploadedImage;\n}(external_react_default.a.Component);\n\n;\n/* harmony default export */ var semantic_web_UploadedImage = (UploadedImage_UploadedImage);\n// CONCATENATED MODULE: ./src/utils.js\nvar dataUrltoBlob = function dataUrltoBlob(dataUrl) {\n  var byteString = atob(dataUrl.split(\',\')[1]);\n  var mimeString = dataUrl.split(\',\')[0].split(\':\')[1].split(\';\')[0];\n  var ab = new ArrayBuffer(byteString.length);\n  var ia = new Uint8Array(ab);\n\n  for (var i = 0; i < byteString.length; i++) {\n    ia[i] = byteString.charCodeAt(i);\n  }\n\n  var blob = new Blob([ab], {\n    type: mimeString\n  });\n  return blob;\n};\n\nvar uploadDataUrl = function uploadDataUrl(dataUrl, uploadUrl, onSuccess) {\n  var blob = dataUrltoBlob(dataUrl);\n  var formData = new FormData();\n  var file = new File([blob], \'file\', {\n    type: \'image/jpeg\'\n  });\n  formData.append(\'data\', file);\n  formData.append(\'name\', \'photo\');\n  window.$.ajax({\n    url: uploadUrl,\n    type: \'POST\',\n    processData: false,\n    contentType: false,\n    dataType: \'json\',\n    data: formData,\n    success: function success(jsonData) {\n      onSuccess(formData, jsonData);\n    }\n  });\n};\n\n\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/camera.jsx\nfunction renderer_camera_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { renderer_camera_typeof = function _typeof(obj) { return typeof obj; }; } else { renderer_camera_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return renderer_camera_typeof(obj); }\n\nfunction camera_extends() { camera_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return camera_extends.apply(this, arguments); }\n\nfunction renderer_camera_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction renderer_camera_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction renderer_camera_createClass(Constructor, protoProps, staticProps) { if (protoProps) renderer_camera_defineProperties(Constructor.prototype, protoProps); if (staticProps) renderer_camera_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction renderer_camera_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) renderer_camera_setPrototypeOf(subClass, superClass); }\n\nfunction renderer_camera_setPrototypeOf(o, p) { renderer_camera_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return renderer_camera_setPrototypeOf(o, p); }\n\nfunction renderer_camera_createSuper(Derived) { var hasNativeReflectConstruct = renderer_camera_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = renderer_camera_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = renderer_camera_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return renderer_camera_possibleConstructorReturn(this, result); }; }\n\nfunction renderer_camera_possibleConstructorReturn(self, call) { if (call && (renderer_camera_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return renderer_camera_assertThisInitialized(self); }\n\nfunction renderer_camera_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction renderer_camera_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction renderer_camera_getPrototypeOf(o) { renderer_camera_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return renderer_camera_getPrototypeOf(o); }\n\nfunction renderer_camera_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\nvar camera_CameraControl = /*#__PURE__*/function (_React$Component) {\n  renderer_camera_inherits(CameraControl, _React$Component);\n\n  var _super = renderer_camera_createSuper(CameraControl);\n\n  function CameraControl(_props) {\n    var _this;\n\n    renderer_camera_classCallCheck(this, CameraControl);\n\n    _this = _super.call(this, _props);\n\n    renderer_camera_defineProperty(renderer_camera_assertThisInitialized(_this), "labels", function () {\n      return {\n        takeShot: _this.props.compact ? \'\' : _this.props.shotLabel || \'Take shot\',\n        openImage: _this.props.compact ? \'\' : _this.props.openImageLabel || \'Open image\',\n        reset: _this.props.resetLabel || \'Reset\',\n        upload: _this.props.uploadLabel || \'Upload\',\n        cancel: _this.props.cancelLabel || \'Cancel\'\n      };\n    });\n\n    renderer_camera_defineProperty(renderer_camera_assertThisInitialized(_this), "showCameraModal", function () {\n      _this.setState({\n        open: true,\n        dataUrl: null\n      });\n    });\n\n    renderer_camera_defineProperty(renderer_camera_assertThisInitialized(_this), "openImageDialog", function () {\n      var input = document.createElement(\'input\');\n      input.setAttribute(\'type\', "file");\n      input.style.opacity = 0;\n      input.setAttribute(\'accept\', "image/*");\n      input.setAttribute(\'multiple\', false);\n      document.body.appendChild(input);\n\n      input.onchange = function (e) {\n        var file = e.target.files[0];\n        var reader = new FileReader();\n\n        reader.onload = function () {\n          _this.upload(reader.result);\n        };\n\n        reader.readAsDataURL(file);\n        document.body.removeChild(input);\n      };\n\n      input.click();\n    });\n\n    renderer_camera_defineProperty(renderer_camera_assertThisInitialized(_this), "cancel", function () {\n      _this.setState({\n        open: false,\n        dataUrl: null\n      });\n    });\n\n    renderer_camera_defineProperty(renderer_camera_assertThisInitialized(_this), "clear", function () {\n      _this.setState({\n        dataUrl: null\n      });\n    });\n\n    renderer_camera_defineProperty(renderer_camera_assertThisInitialized(_this), "upload", function (dataUrl) {\n      var _assertThisInitialize = renderer_camera_assertThisInitialized(_this),\n          props = _assertThisInitialize.props;\n\n      uploadDataUrl(_this.state.dataUrl || dataUrl, props.uploadUrl, function (formData, jsonData) {\n        props.onUpload(formData, jsonData);\n      });\n\n      _this.setState({\n        open: false\n      });\n    });\n\n    renderer_camera_defineProperty(renderer_camera_assertThisInitialized(_this), "onTakePhoto", function (takenDataUrl) {\n      _this.setState({\n        dataUrl: takenDataUrl\n      });\n    });\n\n    _this.state = {\n      open: false,\n      dataUrl: null\n    };\n    return _this;\n  }\n\n  renderer_camera_createClass(CameraControl, [{\n    key: "render",\n    value: function render() {\n      var _this2 = this;\n\n      var props = this.props,\n          state = this.state,\n          labels = this.labels;\n\n      var cameraModal = function cameraModal() {\n        return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Modal"], {\n          open: _this2.state.open\n        }, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Modal"].Content, null, state.dataUrl ? /*#__PURE__*/external_react_default.a.createElement("div", {\n          className: \'react-html5-camera-photo\'\n        }, /*#__PURE__*/external_react_default.a.createElement("img", {\n          src: state.dataUrl,\n          className: \'image-preview\'\n        }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Button"], {\n          fluid: true,\n          content: labels().reset,\n          className: "ui button",\n          onClick: _this2.clear,\n          icon: "cancel"\n        })) : /*#__PURE__*/external_react_default.a.createElement(build["Camera"], {\n          onTakePhotoAnimationDone: _this2.onTakePhoto,\n          isFullscreen: false,\n          idealFacingMode: build["FACING_MODES"].ENVIRONMENT,\n          imageType: build["IMAGE_TYPES"].JPG,\n          imageCompression: parseFloat(props.compression) || 1,\n          isMaxResolution: true,\n          isImageMirror: true\n        })), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Modal"].Actions, null, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Button"], {\n          className: "buttontype1",\n          content: labels().upload,\n          src: state.dataUrl,\n          download: true,\n          onClick: _this2.upload,\n          icon: "check",\n          disabled: !state.dataUrl\n        }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Button"], {\n          className: "buttontype2",\n          content: labels().cancel,\n          onClick: _this2.cancel\n        })));\n      };\n\n      return props.value ? /*#__PURE__*/external_react_default.a.createElement(semantic_web_UploadedImage, camera_extends({}, props, {\n        clear: props.onClear\n      })) : /*#__PURE__*/external_react_default.a.createElement("div", {\n        style: {\n          display: \'flex\',\n          flexDirection: \'row\'\n        }\n      }, cameraModal(), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Button"], {\n        content: labels().takeShot,\n        basic: true,\n        fluid: !!props.compact,\n        onClick: this.showCameraModal,\n        icon: "photo"\n      }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Button"], {\n        content: labels().openImage,\n        basic: true,\n        fluid: !!props.compact,\n        onClick: this.openImageDialog,\n        icon: "folder"\n      }));\n    }\n  }]);\n\n  return CameraControl;\n}(external_react_default.a.Component);\n\nregister(\'camera\', function (options) {\n  var props = options.props;\n  var containerWidthStyle = props.compact && props.showPreview ? {\n    minWidth: 160\n  } : {};\n  return /*#__PURE__*/external_react_default.a.createElement("div", {\n    className: "field",\n    style: containerWidthStyle\n  }, options.props.label && /*#__PURE__*/external_react_default.a.createElement("label", null, options.props.label), /*#__PURE__*/external_react_default.a.createElement(camera_CameraControl, camera_extends({}, props, {\n    onUpload: options.onUpload,\n    onClear: options.onClear\n  })));\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/chart-view.jsx\n\n\nregister(\'chart-view\', function (options) {\n  var style = options.props.style;\n  var width = isDefined(options.props.width) ? options.props.width : \'400px\';\n\n  if (isDefined(style.width)) {\n    width = style.width;\n  }\n\n  var height = isDefined(options.props.height) ? options.props.height : \'300px\';\n\n  if (isDefined(style.height)) {\n    height = style.height;\n  }\n\n  if ((options.state.width !== width || options.state.height !== height) && isDefined(options.state.chart)) {\n    options.state.chart.destroy();\n    options.state.chart = undefined;\n  }\n\n  options.state.width = width;\n  options.state.height = height;\n  var className = \'field\';\n\n  if (isDefined(options.props.className)) {\n    className += \' \' + options.props.className;\n  }\n\n  return /*#__PURE__*/external_react_default.a.createElement("div", {\n    className: className,\n    style: style\n  }, /*#__PURE__*/external_react_default.a.createElement("canvas", {\n    id: options.divId,\n    width: width,\n    height: height\n  }));\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/chart-view-redraw-chart.jsx\n\nregister(\'chart-view-redraw-chart\', function (options) {\n  if (isDefined(options.state.chart)) {\n    options.state.chart.destroy();\n    options.state.chart = undefined;\n  }\n\n  if (isUndefined(options.state.chart)) {\n    var ctx = document.getElementById(options.divId).getContext(\'2d\');\n    var data = options.chartData;\n    var yAxes = undefined;\n\n    if (isDefined(data) && Array.isArray(data.datasets)) {\n      var axis = [];\n      data.datasets.forEach(function (e) {\n        if (isDefined(e.yAxisID) && e.yAxisID != null) {\n          if (!axis.includes(e.yAxisID)) {\n            axis.push(e.yAxisID);\n          }\n        }\n      });\n\n      if (axis.length > 0) {\n        yAxes = [];\n\n        for (var i = 0; i < axis.length; i++) {\n          if (!i) {\n            yAxes.push({\n              type: \'linear\',\n              display: true,\n              position: \'left\',\n              id: axis[i]\n            });\n          } else {\n            yAxes.push({\n              type: \'linear\',\n              display: true,\n              position: \'right\',\n              id: axis[i],\n              gridLines: {\n                drawOnChartArea: false\n              }\n            });\n          }\n        }\n      }\n    }\n\n    var config = {\n      type: options.props.chartType,\n      data: data,\n      options: {\n        responsive: Boolean(options.props.responsive),\n        legend: {\n          position: options.props.legendPosition\n        },\n        title: {\n          fontSize: isUndefined(options.props.titleSize) ? 14 : options.props.titleSize,\n          display: isNotEmptyString(options.props.title),\n          text: options.props.title\n        }\n      }\n    };\n\n    if (isDefined(yAxes)) {\n      config.options.scales = {\n        yAxes: yAxes\n      };\n    }\n\n    options.state.chart = new Chart(ctx, config);\n  } else {\n    options.state.chart.update();\n  }\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/checkbox.jsx\n\n\n\nregister(\'checkbox\', function (options) {\n  if (options.isForm) {\n    return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Checkbox, options.propsControl);\n  }\n\n  return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Checkbox"], options.propsControl);\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/container.jsx\n\n\nregister(\'container\', function (options) {\n  return /*#__PURE__*/external_react_default.a.createElement("div", options.props);\n});\n// EXTERNAL MODULE: external "react-dom"\nvar external_react_dom_ = __webpack_require__(9);\nvar external_react_dom_default = /*#__PURE__*/__webpack_require__.n(external_react_dom_);\n\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/control-bar.jsx\n\n\n\n\n\n\nregister(\'control-bar\', function (options) {\n  function isHtmlElement(object) {\n    return object instanceof Element;\n  }\n\n  function getControlNode() {\n    var _current$triggerRef;\n\n    var current = options.me.controlRef.current;\n    if (isHtmlElement(current)) return current;\n    var triggerRef = current === null || current === void 0 ? void 0 : (_current$triggerRef = current.triggerRef) === null || _current$triggerRef === void 0 ? void 0 : _current$triggerRef.current;\n    if (triggerRef) return triggerRef;\n    return external_react_dom_default.a.findDOMNode(current);\n  }\n\n  options.me.updateBarPosition = function () {\n    if (!options.me.controlRef || !options.me.controlRef.current || !options.me.barRef || !options.me.barRef.current) return;\n    var control = getControlNode();\n    var bar = options.me.barRef.current;\n    var controlPos = control.getBoundingClientRect();\n    var barPos = bar.getBoundingClientRect();\n    var x = controlPos.x + controlPos.width;\n\n    if (x < barPos.width) {\n      x = controlPos.x;\n      bar.style.transform = \'translate(0, -50%)\';\n    }\n\n    bar.style.left = x + "px";\n    bar.style.top = controlPos.y + "px";\n  };\n\n  function onTargetDragEnter(item, css, e) {\n    external_jquery_default()(e.target).addClass(css);\n  }\n\n  function onTargetDragLeave(item, css, e) {\n    external_jquery_default()(e.target).removeClass(css);\n  }\n\n  function onDrop(item, e) {\n    var el = external_jquery_default()(e.target);\n\n    if (el.length > 0) {\n      options.props.builderActions.move(item.key, el[0]);\n    }\n\n    onDragEnd(item);\n    return false;\n  }\n\n  function onDragStart(item, e) {\n    var selector = \'.dwkit-formbuilder-zone\';\n    e.dataTransfer.setData(\'text\', \'\');\n    var control = getControlNode();\n\n    if (control) {\n      var controlPos = control.getBoundingClientRect();\n      e.dataTransfer.setDragImage(control, controlPos.width / 2, 0);\n    }\n\n    if (isDefined(item.forContainerType)) {\n      var cTypes = item.forContainerType.split(\',\');\n      var subSelector = \'\';\n      cTypes.forEach(function (c) {\n        if (subSelector.length > 0) {\n          subSelector += \',\';\n        }\n\n        subSelector += \'[data-buildertype=\\\'\' + c + \'\\\'] > \' + selector;\n      });\n      selector = subSelector;\n    }\n\n    external_jquery_default()(selector).addClass(\'dwkit-formbuilder-zone-active\').on(\'dragenter\', onTargetDragEnter.bind(options.me, item, \'dwkit-formbuilder-zone-select\')).on(\'dragleave\', onTargetDragLeave.bind(options.me, item, \'dwkit-formbuilder-zone-select\')).on(\'dragover\', function (e) {\n      e.preventDefault();\n    }).on(\'drop\', onDrop.bind(options.me, item));\n  }\n\n  function onDragEnd() {\n    var zones = external_jquery_default()(\'.dwkit-formbuilder-zone\');\n    zones.removeClass(\'dwkit-formbuilder-zone-active\');\n    zones.removeClass(\'dwkit-formbuilder-zone-select\');\n    zones.off();\n  }\n\n  var onMouseOver = function onMouseOver(e) {\n    var _options$me$barRef$cu, _getControlNode;\n\n    (_options$me$barRef$cu = options.me.barRef.current) === null || _options$me$barRef$cu === void 0 ? void 0 : _options$me$barRef$cu.classList.add("visible");\n    (_getControlNode = getControlNode()) === null || _getControlNode === void 0 ? void 0 : _getControlNode.classList.add("dwkit-formbuilder-item-selected");\n  };\n\n  var onMouseOut = function onMouseOut(e) {\n    var _options$me$barRef$cu2, _getControlNode2;\n\n    (_options$me$barRef$cu2 = options.me.barRef.current) === null || _options$me$barRef$cu2 === void 0 ? void 0 : _options$me$barRef$cu2.classList.remove("visible");\n    (_getControlNode2 = getControlNode()) === null || _getControlNode2 === void 0 ? void 0 : _getControlNode2.classList.remove("dwkit-formbuilder-item-selected");\n  };\n\n  var setControlRef = function setControlRef(ref) {\n    if (isDefined(ref)) {\n      options.me.controlRef.current = ref;\n      var element = getControlNode();\n      element.onmouseover = onMouseOver;\n      element.onmouseout = onMouseOut;\n    }\n  };\n\n  var className = "dwkit-formbuilder-item-toolbar-header";\n  return /*#__PURE__*/external_react_default.a.createElement(DropzoneContext.Consumer, {\n    key: options.props.model.key + \'_dropzone\'\n  }, function (_ref) {\n    var visible = _ref.visible;\n    var toolbar = /*#__PURE__*/external_react_default.a.createElement("div", {\n      ref: options.me.barRef,\n      key: options.props.model.key + \'_container\',\n      className: \'dwkit-formbuilder-item-toolbar-container\',\n      style: getDisplayStyle(visible)\n    }, /*#__PURE__*/external_react_default.a.createElement("div", {\n      className: className,\n      onMouseOver: onMouseOver,\n      onMouseOut: onMouseOut\n    }, /*#__PURE__*/external_react_default.a.createElement("div", {\n      className: "dwkit-formbuilder-item-toolbar-header-buttons"\n    }, /*#__PURE__*/external_react_default.a.createElement("div", {\n      className: "dwkit-formbuilder-item-toolbar-header-title",\n      title: options.props.text,\n      onDoubleClick: options.onCopyControl\n    }, options.props.model["key"]), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Icon"], {\n      key: "move",\n      draggable: true,\n      onDragStart: onDragStart.bind(options.me, options.props.model),\n      onDragEnd: onDragEnd.bind(options.me, options.props.model),\n      link: true,\n      name: "move"\n    }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Icon"], {\n      key: "edit",\n      onClick: options.me.props.onEdit.bind(options.props.parent, options.props.model),\n      link: true,\n      name: "edit"\n    }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Icon"], {\n      key: "copy",\n      onClick: options.me.props.onCopy.bind(options.props.parent, options.props.model),\n      link: true,\n      name: "copy"\n    }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Icon"], {\n      key: "delete",\n      onClick: options.me.props.onDelete.bind(options.props.parent, options.props.model),\n      link: true,\n      name: "delete"\n    }))));\n    return /*#__PURE__*/external_react_default.a.createElement(external_react_default.a.Fragment, null, /*#__PURE__*/external_react_dom_default.a.createPortal(toolbar, document.body), /*#__PURE__*/external_react_default.a.cloneElement(options.props.control, {\n      ref: setControlRef\n    }));\n  });\n});\n// EXTERNAL MODULE: external "react-datepicker"\nvar external_react_datepicker_ = __webpack_require__(18);\nvar external_react_datepicker_default = /*#__PURE__*/__webpack_require__.n(external_react_datepicker_);\n\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/date-picker.jsx\nvar date_picker_excluded = ["isForm"];\n\nfunction date_picker_extends() { date_picker_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return date_picker_extends.apply(this, arguments); }\n\nfunction date_picker_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = date_picker_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction date_picker_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\nregister(\'date-picker\', function (options) {\n  var _options$props = options.props,\n      isForm = _options$props.isForm,\n      props = date_picker_objectWithoutProperties(_options$props, date_picker_excluded);\n\n  if (options.props.type === "time") {\n    return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Input"], props);\n  }\n\n  var control = /*#__PURE__*/external_react_default.a.createElement(external_react_datepicker_default.a, date_picker_extends({}, options.datePickerProps, {\n    peekNextMonth: true,\n    showMonthDropdown: true,\n    showYearDropdown: true,\n    dropdownMode: "select",\n    isClearable: !props.readOnly,\n    placeholderText: options.placeholder,\n    selected: options.date,\n    onChange: options.onChange,\n    onChangeRaw: options.handleChangeRaw\n  }));\n\n  if (!props.labelPosition || isForm) {\n    if (options.controlProps.className) {\n      options.controlProps.className += \' field\';\n    } else {\n      options.controlProps.className = \'field\';\n    }\n\n    if (props.error) {\n      options.controlProps.className += \' error\';\n    }\n\n    if (props.readOnly) {\n      options.controlProps.className += \' datepicker-readonly\';\n    }\n\n    return /*#__PURE__*/external_react_default.a.createElement("div", options.controlProps, isDefined(props.label) && /*#__PURE__*/external_react_default.a.createElement("label", null, props.label), /*#__PURE__*/external_react_default.a.createElement("div", {\n      "data-buildertype": props.type\n    }, control));\n  }\n\n  if (options.controlProps.className) {\n    options.controlProps.className += \' ui fluid labeled input\';\n  } else {\n    options.controlProps.className = \'ui fluid labeled input\';\n  }\n\n  if (props.error) {\n    options.controlProps.className += \' error\';\n  }\n\n  if (props.readOnly) {\n    options.controlProps.className += \' datepicker-readonly\';\n  }\n\n  return /*#__PURE__*/external_react_default.a.createElement("div", date_picker_extends({}, options.controlProps, {\n    "data-buildertype": props.type\n  }), isDefined(props.label) && /*#__PURE__*/external_react_default.a.createElement("div", {\n    className: "ui label label"\n  }, props.label), control);\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/dictionary.jsx\nfunction dictionary_extends() { dictionary_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return dictionary_extends.apply(this, arguments); }\n\n\n\n\nregister(\'dictionary\', function (options) {\n  //if (options.props.parentIsForm) {\n  return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Dropdown, dictionary_extends({}, options.propsControl, {\n    error: isDefined(options.propsControl.error)\n  })); // }\n  // let divClass = \'ui labeled input\';\n  // if (options.props.fluid) {\n  //     divClass += \' fluid\';\n  // }\n  // if (options.props.error) {\n  //     divClass += \' error\';\n  // }\n  // if (options.props.className) {\n  //     divClass += \' \' + options.props.className;\n  // }\n  // return (<div className={divClass}>\n  //     {options.props.label && <div className="ui label label">{options.props.label}</div>}\n  //     <Dropdown {...options.propsControl} error={isDefined(options.propsControl.error)}/>\n  // </div>);\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/dropdown.jsx\nfunction dropdown_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction dropdown_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { dropdown_ownKeys(Object(source), true).forEach(function (key) { dropdown_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { dropdown_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction dropdown_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nregister(\'dropdown\', function (options) {\n  var propsControl = dropdown_objectSpread(dropdown_objectSpread({}, options.propsControl), {}, {\n    error: !!options.propsControl.error\n  }); //if (options.isForm) {\n\n\n  return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Dropdown, propsControl); // }\n  // let divClass = \'ui labeled input\';\n  // if (options.propsControl.fluid) {\n  //     divClass += \' fluid\';\n  // }\n  // if (options.propsControl.error) {\n  //     divClass += \' error\';\n  // }\n  // if (isNotEmptyString(options.props.className)) {\n  //     divClass += \' \' + options.props.className;\n  // }\n  // return (<div className={divClass}>\n  //     {options.propsControl.label && <div className="ui label label">{options.propsControl.label}</div>}\n  //     <Dropdown {...options.propsControl} />\n  // </div>);\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/dropdown-trigger.jsx\nfunction dropdown_trigger_extends() { dropdown_trigger_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return dropdown_trigger_extends.apply(this, arguments); }\n\n\n\n\nregister(\'dropdown-trigger\', function (options) {\n  options.controlProps.trigger = /*#__PURE__*/external_react_default.a.createElement("span", null, isDefined(options.props.imageUrl) && /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Image"], {\n    avatar: true,\n    src: options.props.imageUrl\n  }), isDefined(options.props.value) ? options.props.value : options.props.defaultValue);\n  return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Dropdown"], dropdown_trigger_extends({}, options.controlProps, {\n    onMouseDown: options.onMouseDown\n  }));\n});\n// EXTERNAL MODULE: external "react-dropzone-component"\nvar external_react_dropzone_component_ = __webpack_require__(19);\nvar external_react_dropzone_component_default = /*#__PURE__*/__webpack_require__.n(external_react_dropzone_component_);\n\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/dropzone.jsx\nfunction dropzone_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction dropzone_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { dropzone_ownKeys(Object(source), true).forEach(function (key) { renderer_dropzone_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { dropzone_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction renderer_dropzone_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nregister(\'dropzone\', function (options) {\n  var _options$props, _additionalParams$err, _additionalParams$mod, _window$FORMBUILDER_T;\n\n  var additionalParams = options === null || options === void 0 ? void 0 : (_options$props = options.props) === null || _options$props === void 0 ? void 0 : _options$props.additionalParams;\n  var errorMessage = additionalParams === null || additionalParams === void 0 ? void 0 : (_additionalParams$err = additionalParams.errors) === null || _additionalParams$err === void 0 ? void 0 : _additionalParams$err[additionalParams === null || additionalParams === void 0 ? void 0 : (_additionalParams$mod = additionalParams.model) === null || _additionalParams$mod === void 0 ? void 0 : _additionalParams$mod.key];\n  var divClass = \'dropzone\';\n\n  if (options.props.error) {\n    divClass += \' error\';\n  }\n\n  var djsConfig = dropzone_objectSpread(dropzone_objectSpread({}, options.djsConfig), {}, {\n    timeout: (_window$FORMBUILDER_T = window.FORMBUILDER_TIMEOUT) !== null && _window$FORMBUILDER_T !== void 0 ? _window$FORMBUILDER_T : 30000\n  });\n\n  var control = options.props.disabled || options.props.readOnly ? /*#__PURE__*/external_react_default.a.createElement("div", null, errorMessage !== null && errorMessage !== void 0 && errorMessage.length ? errorMessage : options.props.disabled ? "Disabled" : "ReadOnly") : /*#__PURE__*/external_react_default.a.createElement(external_react_dropzone_component_default.a, {\n    config: options.componentConfig,\n    eventHandlers: options.eventHandlers,\n    djsConfig: djsConfig\n  });\n\n  if (options.isForm) {\n    divClass += " field";\n  }\n\n  return /*#__PURE__*/external_react_default.a.createElement("div", {\n    className: divClass\n  }, control);\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/edit-form.jsx\n\n\n\nregister(\'edit-form\', function (options) {\n  function createError(text) {\n    var closeBtn = \'Close\';\n\n    if (isDefined(options.props.localization)) {\n      closeBtn = options.props.localization.base.closebutton;\n    }\n\n    return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Modal"], {\n      open: options.state.open,\n      onClose: options.onClose\n    }, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Modal"].Header, null, "Error"), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Modal"].Content, null, /*#__PURE__*/external_react_default.a.createElement("p", null, text)), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Modal"].Actions, null, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Button"], {\n      onClick: options.onClose\n    }, closeBtn)));\n  }\n\n  if (isUndefined(options.state.item)) {\n    return /*#__PURE__*/external_react_default.a.createElement("div", null);\n  }\n\n  var editForm = options.dwKitControls.getEditControlByType(options.state.item[\'data-buildertype\'], options.props.externalControlList);\n\n  if (!editForm) {\n    return createError(\'EditForm is not found for this control!\');\n  }\n\n  var okBtn = \'OK\';\n  var cancelBtn = \'Cancel\';\n  var questionTitle = \'Question\';\n\n  if (isDefined(options.props.localization)) {\n    okBtn = options.props.localization.base.okbutton;\n    cancelBtn = options.props.localization.base.cancelbutton;\n    questionTitle = options.props.localization.base.questiontitle;\n  }\n\n  return /*#__PURE__*/external_react_default.a.createElement("div", null, /*#__PURE__*/external_react_default.a.createElement(editForm, {\n    key: \'editform\',\n    data: options.state.item,\n    parent: options.parent,\n    open: options.state.open,\n    onSave: options.onSave,\n    onClose: options.onClose,\n    actions: options.props.actions,\n    className: \'dwkit-formbuilder-editform\',\n    localization: options.props.localization\n  }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Modal"], {\n    size: "small",\n    open: options.state.confirm,\n    dimmer: "inverted",\n    onClose: options.confirmHandleCancel\n  }, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Modal"].Header, null, questionTitle), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Modal"].Content, null, /*#__PURE__*/external_react_default.a.createElement("p", null, options.state.confirmtext)), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Modal"].Actions, null, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Button"], {\n    className: "buttontype1",\n    onClick: options.state.confirmHandle\n  }, okBtn), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Button"], {\n    className: "buttontype2",\n    onClick: options.confirmHandleCancel\n  }, cancelBtn))));\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/empty.jsx\n\n\nregister(\'empty\', function (options) {\n  return /*#__PURE__*/external_react_default.a.createElement("div", {\n    className: "dwkit-formbuilder-empty",\n    key: options.key\n  }, options.text);\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/events-editor.jsx\nfunction renderer_events_editor_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction renderer_events_editor_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { renderer_events_editor_ownKeys(Object(source), true).forEach(function (key) { renderer_events_editor_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { renderer_events_editor_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction renderer_events_editor_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nregister(\'events-editor\', function (options) {\n  var data = options.props.data;\n  var events = options.props.events;\n  var res = [];\n  events.forEach(function (e) {\n    var key = e + \'_events\';\n    var event = isDefined(data) ? data[e] : {};\n    var dropdownControl = {\n      element: external_semantic_ui_react_["Form"].Dropdown,\n      props: {\n        className: "dwkit-action-dropdown",\n        multiple: true,\n        search: true,\n        selection: true,\n        allowAdditions: true\n      }\n    };\n    var collectionEditorControl = {\n      element: collection_editor_CollectionEditor,\n      props: {\n        className: "parameters-editor",\n        multiple: true,\n        search: true,\n        selection: true,\n        allowAdditions: true\n      }\n    };\n    res.push( /*#__PURE__*/external_react_default.a.createElement("div", {\n      key: key\n    }, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Checkbox, {\n      className: event.active ? "events-editor-checkbox" : "",\n      width: 3,\n      key: "active",\n      label: e,\n      name: "active",\n      checked: event.active,\n      onChange: options.me.handleChange.bind(options.me, e)\n    }), /*#__PURE__*/external_react_default.a.createElement("div", {\n      className: "events-editor-block",\n      style: event.active ? {} : {\n        display: \'none\'\n      }\n    }, /*#__PURE__*/external_react_default.a.createElement(collection_editor_CollectionEditor, {\n      draggable: true,\n      columns: [{\n        key: \'actions\',\n        name: \'Actions\',\n        control: \'custom\',\n        customControl: dropdownControl.element,\n        customControlGetPropsFunc: function customControlGetPropsFunc(data) {\n          return renderer_events_editor_objectSpread({\n            options: options.actionOptions,\n            value: data.actions\n          }, dropdownControl.props);\n        }\n      }, {\n        key: \'parameters\',\n        name: \'Parameters\',\n        control: \'custom\',\n        customControl: collectionEditorControl.element,\n        customControlGetPropsFunc: function customControlGetPropsFunc(data) {\n          return renderer_events_editor_objectSpread({\n            value: data.parameters,\n            columns: [{\n              key: \'name\',\n              name: \'Name\'\n            }, {\n              key: \'value\',\n              name: \'Value\'\n            }]\n          }, collectionEditorControl.props);\n        }\n      }, {\n        key: \'targets\',\n        name: \'Targets\',\n        control: \'custom\',\n        customControl: dropdownControl.element,\n        customControlGetPropsFunc: function customControlGetPropsFunc(data) {\n          return renderer_events_editor_objectSpread({\n            options: options.targetOptions,\n            value: data.targets\n          }, dropdownControl.props);\n        }\n      }],\n      name: "triggers",\n      className: "events-editor",\n      value: event.triggers,\n      onChange: options.me.handleChange.bind(options.me, e)\n    }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Button"], {\n      onClick: options.me.initNewTrigger.bind(options.me, e),\n      basic: true,\n      size: "mini",\n      style: {\n        width: \'calc(100% - 70px)\',\n        marginLeft: 20,\n        fontWeight: 900,\n        padding: 4,\n        fontSize: 19\n      }\n    }, "+"))));\n  });\n  return /*#__PURE__*/external_react_default.a.createElement("div", null, res);\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/files.jsx\nfunction files_extends() { files_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return files_extends.apply(this, arguments); }\n\n\n\nregister(\'files\', function (options) {\n  var className = "";\n\n  if (options.props.error) {\n    className += \' error\';\n  }\n\n  var disabled = options.props.disabled || !!options.state.disabled;\n  var readOnly = options.props.readOnly || !!options.state.readOnly;\n\n  function getUploadControl() {\n    if (options.props.useDropzone) {\n      var dropzoneProps = {\n        iconFiletypes: options.props.iconFiletypes,\n        postUrl: options.props.postUrl,\n        showFiletypeIcon: options.props.showFiletypeIcon,\n        autoProcessQueue: options.props.autoProcessQueue,\n        additionalParams: options.props.additionalParams,\n        onSuccess: options.onDropzoneUploadSuccess,\n        onFail: options.onDropzoneUploadFail\n      };\n      return /*#__PURE__*/external_react_default.a.createElement(dropzone_Dropzone, files_extends({\n        addRemoveLinks: true\n      }, dropzoneProps, {\n        disabled: disabled,\n        readOnly: readOnly\n      }));\n    }\n\n    if (options.props.useCamera) {\n      var fileCol = options.editorProps.columns.find(function (col) {\n        return col.control == \'file2\';\n      });\n      fileCol.control = \'camera\';\n    }\n\n    var uploadProps = {\n      uploadUrl: options.props.postUrl,\n      downloadUrl: options.props.downloadUrl,\n      readOnly: readOnly,\n      onlyImages: options.props.useCamera,\n      multiple: options.props.multiple,\n      onChange: options.onUploadChange,\n      onUploadFail: options.onUploadFail,\n      handleEvent: options.props.additionalParams.handleEvent\n    };\n    return /*#__PURE__*/external_react_default.a.createElement(upload_Upload, files_extends({\n      isForm: true\n    }, uploadProps, {\n      disabled: disabled,\n      readOnly: readOnly\n    }));\n  }\n\n  return /*#__PURE__*/external_react_default.a.createElement("div", {\n    className: "files " + className\n  }, /*#__PURE__*/external_react_default.a.createElement(collection_editor_CollectionEditor, files_extends({\n    disableAdd: true,\n    disableCopy: true\n  }, options.editorProps, {\n    hideHeaderWhenEmptyData: true,\n    readOnly: disabled || readOnly\n  })), getUploadControl());\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/form.jsx\nfunction form_extends() { form_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return form_extends.apply(this, arguments); }\n\n\n\n\nregister(\'form\', function (options) {\n  return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"], form_extends({}, options.propsControl, {\n    children: options.children,\n    size: options.model.size\n  }));\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/form-group.jsx\nfunction form_group_extends() { form_group_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return form_group_extends.apply(this, arguments); }\n\n\n\n\nregister(\'formgroup\', function (options) {\n  var widths = options.widths;\n\n  if (widths === \'custom\') {\n    widths = options.widthsCustom;\n  }\n\n  if (options.orientation == "grouped") options.propsControl[options.orientation] = true;\n  var res = undefined;\n\n  if (options.orientation == "field") {\n    res = /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Field, form_group_extends({}, options.propsControl, {\n      children: options.children\n    }));\n  } else {\n    res = /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Group, form_group_extends({}, options.propsControl, {\n      widths: widths,\n      children: options.children\n    }));\n  }\n\n  return res;\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/formatters.jsx\n\n\n\nregister(\'checkbox-formatter\', function (options) {\n  var value = Boolean(options.props.value);\n  return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Checkbox"], {\n    checked: value,\n    disabled: true\n  });\n});\nregister(\'number-formatter\', function (options) {\n  var value = options.props.value;\n  return /*#__PURE__*/external_react_default.a.createElement("span", {\n    style: {\n      textAlign: \'right\'\n    }\n  }, /*#__PURE__*/external_react_default.a.createElement("div", {\n    title: value\n  }, value));\n});\nregister(\'date-formatter\', function (options) {\n  return /*#__PURE__*/external_react_default.a.createElement("span", {\n    style: {\n      textAlign: \'right\'\n    }\n  }, /*#__PURE__*/external_react_default.a.createElement("div", {\n    title: options.strValue\n  }, options.strValue));\n});\nregister(\'datetime-formatter\', function (options) {\n  return /*#__PURE__*/external_react_default.a.createElement("span", {\n    style: {\n      textAlign: \'right\'\n    }\n  }, /*#__PURE__*/external_react_default.a.createElement("div", {\n    title: options.strValue\n  }, options.strValue));\n});\nregister(\'time-formatter\', function (options) {\n  return /*#__PURE__*/external_react_default.a.createElement("span", {\n    style: {\n      textAlign: \'right\'\n    }\n  }, /*#__PURE__*/external_react_default.a.createElement("div", {\n    title: options.strValue\n  }, options.strValue));\n});\n// EXTERNAL MODULE: external "react-grid-layout"\nvar external_react_grid_layout_ = __webpack_require__(15);\nvar external_react_grid_layout_default = /*#__PURE__*/__webpack_require__.n(external_react_grid_layout_);\n\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/grid-layout.jsx\nfunction grid_layout_extends() { grid_layout_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return grid_layout_extends.apply(this, arguments); }\n\nfunction grid_layout_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction grid_layout_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { grid_layout_ownKeys(Object(source), true).forEach(function (key) { renderer_grid_layout_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { grid_layout_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction renderer_grid_layout_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar ReactGridLayout = Object(external_react_grid_layout_["WidthProvider"])(external_react_grid_layout_default.a);\nregister(\'grid-layout\', function (options) {\n  function renderPanel(pane) {\n    var element = undefined;\n\n    if (isDefined(options.props.placeholders) && Array.isArray(options.props.placeholders[pane.psid]) && options.props.placeholders[pane.psid].length > 0) {\n      var model = options.props.placeholders[pane.psid];\n\n      if (model) {\n        element = options.props.createControls(options.me, {\n          model: model,\n          parentPlaceholder: pane.psid,\n          buildermode: options.props.buildermode,\n          data: options.props.data,\n          errors: options.props.errors,\n          parentItem: options.props.model,\n          children: options.props.children,\n          handleEvent: options.props.handleEvent,\n          getFormFunc: options.props.getFormFunc,\n          getAdditionalDataForControl: options.props.getAdditionalDataForControl,\n          readOnlyControls: options.props.readOnlyControls,\n          readOnly: options.props.readOnly,\n          disableRefs: options.props.disableRefs,\n          uploadUrl: options.props.uploadUrl,\n          downloadUrl: options.props.downloadUrl,\n          extendedData: options.props.extendedData,\n          controlsToReplace: options.props.controlsToReplace,\n          needCheckReplace: options.props.needCheckReplace,\n          eventOnEdit: options.props.eventOnEdit,\n          eventOnDelete: options.props.eventOnDelete,\n          eventOnCopy: options.props.eventOnCopy,\n          adaptiveViewType: options.props.adaptiveViewType\n        });\n        var dzkey = pane.psid;\n\n        if (options.props.buildermode && options.props.createBuilderDropzone) {\n          if (element.length > 0 && model.length > 0) {\n            element.unshift(options.props.createBuilderDropzone(dzkey + \'layout_dropzone_header\', options.props.name, undefined, pane.title, pane.psid));\n          }\n\n          element.push(options.props.createBuilderDropzone(dzkey + \'layout_dropzone_footer\', options.props.name, model[model.length - 1].key, pane.title, pane.psid));\n        }\n      }\n    } else if (options.props.buildermode && options.props.createBuilderDropzone) {\n      element = options.props.createBuilderDropzone(\'layout_dropzone_footer\', options.props.name, undefined, pane.title, pane.psid);\n    }\n\n    var layout = {\n      x: isDefined(pane.x) ? pane.x : 0,\n      y: isDefined(pane.y) ? pane.y : 0,\n      w: isDefined(pane.w) ? pane.w : 4,\n      h: isDefined(pane.h) ? pane.h : 4,\n      i: pane.psid\n    };\n    return /*#__PURE__*/external_react_default.a.createElement("div", {\n      key: pane.psid,\n      className: pane.cssclass,\n      "data-grid": layout\n    }, pane.title && /*#__PURE__*/external_react_default.a.createElement("div", {\n      className: "react-grid-item-title"\n    }, pane.title), element);\n  }\n\n  function getPanes(panes) {\n    var me = options.me;\n    var res = [];\n    var userLayout = undefined;\n\n    if (!options.props.buildermode) {\n      try {\n        userLayout = JSON.parse(options.getCookie(window.location.pathname + \'_\' + options.props.name));\n      } catch (e) {}\n    }\n\n    if (Array.isArray(panes)) {\n      var _loop = function _loop(i) {\n        var pane = panes[i];\n\n        if (pane.visibleCondition !== undefined && pane.visibleCondition !== null && pane.visibleCondition !== \'\') {\n          var args = \'\';\n          var body = \'return \' + pane.visibleCondition;\n\n          try {\n            if (!new Function(args, body)()) {\n              return "continue";\n            }\n          } catch (e) {}\n        }\n\n        var isFind = false;\n\n        if (isDefined(userLayout)) {\n          userLayout.forEach(function (l) {\n            if (l.i == pane.psid) {\n              isFind = true;\n\n              var userPane = grid_layout_objectSpread({}, pane);\n\n              if (me.props.draggable) {\n                userPane.x = l.x;\n                userPane.y = l.y;\n              }\n\n              if (me.props.resizable) {\n                userPane.w = l.w;\n                userPane.h = l.h;\n              }\n\n              res.push(me.renderPanel(userPane));\n            }\n          });\n        }\n\n        if (!isFind) {\n          res.push(renderPanel(pane));\n        }\n      };\n\n      for (var i = 0; i < panes.length; i++) {\n        var _ret = _loop(i);\n\n        if (_ret === "continue") continue;\n      }\n    }\n\n    return res;\n  }\n\n  var panes = getPanes(options.props[\'data-panes\']);\n  var layoutprops = {\n    isDraggable: true,\n    isResizable: true,\n    cols: isNotEmptyString(options.props.cols) ? options.props.cols : 12,\n    rowHeight: 30,\n    containerPadding: [0, 0],\n    draggableCancel: \'input,textarea\'\n  };\n\n  if (!options.props.buildermode) {\n    layoutprops.isDraggable = options.props.draggable;\n    layoutprops.isResizable = options.props.resizable;\n  }\n\n  var className = options.props.className;\n\n  if (options.props.scroll) {\n    className = \'react-grid-scroll\';\n  }\n\n  return /*#__PURE__*/external_react_default.a.createElement("div", {\n    className: className,\n    style: options.props.style\n  }, /*#__PURE__*/external_react_default.a.createElement(ReactGridLayout, grid_layout_extends({\n    onLayoutChange: options.onLayoutChange\n  }, layoutprops), panes));\n});\n// EXTERNAL MODULE: external "react-data-grid"\nvar external_react_data_grid_ = __webpack_require__(13);\nvar external_react_data_grid_default = /*#__PURE__*/__webpack_require__.n(external_react_data_grid_);\n\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/grid-view.jsx\nfunction grid_view_extends() { grid_view_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return grid_view_extends.apply(this, arguments); }\n\nfunction renderer_grid_view_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction renderer_grid_view_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { renderer_grid_view_ownKeys(Object(source), true).forEach(function (key) { renderer_grid_view_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { renderer_grid_view_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction renderer_grid_view_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nregister(\'grid-view\', function (options) {\n  var className = options.props.className;\n\n  var style = renderer_grid_view_objectSpread({}, options.props.style);\n\n  var gridProps = options.gridProps;\n  gridProps.columns = options.gridColumns;\n  gridProps.rowKey = options.props.rowKey;\n\n  if (isNotEmptyString(options.props.rowHeight)) {\n    gridProps.rowHeight = Number(options.props.rowHeight);\n  }\n\n  if (options.props.headerRowHeight) gridProps.headerRowHeight = options.props.headerRowHeight;\n\n  if (options.props.autoHeight) {\n    style.minHeight = options.props.minHeight;\n\n    if (isNotEmptyString(options.props.offSet)) {\n      style.height = \'calc(100vh - \' + options.props.offSet + \')\';\n    } else {\n      style.height = \'100vh\';\n    }\n\n    className = (isUndefined(className) ? \'\' : className + \' \') + \'dwkit-gridview-autoHeight\';\n  } else {\n    if (isNotEmptyString(options.props.minHeight)) {\n      gridProps.minHeight = options.props.minHeight;\n    }\n  }\n\n  if (options.props.multiselect) {\n    gridProps.rowSelection = {\n      onRowsSelected: options.onRowsSelected,\n      onRowsDeselected: options.onRowsDeselected,\n      selectBy: options.selectBy\n    };\n  }\n\n  return /*#__PURE__*/external_react_default.a.createElement("div", {\n    key: options.props.name,\n    name: options.props.name,\n    className: className,\n    style: style\n  }, /*#__PURE__*/external_react_default.a.createElement(external_react_data_grid_default.a, grid_view_extends({\n    key: "grid"\n  }, gridProps, {\n    rowsCount: options.state.rowsCount,\n    rowGetter: options.gridRowGetter,\n    onRowClick: options.gridOnRowClick,\n    onGridSort: options.handleGridSort\n  })));\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/header.jsx\nfunction header_extends() { header_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return header_extends.apply(this, arguments); }\n\n\n\n\nregister(\'header\', function (options) {\n  return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Header"], header_extends({}, options.propsControl, {\n    textAlign: options.model.textAlign,\n    size: options.model.size,\n    content: options.props.content,\n    subheader: options.props.subheader\n  }));\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/image.jsx\nfunction image_extends() { image_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return image_extends.apply(this, arguments); }\n\n\n\n\n\nvar download = function download(options, callback) {\n  var token = options.props.value;\n  var request = new XMLHttpRequest();\n  request.open(\'POST\', options.me.props.additionalParams.downloadUrl + token, true);\n  request.responseType = \'blob\';\n\n  request.onload = function () {\n    var reader = new FileReader();\n\n    reader.onloadend = function () {\n      callback(token, this.result);\n    };\n\n    reader.readAsDataURL(request.response);\n  };\n\n  request.send(null);\n};\n\nregister(\'image\', function (options) {\n  var src = options.props.src;\n\n  if (typeof options.props.value == "string" && options.props.value.length == 32) {\n    if (options.props.value == options.me.state.token) {\n      src = options.me.state.source;\n    } else {\n      download(options, function (token, source) {\n        options.me.setState({\n          token: token,\n          source: source\n        });\n      });\n    }\n  }\n\n  return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Image"], image_extends({}, options.propsControl, {\n    avatar: options.model.avatar,\n    bordered: options.model.bordered,\n    centered: options.model.centered,\n    disabled: options.model.disabled,\n    inline: options.model.inline,\n    href: options.props.href,\n    src: src,\n    floated: options.model.floated,\n    shape: options.model.shape,\n    spaced: options.model.spaced,\n    verticalAlign: options.model.verticalAlign,\n    height: options.model.height,\n    width: options.model.width\n  }));\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/input.jsx\nfunction input_extends() { input_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return input_extends.apply(this, arguments); }\n\n\n\n\nregister(\'input\', function (options) {\n  if (options.propsControl.type === \'file\') {\n    options.propsControl.isForm = !options.propsControl.labelPosition || options.isForm;\n    return /*#__PURE__*/external_react_default.a.createElement(upload_Upload, input_extends({}, options.propsControl, {\n      downloadUrl: options.props.additionalParams.downloadUrl,\n      uploadUrl: options.props.additionalParams.uploadUrl\n    }));\n  }\n\n  if (options.propsControl.type === \'date\' || options.propsControl.type === \'time\' || options.propsControl.type === \'datetime\') {\n    options.propsControl.isForm = !options.propsControl.labelPosition || options.isForm;\n    return /*#__PURE__*/external_react_default.a.createElement(date_picker_DatePicker, options.propsControl);\n  }\n\n  if (!options.propsControl.labelPosition || options.isForm) {\n    return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Input, options.propsControl);\n  }\n\n  return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Input"], options.propsControl);\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/label.jsx\nfunction label_extends() { label_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return label_extends.apply(this, arguments); }\n\n\n\n\nregister(\'label\', function (options) {\n  return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Label"], label_extends({}, options.propsControl, {\n    size: options.model.size,\n    content: options.props.content,\n    attached: options.model.attached,\n    basic: options.model.basic,\n    circular: options.model.circular,\n    corner: options.model.corner,\n    floating: options.model.floating,\n    pointing: options.model.pointing\n  }));\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/menu-group.jsx\n\n\n\nregister(\'menu-group\', function (options) {\n  function renderItems(items, keyPrefix) {\n    var children = [];\n\n    if (isUndefined(keyPrefix)) {\n      keyPrefix = \'\';\n    }\n\n    for (var i = 0; i < items.length; i++) {\n      var item = items[i];\n\n      if (isDefined(item.visibleCondition) && item.visibleCondition !== null && item.visibleCondition !== \'\') {\n        var args = \'\';\n        var body = \'return \' + item.visibleCondition;\n\n        try {\n          if (!new Function(args, body)()) {\n            continue;\n          }\n        } catch (e) {}\n      }\n\n      var key = String(keyPrefix) + String(i);\n      var titleSpan = /*#__PURE__*/external_react_default.a.createElement("span", {\n        dangerouslySetInnerHTML: {\n          __html: item.title\n        }\n      });\n\n      if (Array.isArray(item.children) && item.children.length > 0) {\n        children.push( /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Menu"].Item, {\n          key: key\n        }, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Menu"].Header, null, titleSpan), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Menu"].Menu, null, renderItems(item.children, key + \'_\'))));\n      } else {\n        var content = options.props.link ? /*#__PURE__*/external_react_default.a.createElement("a", {\n          style: {\n            color: \'inherit\'\n          },\n          href: item.target,\n          onClick: options.handleItemClick2.bind(options.me, {\n            name: item.target\n          })\n        }, titleSpan) : titleSpan;\n\n        if (options.props.link) {\n          children.push( /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Menu"].Item, {\n            key: key,\n            name: item.target,\n            active: options.state.activeitem === item.target\n          }, content));\n        } else {\n          children.push( /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Menu"].Item, {\n            key: key,\n            name: item.target,\n            active: options.state.activeitem === item.target,\n            onClick: options.handleItemClick\n          }, content));\n        }\n      }\n    }\n\n    return children;\n  }\n\n  var children = renderItems(options.items);\n  var controlProps = {};\n\n  for (var p in options.props) {\n    if (p == \'data-items\' || p == \'activeItem\' || p == \'handleEvent\' || p == \'link\') {\n      continue;\n    }\n\n    controlProps[p] = options.props[p];\n  }\n\n  return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Menu"], controlProps, children);\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/message.jsx\nfunction message_extends() { message_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return message_extends.apply(this, arguments); }\n\n\n\n\nregister(\'message\', function (options) {\n  return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Message"], message_extends({}, options.propsControl, {\n    floated: options.model.floated,\n    size: options.model.size,\n    content: options.props.content,\n    compact: options.model.compact,\n    error: options.model.error,\n    floating: options.model.floating,\n    info: options.model.info,\n    negative: options.model.negative,\n    positive: options.model.positive,\n    success: options.model.success,\n    warning: options.model.warning,\n    header: options.props.header\n  }));\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/null-control.jsx\n\n\nregister(\'null-control\', function (options) {\n  return /*#__PURE__*/external_react_default.a.createElement("div", {\n    key: options.key\n  }, options.text);\n});\n// EXTERNAL MODULE: external "react-number-format"\nvar external_react_number_format_ = __webpack_require__(20);\nvar external_react_number_format_default = /*#__PURE__*/__webpack_require__.n(external_react_number_format_);\n\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/number-format.jsx\n\n\n\n\nregister(\'number-format\', function (options) {\n  options.propsControl.customInput = !options.propsControl.labelPosition || options.isForm ? external_semantic_ui_react_["Form"].Input : external_semantic_ui_react_["Input"];\n  return /*#__PURE__*/external_react_default.a.createElement(external_react_number_format_default.a, options.propsControl);\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/popup.jsx\n\n\n\nregister(\'popup\', function (options) {\n  return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Popup"], {\n    key: options.key,\n    trigger: options.trigger,\n    on: options.popupOn,\n    position: options.popupPosition,\n    className: options.className,\n    header: options.header,\n    content: options.content,\n    style: {\n      opacity: options.show ? 1 : 0\n    }\n  });\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/radio-group.jsx\nvar radio_group_excluded = ["additionalParams", "items", "propertyName", "handleEvent"];\n\nfunction radio_group_extends() { radio_group_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return radio_group_extends.apply(this, arguments); }\n\nfunction radio_group_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = radio_group_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction radio_group_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\nregister(\'radio-group\', function (options) {\n  var fields = options.props.items.map(function (item) {\n    var key = item.key ? item.key : item.value;\n    return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Field, {\n      key: key + \'_formfield\'\n    }, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Radio, {\n      key: key,\n      label: item.text,\n      name: options.props.name + \'_radioGroup\',\n      value: item.value,\n      readOnly: options.props.readOnly,\n      checked: options.props.value === item.value,\n      onChange: options.onChange\n    }));\n  }, options);\n\n  var _options$props = options.props,\n      additionalParams = _options$props.additionalParams,\n      items = _options$props.items,\n      propertyName = _options$props.propertyName,\n      handleEvent = _options$props.handleEvent,\n      props = radio_group_objectWithoutProperties(_options$props, radio_group_excluded);\n\n  var className = options.props.className;\n\n  if (!className) {\n    className = \'\';\n  }\n\n  if (options.props.error) {\n    className += \' error\';\n  }\n\n  className += \' field\';\n\n  if (options.props.direction === \'v\') {\n    className += \' ui form\';\n    return /*#__PURE__*/external_react_default.a.createElement("div", radio_group_extends({}, props, {\n      className: className\n    }), /*#__PURE__*/external_react_default.a.createElement("label", null, options.props.label), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"], null, fields));\n  }\n\n  return /*#__PURE__*/external_react_default.a.createElement("div", radio_group_extends({}, props, {\n    className: "ui form"\n  }), /*#__PURE__*/external_react_default.a.createElement("div", {\n    className: className\n  }, /*#__PURE__*/external_react_default.a.createElement("label", null, options.props.label), /*#__PURE__*/external_react_default.a.createElement("div", {\n    style: options.props.style\n  }, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Group, {\n    key: "group"\n  }, fields))));\n});\n// EXTERNAL MODULE: external "react-slick"\nvar external_react_slick_ = __webpack_require__(21);\nvar external_react_slick_default = /*#__PURE__*/__webpack_require__.n(external_react_slick_);\n\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/repeater.jsx\n\n\n\n\nregister(\'repeater\', function (options) {\n  function renderItems(data, rowsCount, addContainer) {\n    var me = options.me;\n    var res = [];\n    var index = 0;\n\n    if (Array.isArray(data) && data.length > 0) {\n      data.forEach(function (item) {\n        var itemElement = renderItem(index, item, !index && me.props.controlProps.buildermode);\n\n        if (isDefined(itemElement)) {\n          if (addContainer) {\n            res.push( /*#__PURE__*/external_react_default.a.createElement("div", {\n              key: index\n            }, itemElement));\n          } else {\n            res.push(itemElement);\n          }\n        }\n\n        index++;\n      });\n    } else if (options.props.controlProps.buildermode) {\n      var itemElement = renderItem(index, {}, index === 0);\n\n      if (isDefined(itemElement)) {\n        if (addContainer) {\n          res.push( /*#__PURE__*/external_react_default.a.createElement("div", null, itemElement));\n        } else {\n          res.push(itemElement);\n        }\n      }\n    } else if (!options.state.loading && options.isServerMode) {\n      var buttonLabel = options.props.noRecordsLabel;\n\n      if (isUndefined(buttonLabel) || buttonLabel == \'\') {\n        buttonLabel = \'No records. Refresh...\';\n      }\n\n      var button = /*#__PURE__*/external_react_default.a.createElement("div", {\n        key: "norecords",\n        className: "dwkit-repeater-norecords"\n      }, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Button"], {\n        onClick: options.loadNextPage\n      }, buttonLabel));\n      res.push(button);\n    }\n\n    if (!options.state.loading && options.isServerMode && rowsCount > data.length && data.length > 0) {\n      var _buttonLabel = options.props.loadButtonLabel;\n\n      if (isUndefined(_buttonLabel) || _buttonLabel == \'\') {\n        _buttonLabel = \'Load more...\';\n      }\n\n      var _button = /*#__PURE__*/external_react_default.a.createElement("div", {\n        key: "loadmore",\n        className: "dwkit-repeater-loadmore"\n      }, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Button"], {\n        onClick: options.loadNextPage\n      }, _buttonLabel));\n\n      res.push(_button);\n    }\n\n    return res;\n  }\n\n  function renderItem(index, item, includeDropzone) {\n    //Checking visible condition in builder mode\n    if (!options.props.controlProps.buildermode) {\n      if (options.props[\'item-visibleCondition\'] !== \'\' && options.props[\'item-visibleCondition\'] !== undefined && options.props[\'item-visibleCondition\'] !== null) {\n        var args = \'data\';\n        var body = \'return \' + options.props[\'item-visibleCondition\'];\n\n        try {\n          if (!new Function(args, body)(item)) {\n            return undefined;\n          }\n        } catch (e) {\n          return undefined;\n        }\n      }\n    }\n\n    var element = undefined;\n    var createBuilderDropzone = options.props.controlProps.createBuilderDropzone;\n\n    if (isDefined(options.props.placeholders) && Array.isArray(options.props.placeholders[options.psTemplate]) && options.props.placeholders[options.psTemplate].length > 0) {\n      var model = options.props.placeholders[options.psTemplate];\n\n      if (isDefined(model)) {\n        element = /*#__PURE__*/external_react_default.a.createElement(repeater_control_RepeaterControl, {\n          key: index,\n          parent: options.me,\n          model: model,\n          psTemplate: options.psTemplate,\n          item: item,\n          controlProps: options.props.controlProps,\n          includeDropzone: includeDropzone,\n          errors: Array.isArray(options.props.error) ? options.props.error[index] : undefined,\n          index: index,\n          handleChange: options.handleChange,\n          data: options.props.data,\n          parentItem: options.props.model\n        });\n      }\n    } else if (includeDropzone && createBuilderDropzone) {\n      element = createBuilderDropzone(\'repeater_dropzone_footer\', options.props.model.key, undefined, undefined, options.psTemplate);\n    }\n\n    return element;\n  }\n\n  var className = \'dwkit-repeater\';\n\n  if (options.props.className) {\n    className += \' \' + options.props.className;\n  }\n\n  if (options.isServerMode) {\n    if (options.state.firstLoad) {\n      options.state.firstLoad = false;\n      options.loadNextPage();\n      return /*#__PURE__*/external_react_default.a.createElement("div", {\n        className: className,\n        style: options.props.style\n      }, options.state.loading && /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Loader"], {\n        active: true,\n        inline: "centered"\n      }));\n    }\n  }\n\n  if (options.props.slider && options.state.items.length > 0) {\n    var settings = {\n      dots: true,\n      infinite: true,\n      speed: 500,\n      slidesToShow: 1,\n      slidesToScroll: 1\n    };\n    return /*#__PURE__*/external_react_default.a.createElement("div", {\n      className: className,\n      style: options.props.style\n    }, /*#__PURE__*/external_react_default.a.createElement(external_react_slick_default.a, settings, renderItems(options.state.items, options.state.rowsCount, true)), options.state.loading && /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Loader"], {\n      active: true,\n      inline: "centered"\n    }));\n  }\n\n  return /*#__PURE__*/external_react_default.a.createElement("div", {\n    className: className,\n    style: options.props.style\n  }, renderItems(options.state.items, options.state.rowsCount), options.state.loading && /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Loader"], {\n    active: true,\n    inline: "centered"\n  }));\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/row-loading-renderer.jsx\nfunction row_loading_renderer_extends() { row_loading_renderer_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return row_loading_renderer_extends.apply(this, arguments); }\n\n\n\n\nregister(\'row-loading-renderer\', function (options) {\n  return /*#__PURE__*/external_react_default.a.createElement("div", {\n    className: options.className\n  }, /*#__PURE__*/external_react_default.a.createElement(external_react_data_grid_["Row"], row_loading_renderer_extends({\n    ref: function ref(node) {\n      return options.me.row = node;\n    }\n  }, options.props)));\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/search.jsx\nfunction search_extends() { search_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return search_extends.apply(this, arguments); }\n\n\n\n\nregister(\'search\', function (options) {\n  return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Search"], search_extends({}, options.controlProps, {\n    fluid: true,\n    loading: options.state.isLoading,\n    onResultSelect: options.handleResultSelect,\n    onSearchChange: options.handleSearchChange,\n    results: options.state.results,\n    value: options.state.value\n  }));\n});\n// EXTERNAL MODULE: ./node_modules/react-signature-canvas/build/index.js\nvar react_signature_canvas_build = __webpack_require__(22);\nvar react_signature_canvas_build_default = /*#__PURE__*/__webpack_require__.n(react_signature_canvas_build);\n\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/signature.jsx\nfunction renderer_signature_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { renderer_signature_typeof = function _typeof(obj) { return typeof obj; }; } else { renderer_signature_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return renderer_signature_typeof(obj); }\n\nfunction signature_extends() { signature_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return signature_extends.apply(this, arguments); }\n\nfunction renderer_signature_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction renderer_signature_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction renderer_signature_createClass(Constructor, protoProps, staticProps) { if (protoProps) renderer_signature_defineProperties(Constructor.prototype, protoProps); if (staticProps) renderer_signature_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction renderer_signature_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) renderer_signature_setPrototypeOf(subClass, superClass); }\n\nfunction renderer_signature_setPrototypeOf(o, p) { renderer_signature_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return renderer_signature_setPrototypeOf(o, p); }\n\nfunction renderer_signature_createSuper(Derived) { var hasNativeReflectConstruct = renderer_signature_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = renderer_signature_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = renderer_signature_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return renderer_signature_possibleConstructorReturn(this, result); }; }\n\nfunction renderer_signature_possibleConstructorReturn(self, call) { if (call && (renderer_signature_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return renderer_signature_assertThisInitialized(self); }\n\nfunction renderer_signature_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction renderer_signature_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction renderer_signature_getPrototypeOf(o) { renderer_signature_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return renderer_signature_getPrototypeOf(o); }\n\nfunction renderer_signature_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\nvar signature_SignatureControl = /*#__PURE__*/function (_React$Component) {\n  renderer_signature_inherits(SignatureControl, _React$Component);\n\n  var _super = renderer_signature_createSuper(SignatureControl);\n\n  function SignatureControl(_props) {\n    var _this;\n\n    renderer_signature_classCallCheck(this, SignatureControl);\n\n    _this = _super.call(this, _props);\n\n    renderer_signature_defineProperty(renderer_signature_assertThisInitialized(_this), "labels", function () {\n      return {\n        draw: _this.props.compact ? null : _this.props.drawLabel || \'Draw signature\',\n        clear: _this.props.clearCanvasLabel || \'Clear canvas\',\n        upload: _this.props.uploadLabel || \'Upload\',\n        cancel: _this.props.cancelLabel || \'Cancel\'\n      };\n    });\n\n    renderer_signature_defineProperty(renderer_signature_assertThisInitialized(_this), "upload", function () {\n      var _assertThisInitialize = renderer_signature_assertThisInitialized(_this),\n          props = _assertThisInitialize.props;\n\n      var dataUrl = _this.sigPad.current.getCanvas().toDataURL("image/png");\n\n      uploadDataUrl(dataUrl, props.uploadUrl, function (formData, jsonData) {\n        props.onUpload(formData, jsonData);\n      });\n\n      _this.setState({\n        open: false\n      });\n    });\n\n    renderer_signature_defineProperty(renderer_signature_assertThisInitialized(_this), "onClear", function () {\n      _this.sigPad.current.clear();\n    });\n\n    _this.state = {\n      open: false\n    };\n    _this.sigPad = /*#__PURE__*/Object(external_react_["createRef"])();\n    return _this;\n  }\n\n  renderer_signature_createClass(SignatureControl, [{\n    key: "render",\n    value: function render() {\n      var _this2 = this;\n\n      var props = this.props,\n          labels = this.labels;\n\n      var signatureModal = function signatureModal() {\n        return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Modal"], {\n          open: _this2.state.open,\n          style: {\n            width: \'max-content\'\n          }\n        }, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Modal"].Header, null, "Draw signature"), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Modal"].Content, null, /*#__PURE__*/external_react_default.a.createElement("div", {\n          className: "signature-canvas-container"\n        }, /*#__PURE__*/external_react_default.a.createElement(react_signature_canvas_build_default.a, {\n          ref: _this2.sigPad,\n          canvasProps: {\n            className: "canvas ui basic button"\n          }\n        }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Button"], {\n          fluid: true,\n          content: labels().clear,\n          className: "ui button",\n          onClick: _this2.onClear,\n          icon: "cancel"\n        }))), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Modal"].Actions, null, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Button"], {\n          className: "buttontype1",\n          content: labels().upload,\n          download: true,\n          onClick: _this2.upload,\n          icon: "check"\n        }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Button"], {\n          className: "buttontype2",\n          content: labels().cancel,\n          onClick: function onClick() {\n            return _this2.setState({\n              open: false\n            });\n          }\n        })));\n      };\n\n      return props.value ? /*#__PURE__*/external_react_default.a.createElement(semantic_web_UploadedImage, signature_extends({}, props, {\n        clear: props.onClear\n      })) : /*#__PURE__*/external_react_default.a.createElement("div", null, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Button"], {\n        content: labels().draw,\n        basic: true,\n        fluid: props.fluid,\n        onClick: function onClick() {\n          return _this2.setState({\n            open: true\n          });\n        },\n        icon: "signup"\n      }), signatureModal());\n    }\n  }]);\n\n  return SignatureControl;\n}(external_react_default.a.Component);\n\nregister(\'signature\', function (options) {\n  var props = options.props;\n  var containerWidthStyle = props.compact && props.showPreview ? {\n    minWidth: 160\n  } : {};\n  return /*#__PURE__*/external_react_default.a.createElement("div", {\n    className: "field",\n    style: containerWidthStyle\n  }, options.props.label && /*#__PURE__*/external_react_default.a.createElement("label", null, options.props.label), /*#__PURE__*/external_react_default.a.createElement(signature_SignatureControl, signature_extends({}, props, {\n    onUpload: options.onUpload,\n    onClear: options.onClear\n  })));\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/statistic.jsx\nfunction statistic_extends() { statistic_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return statistic_extends.apply(this, arguments); }\n\n\n\n\nregister(\'statistic\', function (options) {\n  return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Statistic"].Group, statistic_extends({}, options.propsControl, {\n    floated: options.model.floated,\n    horizontal: options.model.horizontal,\n    size: options.model.size,\n    items: options.items\n  }));\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/static-content.jsx\nfunction static_content_extends() { static_content_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return static_content_extends.apply(this, arguments); }\n\n\n\nregister(\'static-content\', function (options) {\n  if (options.props.isHtml) {\n    return /*#__PURE__*/external_react_default.a.createElement("span", static_content_extends({}, options.spanProps, {\n      dangerouslySetInnerHTML: {\n        __html: options.props.content\n      }\n    }));\n  }\n\n  var content = isDefined(options.props.content) ? options.props.content.replace(\'\\n\', \'<br/>\') : undefined;\n  return /*#__PURE__*/external_react_default.a.createElement("span", options.spanProps, content);\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/style-button.jsx\n\n\nregister(\'style-button\', function (options) {\n  var className = \'RichEditor-styleButton\';\n\n  if (options.props.active) {\n    className += \' RichEditor-activeButton\';\n  }\n\n  return /*#__PURE__*/external_react_default.a.createElement("span", {\n    className: className,\n    onMouseDown: options.me.onToggle\n  }, options.props.label);\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/tab-group.jsx\n\n\n\nregister(\'tab-group\', function (options) {\n  var menuProps = {};\n  menuProps.pointing = options.props.pointing;\n  menuProps.secondary = options.props.secondary;\n  menuProps.tabular = options.props.tabular;\n  menuProps.fluid = options.props.fluid;\n  menuProps.vertical = options.props.vertical;\n  var className = options.props.className;\n\n  if (options.props.scroll) {\n    className = \'dwkit-tabgroup\';\n  }\n\n  return /*#__PURE__*/external_react_default.a.createElement("div", {\n    className: className,\n    style: options.props.style\n  }, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Tab"], {\n    menu: menuProps,\n    panes: options.panes,\n    renderActiveOnly: false,\n    onTabChange: options.onTabChange,\n    activeIndex: options.activeIndex\n  }));\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/text-area.jsx\n\n\n\nregister(\'textarea\', function (options) {\n  if (!options.propsControl.labelPosition || options.isForm) {\n    return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].TextArea, options.propsControl);\n  }\n\n  var divClass = \'ui labeled input\';\n\n  if (options.propsControl.fluid) {\n    divClass += \' fluid\';\n  }\n\n  if (options.propsControl.error) {\n    divClass += \' error\';\n  }\n\n  if (isNotEmptyString(options.props.className)) {\n    divClass += \' \' + options.props.className;\n  }\n\n  return /*#__PURE__*/external_react_default.a.createElement("div", {\n    className: divClass\n  }, options.propsControl.label && /*#__PURE__*/external_react_default.a.createElement("div", {\n    className: "ui label label"\n  }, options.propsControl.label), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["TextArea"], options.propsControl));\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/tree-picker.jsx\nfunction tree_picker_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { tree_picker_typeof = function _typeof(obj) { return typeof obj; }; } else { tree_picker_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return tree_picker_typeof(obj); }\n\nfunction tree_picker_extends() { tree_picker_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return tree_picker_extends.apply(this, arguments); }\n\nfunction tree_picker_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = tree_picker_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }\n\nfunction tree_picker_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return tree_picker_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return tree_picker_arrayLikeToArray(o, minLen); }\n\nfunction tree_picker_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction tree_picker_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction tree_picker_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction tree_picker_createClass(Constructor, protoProps, staticProps) { if (protoProps) tree_picker_defineProperties(Constructor.prototype, protoProps); if (staticProps) tree_picker_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction tree_picker_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) tree_picker_setPrototypeOf(subClass, superClass); }\n\nfunction tree_picker_setPrototypeOf(o, p) { tree_picker_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return tree_picker_setPrototypeOf(o, p); }\n\nfunction tree_picker_createSuper(Derived) { var hasNativeReflectConstruct = tree_picker_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = tree_picker_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = tree_picker_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return tree_picker_possibleConstructorReturn(this, result); }; }\n\nfunction tree_picker_possibleConstructorReturn(self, call) { if (call && (tree_picker_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return tree_picker_assertThisInitialized(self); }\n\nfunction tree_picker_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction tree_picker_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction tree_picker_getPrototypeOf(o) { tree_picker_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return tree_picker_getPrototypeOf(o); }\n\nfunction tree_picker_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\nvar tree_picker_TreePicker = /*#__PURE__*/function (_Component) {\n  tree_picker_inherits(TreePicker, _Component);\n\n  var _super = tree_picker_createSuper(TreePicker);\n\n  function TreePicker(props) {\n    var _this;\n\n    tree_picker_classCallCheck(this, TreePicker);\n\n    _this = _super.call(this, props);\n\n    tree_picker_defineProperty(tree_picker_assertThisInitialized(_this), "onMount", function (header) {\n      _this.modal = external_jquery_default()(external_react_dom_default.a.findDOMNode(header)).parent();\n      _this.count = external_jquery_default()(\'.count\', _this.modal);\n      _this.tabs = {\n        tree: external_jquery_default()(\'.tree-tab\', _this.modal),\n        search: external_jquery_default()(\'.search-tab\', _this.modal),\n        picked: external_jquery_default()(\'.picked-tab\', _this.modal)\n      };\n      external_jquery_default()(\'.menu .tree\', _this.modal).on(\'click\', function () {\n        return _this.showTree();\n      });\n      external_jquery_default()(\'.menu .picked\', _this.modal).on(\'click\', function () {\n        return _this.showPicked();\n      });\n      external_jquery_default()(\'.search input\', _this.modal).on(\'keyup\', function (e) {\n        return _this.showSearch(external_jquery_default()(e.currentTarget).val());\n      });\n\n      if (_this.nodes.length) {\n        if (!_this.props.paging) {\n          _this.updatePickedNodes(_this.getPicked());\n\n          _this.updatePickedCount();\n        } else {\n          _this.loadCurrentValue();\n        }\n\n        _this.initializeNodes(_this.nodes);\n      }\n    });\n\n    tree_picker_defineProperty(tree_picker_assertThisInitialized(_this), "pickSearch", function () {\n      external_jquery_default()(\'.search-tab .node:not(.picked) .name\', _this.modal).trigger(\'click\');\n    });\n\n    tree_picker_defineProperty(tree_picker_assertThisInitialized(_this), "unpickSearch", function () {\n      external_jquery_default()(\'.search-tab .node.picked .name\', _this.modal).trigger(\'click\');\n    });\n\n    tree_picker_defineProperty(tree_picker_assertThisInitialized(_this), "unpickPicked", function () {\n      external_jquery_default()(\'.picked-tab .node.picked .name\', _this.modal).trigger(\'click\');\n    });\n\n    tree_picker_defineProperty(tree_picker_assertThisInitialized(_this), "handleOpen", function () {\n      if (!_this.state.visible) {\n        _this.setState({\n          visible: true\n        });\n      }\n    });\n\n    tree_picker_defineProperty(tree_picker_assertThisInitialized(_this), "handleClose", function () {\n      _this.setState({\n        visible: false\n      });\n    });\n\n    tree_picker_defineProperty(tree_picker_assertThisInitialized(_this), "handleSave", function () {\n      var value;\n\n      if (_this.props.multiple) {\n        value = _this.picked.map(function (x) {\n          return x.id;\n        });\n      } else {\n        value = _this.picked.length ? _this.picked[0].id : null;\n      }\n\n      var additionalValues = _this.getAdditionalValues(value);\n\n      _this.onChange(value, additionalValues);\n\n      _this.setState({\n        visible: false\n      });\n    });\n\n    tree_picker_defineProperty(tree_picker_assertThisInitialized(_this), "onDropdownChange", function (_, _ref) {\n      var value = _ref.value;\n\n      var additionalValues = _this.getAdditionalValues(value);\n\n      _this.onChange(value, additionalValues);\n    });\n\n    _this.state = {\n      visible: false,\n      value: _this.props.value\n    };\n    _this.converter = new StructureConverter({\n      children: _this.props.childrenKey\n    });\n    return _this;\n  }\n\n  tree_picker_createClass(TreePicker, [{\n    key: "componentDidMount",\n    value: function componentDidMount() {\n      this.widget = external_jquery_default()(external_react_dom_default.a.findDOMNode(this));\n      this.nodes = [];\n      this.tabs = {};\n      this.picked = [];\n      this.opened = [];\n      this.checkFetch();\n    }\n  }, {\n    key: "componentDidUpdate",\n    value: function componentDidUpdate(_prevProps, _prevState) {\n      this.checkFetch();\n    }\n  }, {\n    key: "checkFetch",\n    value: function checkFetch() {\n      if (this.state.needFetch) {\n        this.getAdditionalData(null);\n      } else if (this.state.needValueFetch) {\n        this.loadCurrentValue();\n      }\n    }\n  }, {\n    key: "getNodeById",\n    value: function getNodeById(id) {\n      var nodes = this.recursiveNodeSearch(this.nodes, function (node) {\n        return "".concat(node.id) === "".concat(id);\n      });\n\n      if (nodes.length) {\n        return nodes[0];\n      }\n\n      return null;\n    }\n  }, {\n    key: "getPicked",\n    value: function getPicked() {\n      var picked = [];\n\n      if (!this.props.multiple) {\n        if (this.props.value) {\n          picked.push(this.props.value);\n        }\n      } else {\n        return this.getArrayValues(this.props.value);\n      }\n\n      return picked;\n    }\n  }, {\n    key: "updatePickedNodes",\n    value: function updatePickedNodes(picked) {\n      if (picked) {\n        this.picked = [];\n\n        var getComparator = function getComparator(id) {\n          return function (node) {\n            return "".concat(node.id) === "".concat(id);\n          };\n        };\n\n        var _iterator = tree_picker_createForOfIteratorHelper(picked),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var id = _step.value;\n            var searchResult = this.recursiveNodeSearch(this.nodes, getComparator(id));\n\n            if (searchResult.length) {\n              this.picked.push(searchResult[0]);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n  }, {\n    key: "initializeNodes",\n    value: function initializeNodes(nodes) {\n      var tree = this.renderTree(nodes, this.state.rowsCount, null, 0, {\n        height: \'400px\',\n        overflowY: \'scroll\'\n      });\n      this.tabs.tree.html(tree);\n      return this.initializeNodeList(tree);\n    }\n  }, {\n    key: "recursiveNodeSearch",\n    value: function recursiveNodeSearch(nodes, comparator) {\n      var results = [];\n      if (!Array.isArray(nodes)) return results;\n\n      for (var _i2 = 0, _Array$from = Array.from(nodes); _i2 < _Array$from.length; _i2++) {\n        var node = _Array$from[_i2];\n\n        if (comparator(node)) {\n          results.push(node);\n        }\n\n        if (node[this.props.childrenKey] && node[this.props.childrenKey].length) {\n          results = results.concat(this.recursiveNodeSearch(node[this.props.childrenKey], comparator));\n        }\n      }\n\n      return results;\n    }\n  }, {\n    key: "renderTree",\n    value: function renderTree(nodes, nodesCount, parentNodeId, startIndex, css) {\n      var node, nodeElement, _i, _len;\n\n      if (!css) {\n        css = {};\n      }\n\n      var tree = external_jquery_default()(\'<div class="ui tree-picker tree"></div>\').css(css);\n\n      for (_i = 0, _len = nodes.length; _i < _len; _i++) {\n        node = nodes[_i];\n        var openedStyle = this.opened.includes(node.id) ? \' opened\' : \'\';\n\n        if (this.props.hidden(node)) {\n          continue;\n        }\n\n        nodeElement = external_jquery_default()("<div class=\\"node".concat(openedStyle, "\\" data-id=\\"").concat(node.id, "\\" data-name=\\"").concat(node.name, "\\">\\n    <div class=\\"head\\">\\n        <i class=\\"add circle icon\\"></i>\\n        <i class=\\"minus circle icon\\"></i>\\n        <i class=\\"radio icon\\"></i>\\n        <a class=\\"name\\">").concat(node.name, "</a>\\n        <i class=\\"checkmark icon\\"></i>\\n    </div>\\n    <div class=\\"content").concat(openedStyle, "\\"></div>\\n</div>")).appendTo(tree);\n\n        if (this.props.disabledClause(node)) {\n          nodeElement.addClass(\'disabled\');\n        }\n\n        if (node[this.props.childrenKey] && node[this.props.childrenKey].length) {\n          external_jquery_default()(\'.content\', nodeElement).append(this.renderTree(node[this.props.childrenKey], node.rowsCount, node.id, 0));\n        } else if (!node.hasChild) {\n          nodeElement.addClass(\'childless\');\n        }\n      }\n\n      if (this.props.paging && nodes.length + startIndex < nodesCount) {\n        external_jquery_default()("<div class=\\"node pager\\" data-parent-id=\\"".concat(parentNodeId, "\\" data-start-index=\\"").concat(nodes.length + startIndex, "\\">\\n    <div class=\\"head\\">\\n        <a class=\\"name\\">...</a>\\n    </div>\\n</div>")).appendTo(tree);\n      }\n\n      return tree;\n    }\n  }, {\n    key: "initializeNodeList",\n    value: function initializeNodeList(tree) {\n      var _this2 = this;\n\n      external_jquery_default()(\'.node\', tree).each(function (_, domNode) {\n        var node = external_jquery_default()(domNode);\n        var head = external_jquery_default()(\'>.head\', node);\n        var content = external_jquery_default()(\'>.content\', node);\n        external_jquery_default()(\'>.name\', head).on(\'click\', function () {\n          if (node.hasClass(\'pager\')) {\n            _this2.pagerClicked(node);\n          } else {\n            _this2.nodeClicked(node);\n          }\n        });\n\n        if (_this2.nodeIsPicked(node)) {\n          node.addClass(\'picked\');\n        }\n\n        if (!node.hasClass(\'childless\')) {\n          external_jquery_default()(\'>.icon\', head).on(\'click\', function () {\n            var nodeObj = _this2.getNodeById(_this2.getNodeId(node));\n\n            if (nodeObj && nodeObj.hasChild && (!nodeObj[_this2.props.childrenKey] || !nodeObj[_this2.props.childrenKey].length)) {\n              _this2.getAdditionalData(nodeObj.id, node);\n            } else {\n              content.slideToggle();\n            }\n\n            node.toggleClass(\'opened\');\n\n            if (_this2.opened.includes(nodeObj.id)) {\n              _this2.opened = _this2.opened.filter(function (x) {\n                return x !== nodeObj.id;\n              });\n            } else {\n              _this2.opened.push(nodeObj.id);\n            }\n          });\n        }\n      });\n    }\n  }, {\n    key: "pagerClicked",\n    value: function pagerClicked(node) {\n      this.getAdditionalData(node.data(\'parent-id\'), node, node.data(\'start-index\'));\n    }\n  }, {\n    key: "nodeClicked",\n    value: function nodeClicked(node) {\n      if (!node.hasClass(\'disabled\')) {\n        if (!this.props.multiple) {\n          if (this.picked.length && this.props.clearable) {\n            if (this.picked[0].id === this.getNodeId(node)) {\n              return this.unpickNode(node); // not repick selected node if \'clearable\' is on\n            }\n          }\n\n          external_jquery_default()(\'.node.picked\', this.modal).removeClass(\'picked\');\n          this.picked = [];\n        }\n\n        node.toggleClass(\'picked\');\n\n        if (node.hasClass(\'picked\')) {\n          return this.pickNode(node);\n        } else {\n          return this.unpickNode(node);\n        }\n      }\n    }\n  }, {\n    key: "nodeIsPicked",\n    value: function nodeIsPicked(node) {\n      var _this3 = this;\n\n      return this.picked.filter(function (n) {\n        return "".concat(n.id) === _this3.getNodeId(node);\n      }).length;\n    }\n  }, {\n    key: "updatePickedCount",\n    value: function updatePickedCount() {\n      if (this.picked.length) {\n        this.count.closest(\'.item\').addClass(\'highlighted\');\n        return this.count.html(\'(\' + this.picked.length + \')\');\n      } else {\n        this.count.closest(\'.item\').removeClass(\'highlighted\');\n        return this.count.html(\'\');\n      }\n    }\n  }, {\n    key: "getNodeId",\n    value: function getNodeId(node) {\n      return node.attr(\'data-id\');\n    }\n  }, {\n    key: "pickNode",\n    value: function pickNode(node) {\n      var id = this.getNodeId(node);\n      this.picked.push({\n        id: id,\n        name: node.attr(\'data-name\')\n      });\n      this.updatePickedCount();\n      return external_jquery_default()(\'.node[data-id=\' + id + \']\', this.modal).addClass(\'picked\');\n    }\n  }, {\n    key: "unpickNode",\n    value: function unpickNode(node) {\n      var id = this.getNodeId(node);\n      this.picked = this.picked.filter(function (n) {\n        return "".concat(n.id) !== "".concat(id);\n      });\n      this.updatePickedCount();\n      return external_jquery_default()(\'.node[data-id=\' + id + \']\', this.modal).removeClass(\'picked\');\n    }\n  }, {\n    key: "showTree",\n    value: function showTree() {\n      external_jquery_default()(\'.menu .item\', this.modal).removeClass(\'active\');\n      external_jquery_default()(\'.menu .tree\', this.modal).addClass(\'active\');\n      this.tabs.tree.show();\n      this.tabs.search.hide();\n      this.tabs.picked.hide();\n      return this.modal.attr(\'data-mode\', \'tree\');\n    }\n  }, {\n    key: "getColumnsForFilter",\n    value: function getColumnsForFilter() {\n      var pattern = new RegExp(\' asc\', \'gi\');\n      var res = this.props.columns.replace(pattern, \'\');\n      pattern = new RegExp(\' desc\', \'gi\');\n      res = res.replace(pattern, \'\');\n      pattern = new RegExp(\' \', \'gi\');\n      res = res.replace(pattern, \'\');\n      return res;\n    }\n  }, {\n    key: "showSearch",\n    value: function showSearch(query) {\n      var _this4 = this;\n\n      if (query !== null && query.length >= this.props.minSearchQueryLength) {\n        if (this.props.paging) {\n          var settings = {\n            model: this.state.dataModel,\n            filters: [{\n              column: this.getColumnsForFilter(),\n              term: \'like\',\n              value: query\n            }]\n          };\n          this.setState({\n            isFetching: true\n          }, function () {\n            _this4.state.getAdditionalDataForControl(_this4, settings, function (_ref2) {\n              var items = _ref2.items;\n\n              //TODO cancellation token from async request\n              _this4.setState({\n                isFetching: false\n              });\n\n              _this4.renderSearchResults(items, query);\n            });\n          });\n        } else {\n          var foundNodes = this.recursiveNodeSearch(this.nodes, function (node) {\n            return node.name && node.name.toLowerCase().indexOf(query.toLowerCase()) > -1;\n          });\n          this.renderSearchResults(foundNodes, query);\n        }\n      } else {\n        this.showTree();\n      }\n    }\n  }, {\n    key: "renderSearchResults",\n    value: function renderSearchResults(foundNodes, query) {\n      var list = this.renderList(foundNodes, {\n        height: \'400px\',\n        overflowY: \'scroll\'\n      });\n      external_jquery_default()(\'.menu .item\', this.modal).removeClass(\'active\');\n      this.tabs.search.show().html(list);\n      this.tabs.tree.hide();\n      this.tabs.picked.hide();\n      this.modal.attr(\'data-mode\', \'search\');\n      this.initializeNodeList(list);\n      external_jquery_default()(\'.name\', list).each(function () {\n        var name = external_jquery_default()(this).text();\n        var regex = RegExp(\'(\' + query + \')\', \'gi\');\n        name = name.replace(regex, \'<strong class=\\\'search-query\\\'>$1</strong>\');\n        external_jquery_default()(this).html(name);\n      });\n    }\n  }, {\n    key: "showPicked",\n    value: function showPicked() {\n      var list;\n      list = this.renderList(this.picked, {\n        height: \'400px\',\n        overflowY: \'scroll\'\n      });\n      external_jquery_default()(\'.menu .item\', this.modal).removeClass(\'active\');\n      external_jquery_default()(\'.menu .picked\', this.modal).addClass(\'active\');\n      this.tabs.picked.show().html(list);\n      this.tabs.tree.hide();\n      this.tabs.search.hide();\n      this.modal.attr(\'data-mode\', \'picked\');\n      return this.initializeNodeList(list);\n    }\n  }, {\n    key: "renderList",\n    value: function renderList(nodes, css) {\n      var list, node, nodeElement, _i, _len;\n\n      if (!css) {\n        css = {};\n      }\n\n      list = external_jquery_default()(\'<div class="ui tree-picker list"></div>\').css(css);\n\n      for (_i = 0, _len = nodes.length; _i < _len; _i++) {\n        node = nodes[_i];\n\n        if (this.props.hidden(node)) {\n          continue;\n        }\n\n        nodeElement = external_jquery_default()("<div class=\\"node\\" data-id=\\"".concat(node.id, "\\" data-name=\\"").concat(node.name, "\\">\\n    <div class=\\"head\\">\\n        <a class=\\"name\\">").concat(node.name, "</a>\\n        <i class=\\"checkmark icon\\"></i>\\n    </div>\\n    <div class=\\"content\\"></div>\\n</div>")).appendTo(list);\n\n        if (this.props.disabledClause(node)) {\n          nodeElement.addClass(\'disabled\');\n        }\n      }\n\n      return list;\n    }\n  }, {\n    key: "getAdditionalData",\n    value: function getAdditionalData(parentIdToFetch, domElement) {\n      var _this5 = this;\n\n      var startIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n      if (!this.state.dataModel) {\n        if (this.props.buildermode) {\n          console.log(\'TreePicker: Set DataModel label!\');\n        }\n      } else if (!this.state.getAdditionalDataForControl) {\n        if (this.props.buildermode) {\n          console.log(\'TreePicker: For paging on server need to set getAdditionalDataForControl func!\');\n        }\n      } else {\n        var settings = {\n          model: this.state.dataModel\n        };\n\n        if (this.props.paging) {\n          settings.startIndex = startIndex;\n          settings.pageSize = this.props.pageSize;\n        }\n\n        this.setState({\n          isFetching: true,\n          needFetch: false,\n          parentIdToFetch: parentIdToFetch\n        }, function () {\n          _this5.state.getAdditionalDataForControl(_this5, settings, function (_ref3) {\n            var items = _ref3.items,\n                rowsCount = _ref3.rowsCount;\n\n            //TODO cancellation token from async request\n            var nodes = _this5.converter.toNested(items, parentIdToFetch);\n\n            _this5.setData({\n              items: nodes,\n              rowsCount: rowsCount,\n              parentIdToFetch: parentIdToFetch\n            }, !startIndex);\n\n            if (!_this5.props.paging) {\n              _this5.updatePickedNodes(_this5.getPicked());\n\n              if (_this5.modal) {\n                _this5.initializeNodes(_this5.nodes);\n              }\n            } else if (_this5.state.visible) {\n              var tree = _this5.renderTree(nodes, rowsCount, parentIdToFetch, startIndex);\n\n              _this5.initializeNodeList(tree);\n\n              if (!startIndex) {\n                external_jquery_default()(\'.content\', domElement).append(tree);\n                external_jquery_default()(\'>.content\', domElement).slideToggle();\n              } else {\n                domElement.replaceWith(tree.children());\n              }\n            }\n\n            if (_this5.state.needValueFetch) {\n              _this5.loadCurrentValue();\n            }\n          });\n        });\n      }\n    }\n  }, {\n    key: "loadCurrentValue",\n    value: function loadCurrentValue() {\n      var _this6 = this;\n\n      this.picked = [];\n\n      if (this.props.value !== undefined && this.props.value !== null) {\n        if (this.props.multiple) {\n          var values = this.getArrayValues(this.props.value);\n          var unfindedValues = [];\n\n          for (var i = 0; i < values.length; i++) {\n            var value = values[i];\n            var searchResult = this.getNodeById(value);\n\n            if (!searchResult) {\n              unfindedValues.push(value);\n            } else {\n              this.picked.push(searchResult);\n            }\n          }\n\n          if (unfindedValues.length > 0) {\n            var settings = {\n              model: this.state.dataModel\n            };\n            settings.filters = [{\n              column: \'__id\',\n              term: \'in\',\n              value: unfindedValues\n            }];\n            this.setState({\n              isFetching: true\n            }, function () {\n              _this6.state.getAdditionalDataForControl(_this6, settings, function (_ref4) {\n                var items = _ref4.items;\n\n                _this6.addSelectedNodes(items);\n              });\n            });\n          } else {\n            if (this.modal) {\n              this.updatePickedCount();\n            }\n          }\n        } else {\n          var _searchResult = this.getNodeById(this.props.value);\n\n          if (!_searchResult) {\n            var _settings = {\n              model: this.state.dataModel\n            };\n            _settings.filters = [{\n              column: \'__id\',\n              term: \'=\',\n              value: this.props.value\n            }];\n            this.setState({\n              isFetching: true\n            }, function () {\n              _this6.state.getAdditionalDataForControl(_this6, _settings, function (_ref5) {\n                var items = _ref5.items;\n\n                _this6.addSelectedNodes(items);\n              });\n            });\n          } else {\n            this.picked.push(_searchResult);\n\n            if (this.modal) {\n              this.updatePickedCount();\n            }\n          }\n        }\n      }\n\n      if (this.state.needValueFetch) {\n        this.setState({\n          needValueFetch: false\n        });\n      }\n    }\n  }, {\n    key: "setData",\n    value: function setData(_ref6, reset) {\n      var items = _ref6.items,\n          rowsCount = _ref6.rowsCount,\n          parentIdToFetch = _ref6.parentIdToFetch;\n\n      if (reset) {\n        if (!parentIdToFetch) {\n          this.nodes = items;\n          this.setState({\n            rowsCount: rowsCount\n          });\n        } else {\n          var parent = this.getNodeById(parentIdToFetch);\n\n          if (parent) {\n            parent[this.props.childrenKey] = items;\n            parent.rowsCount = rowsCount;\n          }\n        }\n      } else {\n        if (!parentIdToFetch) {\n          this.nodes = this.nodes.concat(items);\n        } else {\n          var _parent = this.getNodeById(parentIdToFetch);\n\n          if (_parent) {\n            _parent[this.props.childrenKey] = _parent[this.props.childrenKey].concat(items);\n          }\n        }\n      }\n\n      this.setState({\n        needFetch: false,\n        isFetching: false\n      });\n    }\n  }, {\n    key: "getArrayValues",\n    value: function getArrayValues(value) {\n      var res = value;\n\n      if (res === undefined || res === null) {\n        return [];\n      }\n\n      if (!Array.isArray(res)) {\n        var valueArray;\n\n        try {\n          valueArray = JSON.parse(res);\n        } catch (e) {\n          console.log(e);\n        }\n\n        if (!Array.isArray(valueArray)) {\n          valueArray = [res];\n        }\n\n        res = valueArray;\n      }\n\n      return res;\n    }\n  }, {\n    key: "addSelectedNodes",\n    value: function addSelectedNodes(items) {\n      if (!Array.isArray(items) || !items.length) {\n        return;\n      }\n\n      this.picked = this.picked.concat(items);\n\n      if (this.modal) {\n        this.updatePickedCount();\n      }\n\n      this.setState({\n        isFetching: false\n      });\n    }\n  }, {\n    key: "getLocalized",\n    value: function getLocalized(key, defaultValue) {\n      if (window.DWKitAdminLang && window.DWKitAdminLang.treepicker) {\n        return window.DWKitAdminLang.treepicker[key];\n      }\n\n      return defaultValue;\n    }\n  }, {\n    key: "onChange",\n    value: function onChange(value, additionalValues) {\n      if (this.props.handleEvent) {\n        this.props.handleEvent({\n          syntheticEvent: null,\n          key: this.props.name,\n          propertyName: this.props.propertyName,\n          eventName: \'onChange\',\n          name: this.props.name,\n          value: value,\n          additionalValues: additionalValues\n        });\n      }\n    }\n  }, {\n    key: "getAdditionalValues",\n    value: function getAdditionalValues(value) {\n      var additionalValues;\n\n      if (this.nodes.length) {\n        if (Array.isArray(value)) {\n          var stringValues = value.map(function (v) {\n            return "".concat(v);\n          });\n          additionalValues = this.recursiveNodeSearch(this.nodes, function (n) {\n            return stringValues.includes("".concat(n.id));\n          }).map(function (n) {\n            return n.values;\n          });\n        } else {\n          if (value) {\n            var searchResult = this.recursiveNodeSearch(this.nodes, function (n) {\n              return "".concat(n.id) === "".concat(value);\n            });\n\n            if (searchResult.length) {\n              additionalValues = searchResult[0].values;\n            }\n          } else {\n            var columnsList = this.getColumnsForFilter();\n\n            if (columnsList) {\n              additionalValues = {};\n              columnsList.split(\',\').forEach(function (k) {\n                additionalValues[k] = null;\n              });\n            }\n          }\n        }\n      }\n\n      return additionalValues;\n    }\n  }, {\n    key: "triggerElement",\n    value: function triggerElement() {\n      var value = this.props.value;\n      var options = [];\n\n      if (this.props.multiple) {\n        if (!this.props.value) {\n          value = [];\n        }\n\n        if (!Array.isArray(this.props.value)) {\n          value = this.getArrayValues(this.props.value);\n        }\n\n        var _iterator2 = tree_picker_createForOfIteratorHelper(value),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var v = _step2.value;\n            var node = this.getNodeById(v);\n\n            if (node) {\n              options.push({\n                value: node.id,\n                text: node.name\n              });\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      } else {\n        if (value) {\n          var _node2 = this.getNodeById(value);\n\n          if (_node2) {\n            options.push({\n              value: _node2.id,\n              text: _node2.name\n            });\n          }\n        }\n      }\n\n      var props = {\n        fluid: this.props.fluid,\n        disabled: this.props.disabled,\n        multiple: this.props.multiple,\n        value: value,\n        className: this.props.className,\n        options: options,\n        selection: this.props.selection\n      }; //if (this.props.parentIsForm) {\n\n      props.label = this.props.label;\n      props.error = this.props.error;\n      return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Dropdown, tree_picker_extends({}, props, {\n        onClick: this.handleOpen,\n        onChange: this.onDropdownChange\n      })); // }\n      // let divClass = \'ui labeled input\';\n      // if (this.props.fluid) {\n      //     divClass += \' fluid\';\n      // }\n      // if (this.props.error) {\n      //     divClass += \' error\';\n      // }\n      // return (<div className={divClass}>\n      //     {this.props.label && <div className="ui label label">{this.props.label}</div>}\n      //     <Dropdown {...props} onChange={this.onDropdownChange} onClick={this.handleOpen}/>\n      // </div>);\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      var modalClass = "tree-picker ".concat(this.props.modalCssClass);\n      var dimmerClass =  true ? \' active\' : undefined;\n      return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Modal"], {\n        style: this.props.modalStyle,\n        className: modalClass,\n        open: this.state.visible,\n        trigger: this.triggerElement()\n      }, /*#__PURE__*/external_react_default.a.createElement(tree_picker_header_TreePickerHeader, {\n        name: this.props.label,\n        onMount: this.onMount,\n        selected: this.getLocalized(\'selected\', \'Selected\')\n      }), /*#__PURE__*/external_react_default.a.createElement("div", {\n        className: "ui search form"\n      }, /*#__PURE__*/external_react_default.a.createElement("div", {\n        className: "field"\n      }, /*#__PURE__*/external_react_default.a.createElement("div", {\n        className: "ui icon input"\n      }, /*#__PURE__*/external_react_default.a.createElement("input", {\n        type: "text",\n        placeholder: this.getLocalized(\'search\', \'Search\')\n      }), /*#__PURE__*/external_react_default.a.createElement("i", {\n        className: "search icon"\n      })))), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Modal"].Content, null, /*#__PURE__*/external_react_default.a.createElement("div", {\n        className: dimmerClass\n      }, /*#__PURE__*/external_react_default.a.createElement("div", {\n        className: "ui text loader"\n      }, this.getLocalized(\'loadingData\', \'Loading data\'))), /*#__PURE__*/external_react_default.a.createElement("div", {\n        className: "tree-tab"\n      }, /*#__PURE__*/external_react_default.a.createElement("div", {\n        style: {\n          height: \'400px\'\n        }\n      })), /*#__PURE__*/external_react_default.a.createElement("div", {\n        className: "search-tab"\n      }), /*#__PURE__*/external_react_default.a.createElement("div", {\n        className: "picked-tab"\n      })), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Modal"].Actions, null, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Button"], {\n        onClick: this.pickSearch,\n        className: "pick-search"\n      }, /*#__PURE__*/external_react_default.a.createElement("i", {\n        className: "checkmark icon"\n      }), this.getLocalized(\'selectAll\', \'Select all\')), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Button"], {\n        onClick: this.unpickSearch,\n        className: "unpick-search"\n      }, /*#__PURE__*/external_react_default.a.createElement("i", {\n        className: "remove icon"\n      }), this.getLocalized(\'removeAll\', \'Remove all\')), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Button"], {\n        onClick: this.unpickPicked,\n        className: "unpick-picked"\n      }, /*#__PURE__*/external_react_default.a.createElement("i", {\n        className: "remove icon"\n      }), this.getLocalized("removeAll", "Remove all")), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Button"], {\n        onClick: this.handleSave,\n        className: "blue"\n      }, this.getLocalized("ok", "Ok")), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Button"], {\n        onClick: this.handleClose\n      }, this.getLocalized("cancel", "Cancel"))));\n    }\n  }], [{\n    key: "getDerivedStateFromProps",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.dataModel !== prevState.dataModel) {\n        return {\n          getAdditionalDataForControl: nextProps.getAdditionalDataForControl,\n          dataModel: nextProps.dataModel,\n          needFetch: true,\n          needValueFetch: true\n        };\n      }\n\n      if (nextProps.paging && nextProps.value !== prevState.value && nextProps.value !== undefined) {\n        return {\n          needValueFetch: true,\n          value: nextProps.value\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return TreePicker;\n}(external_react_["Component"]);\n\ntree_picker_defineProperty(tree_picker_TreePicker, "defaultProps", {\n  hidden: function hidden(_node) {\n    return false;\n  },\n  disabledClause: function disabledClause(_node) {\n    return false;\n  },\n  childrenKey: \'nodes\',\n  multiple: false,\n  minSearchQueryLength: 3,\n  pageSize: 100\n});\n\n\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/tree-picker-header.jsx\n\n\n\nregister(\'tree-picker-header\', function (options) {\n  return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Modal"].Header, null, options.props.name, /*#__PURE__*/external_react_default.a.createElement("div", {\n    className: "ui menu"\n  }, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Item"], {\n    className: "active tree",\n    as: "a"\n  }, /*#__PURE__*/external_react_default.a.createElement("i", {\n    className: "list icon"\n  }), " Select"), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Item"], {\n    className: "picked item",\n    as: "a"\n  }, /*#__PURE__*/external_react_default.a.createElement("i", {\n    className: "checkmark icon"\n  }), " ", options.props.selected, " ", /*#__PURE__*/external_react_default.a.createElement("span", {\n    className: "count"\n  }))));\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/tree-picker-trigger.jsx\nfunction tree_picker_trigger_extends() { tree_picker_trigger_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return tree_picker_trigger_extends.apply(this, arguments); }\n\n\n\n\nregister(\'tree-picker-trigger\', function (options) {\n  //if (options.props.parentIsForm) {\n  return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Dropdown, tree_picker_trigger_extends({}, options.controlProps, {\n    onClick: options.handleOpen,\n    onChange: options.onDropdownChange\n  })); //}\n  // let divClass = \'ui labeled input\';\n  // if (options.props.fluid) {\n  //     divClass += \' fluid\';\n  // }\n  // if (options.props.error) {\n  //     divClass += \' error\';\n  // }\n  // return (<div className={divClass}>\n  //     {options.props.label && <div className="ui label label">{options.props.label}</div>}\n  //     <Dropdown {...options.controlProps} onChange={options.onDropdownChange} onClick={options.handleOpen}/>\n  // </div>);\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/unknown.jsx\n\n\nregister(\'unknown\', function (options) {\n  return /*#__PURE__*/external_react_default.a.createElement("span", null, "Unknown type \'", options.type, "\' of \'", options.props.name, "\' element.");\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/upload.jsx\nfunction upload_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction upload_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { upload_ownKeys(Object(source), true).forEach(function (key) { renderer_upload_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { upload_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction renderer_upload_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nregister(\'upload\', function (options) {\n  function onDownload(ev) {\n    var filename = options.getCustomFileName();\n    var _options$props = options.props,\n        handleEvent = _options$props.handleEvent,\n        name = _options$props.name,\n        propertyName = _options$props.propertyName;\n\n    var handleFail = function handleFail() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return handleEvent({\n        key: name,\n        eventName: \'onDownloadFail\',\n        name: name,\n        parameters: upload_objectSpread({\n          filename: filename\n        }, args),\n        propertyName: propertyName\n      });\n    };\n\n    ev.preventDefault();\n    var token = options.props.value;\n    var request = new XMLHttpRequest();\n    request.open(\'POST\', options.props.downloadUrl + token, true);\n    request.responseType = \'arraybuffer\';\n    request.onerror = handleFail;\n\n    request.onload = function () {\n      var status = request.status;\n\n      if (status < 200 || status > 299 || !request.response) {\n        handleFail(request);\n        return;\n      }\n\n      if (!filename) {\n        var disposition = request.getResponseHeader(\'Content-Disposition\');\n\n        if (disposition && disposition.indexOf(\'attachment\') !== -1) {\n          var filenameRegex = /filename[^;=\\n]*=(([\'"]).*?\\2|[^;\\n]*)/;\n          var matches = filenameRegex.exec(disposition);\n\n          if (matches && matches[1]) {\n            filename = matches[1].replace(/[\'"]/g, \'\');\n          }\n        }\n      }\n\n      var type = options.getCustomContentType();\n\n      if (!type) {\n        type = request.getResponseHeader(\'Content-Type\');\n      }\n\n      var link = document.createElement(\'a\');\n      link.setAttribute(\'href\', window.URL.createObjectURL(new Blob([request.response], {\n        type: type\n      })));\n      link.setAttribute(\'download\', filename ? filename : \'unknown\');\n      document.body.appendChild(link);\n\n      link.onclick = function () {\n        document.body.removeChild(link);\n      };\n\n      link.click();\n    };\n\n    request.send(null);\n  }\n\n  var type = options.props.type;\n  var controls = [];\n  var isForm = options.props.isForm;\n  var token = options.props.value;\n  var disabled = options.props.disabled || options.props.readOnly;\n  var divClass = \'file\';\n\n  if (options.props.error) {\n    divClass += \' error\';\n  }\n\n  if (isDefined(token) && token != null && token != \'\') {\n    var downloadtext = \'Download\';\n    var cleartext = \'Clear\';\n    var adminLangButton = dwKitAdminLangButton();\n\n    if (isDefined(adminLangButton)) {\n      downloadtext = adminLangButton.download;\n      cleartext = adminLangButton.clear;\n    }\n\n    var isHideClear = disabled || options.props.readOnly || options.props.hideClearButton;\n    controls.push( /*#__PURE__*/external_react_default.a.createElement("a", {\n      key: "download",\n      className: "ui button",\n      target: "blank",\n      onClick: onDownload,\n      href: "#"\n    }, downloadtext));\n\n    if (!isHideClear) {\n      controls.push( /*#__PURE__*/external_react_default.a.createElement("span", {\n        key: "sparator"\n      }, "\\xA0\\xA0"));\n      controls.push( /*#__PURE__*/external_react_default.a.createElement("button", {\n        key: "clear",\n        className: "ui button",\n        onClick: options.onClear\n      }, cleartext));\n    }\n  } else {\n    controls.push( /*#__PURE__*/external_react_default.a.createElement("input", {\n      key: "uploadcontrol",\n      type: "file",\n      multiple: options.props.multiple,\n      disabled: disabled,\n      accept: options.props.onlyImages ? "image/*" : undefined,\n      name: options.props.name,\n      onChange: options.onChange,\n      value: ""\n    }));\n  }\n\n  if (isForm) {\n    divClass += " field";\n    return /*#__PURE__*/external_react_default.a.createElement("div", {\n      className: divClass\n    }, isDefined(options.props.label) && /*#__PURE__*/external_react_default.a.createElement("label", null, options.props.label), /*#__PURE__*/external_react_default.a.createElement("div", {\n      "data-buildertype": type\n    }, controls));\n  }\n\n  if (options.props.fluid) {\n    divClass += \' fluid\';\n  }\n\n  divClass += \'ui labeled input\';\n\n  if (isNotEmptyString(options.props.className)) {\n    divClass += \' \' + options.props.className;\n  }\n\n  return /*#__PURE__*/external_react_default.a.createElement("div", {\n    className: divClass,\n    "data-buildertype": type\n  }, options.props.label && /*#__PURE__*/external_react_default.a.createElement("div", {\n    className: "ui label label"\n  }, options.props.label), controls);\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/workflow-bar.jsx\nfunction workflow_bar_extends() { workflow_bar_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return workflow_bar_extends.apply(this, arguments); }\n\n\n\n\nregister(\'workflow-bar\', function (options) {\n  function renderSelectScheme() {\n    if (options.state.processExists || options.props.blockSelectScheme || options.props.schemes.length <= 1) {\n      return null;\n    }\n\n    var selectSchemeDropdown = \'Select scheme\';\n\n    if (options.props.selectSchemeDropdown) {\n      selectSchemeDropdown = options.props.selectSchemeDropdown;\n    } else {\n      var adminLangWorkflowBar = dwKitAdminLangWorkflowBar();\n\n      if (adminLangWorkflowBar && adminLangWorkflowBar.selectscheme) {\n        selectSchemeDropdown = adminLangWorkflowBar.startworkflow;\n      }\n    }\n\n    var schemes = [];\n    schemes.push({\n      value: null,\n      text: \'\'\n    });\n    options.props.schemes.forEach(function (s) {\n      return schemes.push({\n        value: s,\n        text: s\n      });\n    });\n    return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Dropdown"], {\n      key: "setstate",\n      name: "setstate",\n      className: "setstate",\n      options: schemes,\n      placeholder: selectSchemeDropdown,\n      onChange: options.selectWorkflowScheme,\n      selection: true,\n      search: true,\n      value: options.props.selectedScheme\n    });\n  }\n\n  function renderCommands(commands) {\n    if (options.props.blockCommands) {\n      return null;\n    }\n\n    if (!options.props.blockSelectScheme && !options.props.selectedScheme && options.props.schemes.length > 1) {\n      return null;\n    }\n\n    if (Array.isArray(commands) && commands.length > 0) {\n      var res = [];\n      commands.forEach(function (b) {\n        var props = {};\n\n        if (b.type == 1) {\n          props.primary = true;\n        } else if (b.type == 2) {\n          props.secondary = true;\n        }\n\n        res.push( /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Button"], workflow_bar_extends({}, props, {\n          key: b.value,\n          onClick: options.onCommand.bind(options.me, b)\n        }), b.text));\n      });\n      return res;\n    }\n\n    return undefined;\n  }\n\n  function renderSetState(states) {\n    if (options.props.blockSetState) {\n      return;\n    }\n\n    if (Array.isArray(states) && states.length > 0) {\n      var disableClick = isUndefined(options.state[\'setstate\']) || options.state[\'setstate\'] == \'\';\n      var setStateButton = \'Set state\';\n\n      if (isNotEmptyString(options.props.setStateButton)) {\n        setStateButton = options.props.setStateButton;\n      } else {\n        var adminLangWorkflowBar = dwKitAdminLangWorkflowBar();\n\n        if (adminLangWorkflowBar) {\n          setStateButton = adminLangWorkflowBar.setstate;\n        }\n      }\n\n      return [/*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Dropdown"], {\n        key: "setstate",\n        name: "setstate",\n        className: "setstate",\n        placeholder: "States",\n        options: states,\n        onChange: options.handleChanged,\n        selection: true,\n        search: true\n      }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Button"], {\n        key: "btnsetstate",\n        disabled: disableClick,\n        onClick: options.onSetState.bind(options.me)\n      }, setStateButton)];\n    }\n\n    return undefined;\n  }\n\n  var className = \'dwkit-workflowbar\';\n\n  if (options.props.className) {\n    className += \' \' + options.props.className;\n  }\n\n  var style = options.props.style;\n  var commands = options.state.commands ? options.state.commands : options.props.commands;\n\n  if (options.props.selectedScheme && commands) {\n    commands = commands.filter(function (c) {\n      return c.scheme === options.props.selectedScheme;\n    });\n  }\n\n  var states = options.state.states ? options.state.states : options.props.states;\n  return /*#__PURE__*/external_react_default.a.createElement("div", {\n    className: className,\n    style: style\n  }, /*#__PURE__*/external_react_default.a.createElement("div", {\n    className: "dwkit-workflowbar-items"\n  }, renderSelectScheme(), renderCommands(commands), renderSetState(states)));\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/card.jsx\n\n\n\nregister(\'card\', function (options) {\n  return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Card"], options.propsControls, options.props.imgurl && /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Image"], {\n    src: options.props.imgurl,\n    wrapped: true,\n    ui: false\n  }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Card"].Content, null, options.props.header && /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Card"].Header, null, /*#__PURE__*/external_react_default.a.createElement("span", {\n    dangerouslySetInnerHTML: {\n      __html: options.props.header\n    }\n  })), options.props.subheader && /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Card"].Meta, null, /*#__PURE__*/external_react_default.a.createElement("span", {\n    dangerouslySetInnerHTML: {\n      __html: options.props.subheader\n    }\n  })), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Card"].Description, null, options.me.renderPanel("description"))), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Card"].Content, {\n    extra: true\n  }, options.me.renderPanel("extra")));\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/accordion.jsx\nfunction accordion_extends() { accordion_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return accordion_extends.apply(this, arguments); }\n\n\n\n\nregister(\'accordion\', function (options) {\n  var props = {};\n  props.fluid = options.props.fluid;\n  props.styled = options.props.styled;\n  var className = options.props.className;\n  return /*#__PURE__*/external_react_default.a.createElement("div", {\n    className: className,\n    style: options.props.style\n  }, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Accordion"], accordion_extends({}, props, {\n    panels: options.panels\n  })));\n});\n// CONCATENATED MODULE: ./src/components/semantic-web/registrator/semantic-registrator.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// EXTERNAL MODULE: external "draft-js"\nvar external_draft_js_ = __webpack_require__(5);\n\n// EXTERNAL MODULE: external "draft-convert"\nvar external_draft_convert_ = __webpack_require__(16);\n\n// CONCATENATED MODULE: ./src/components/semantic-web/renderer/rich-text-editor.jsx\nfunction rich_text_editor_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { rich_text_editor_typeof = function _typeof(obj) { return typeof obj; }; } else { rich_text_editor_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return rich_text_editor_typeof(obj); }\n\nfunction rich_text_editor_extends() { rich_text_editor_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return rich_text_editor_extends.apply(this, arguments); }\n\nfunction rich_text_editor_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction rich_text_editor_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction rich_text_editor_createClass(Constructor, protoProps, staticProps) { if (protoProps) rich_text_editor_defineProperties(Constructor.prototype, protoProps); if (staticProps) rich_text_editor_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction rich_text_editor_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) rich_text_editor_setPrototypeOf(subClass, superClass); }\n\nfunction rich_text_editor_setPrototypeOf(o, p) { rich_text_editor_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return rich_text_editor_setPrototypeOf(o, p); }\n\nfunction rich_text_editor_createSuper(Derived) { var hasNativeReflectConstruct = rich_text_editor_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = rich_text_editor_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = rich_text_editor_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return rich_text_editor_possibleConstructorReturn(this, result); }; }\n\nfunction rich_text_editor_possibleConstructorReturn(self, call) { if (call && (rich_text_editor_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return rich_text_editor_assertThisInitialized(self); }\n\nfunction rich_text_editor_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction rich_text_editor_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction rich_text_editor_getPrototypeOf(o) { rich_text_editor_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return rich_text_editor_getPrototypeOf(o); }\n\n\n\n\n\n\nvar rich_text_editor_RichTextEditorControl = /*#__PURE__*/function (_Component) {\n  rich_text_editor_inherits(RichTextEditorControl, _Component);\n\n  var _super = rich_text_editor_createSuper(RichTextEditorControl);\n\n  function RichTextEditorControl(props) {\n    var _this;\n\n    rich_text_editor_classCallCheck(this, RichTextEditorControl);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      editorState: external_draft_js_["EditorState"].createEmpty()\n    };\n    _this.handleKeyCommand = _this._handleKeyCommand.bind(rich_text_editor_assertThisInitialized(_this));\n    _this.mapKeyToEditorCommand = _this._mapKeyToEditorCommand.bind(rich_text_editor_assertThisInitialized(_this));\n    _this.toggleBlockType = _this._toggleBlockType.bind(rich_text_editor_assertThisInitialized(_this));\n    _this.toggleInlineStyle = _this._toggleInlineStyle.bind(rich_text_editor_assertThisInitialized(_this));\n    return _this;\n  }\n\n  rich_text_editor_createClass(RichTextEditorControl, [{\n    key: "render",\n    value: function render() {\n      var me = this;\n      var propsControl = {};\n      var divProps = {};\n\n      for (var p in this.props) {\n        if (p === \'className\' || p === \'style\') {\n          divProps[p] = this.props[p];\n        } else {\n          propsControl[p] = this.props[p];\n        }\n      }\n\n      var model = this.props.additionalParams.model;\n      var handleEvent = this.props.additionalParams.handleEvent;\n      var parentItem = this.props.additionalParams.parentItem;\n      propsControl.placeholder = model.placeholder;\n\n      propsControl.onChange = this.onChange = function (editorState) {\n        var content = editorState.getCurrentContent();\n        var value = Object(external_draft_convert_["convertToHTML"])(content);\n        me.setState({\n          editorState: editorState,\n          value: value\n        });\n        handleEvent({\n          key: propsControl.name,\n          propertyName: propsControl.propertyName,\n          eventName: \'onChange\',\n          name: propsControl.name,\n          value: value\n        });\n      };\n\n      var className = \'dwkit-richtextcontrol RichEditor-root\';\n\n      if (divProps.className) {\n        divProps.className += \' \' + className;\n      } else {\n        divProps.className = className;\n      }\n\n      var res = /*#__PURE__*/external_react_default.a.createElement("div", divProps, !propsControl.readOnly && /*#__PURE__*/external_react_default.a.createElement(rich_text_editor_BlockStyleControls, {\n        editorState: this.state.editorState,\n        onToggle: this.toggleBlockType\n      }), !propsControl.readOnly && /*#__PURE__*/external_react_default.a.createElement(rich_text_editor_InlineStyleControls, {\n        editorState: this.state.editorState,\n        onToggle: this.toggleInlineStyle\n      }), /*#__PURE__*/external_react_default.a.createElement("div", {\n        onClick: this.focus\n      }, /*#__PURE__*/external_react_default.a.createElement(external_draft_js_["Editor"], rich_text_editor_extends({}, propsControl, {\n        editorState: this.state.editorState,\n        blockStyleFn: getBlockStyle,\n        customStyleMap: styleMap,\n        handleKeyCommand: this.handleKeyCommand,\n        keyBindingFn: this.mapKeyToEditorCommand,\n        ref: "editor",\n        spellCheck: true\n      }))));\n\n      if (this.isForm(parentItem)) {\n        return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Field, null, /*#__PURE__*/external_react_default.a.createElement("label", null, model.label), res);\n      } else {\n        return res;\n      }\n    }\n  }, {\n    key: "isForm",\n    value: function isForm(m) {\n      return m != null && (m[\'data-buildertype\'] === \'form\' || m[\'data-buildertype\'] === \'formgroup\');\n    }\n  }, {\n    key: "_handleKeyCommand",\n    value: function _handleKeyCommand(command, editorState) {\n      var newState = external_draft_js_["RichUtils"].handleKeyCommand(editorState, command);\n\n      if (newState) {\n        this.onChange(newState);\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: "_mapKeyToEditorCommand",\n    value: function _mapKeyToEditorCommand(e) {\n      if (e.keyCode === 9\n      /* TAB */\n      ) {\n        var newEditorState = external_draft_js_["RichUtils"].onTab(e, this.state.editorState, 4\n        /* maxDepth */\n        );\n\n        if (newEditorState !== this.state.editorState) {\n          this.onChange(newEditorState);\n        }\n\n        return;\n      }\n\n      return Object(external_draft_js_["getDefaultKeyBinding"])(e);\n    }\n  }, {\n    key: "_toggleBlockType",\n    value: function _toggleBlockType(blockType) {\n      this.onChange(external_draft_js_["RichUtils"].toggleBlockType(this.state.editorState, blockType));\n    }\n  }, {\n    key: "_toggleInlineStyle",\n    value: function _toggleInlineStyle(inlineStyle) {\n      this.onChange(external_draft_js_["RichUtils"].toggleInlineStyle(this.state.editorState, inlineStyle));\n    }\n  }], [{\n    key: "getDerivedStateFromProps",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.value !== prevState.value) {\n        var state = external_draft_js_["EditorState"].createEmpty();\n\n        try {\n          var contentState = Object(external_draft_convert_["convertFromHTML"])(nextProps.value);\n          state = external_draft_js_["EditorState"].createWithContent(contentState);\n        } catch (ex) {}\n\n        return {\n          value: nextProps.value,\n          editorState: state\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return RichTextEditorControl;\n}(external_react_["Component"]); // Custom overrides for "code" style.\n\n\n\nvar styleMap = {\n  CODE: {\n    backgroundColor: \'rgba(0, 0, 0, 0.05)\',\n    fontFamily: \'"Inconsolata", "Menlo", "Consolas", monospace\',\n    fontSize: 16,\n    padding: 2\n  }\n};\n\nfunction getBlockStyle(block) {\n  switch (block.getType()) {\n    case \'blockquote\':\n      return \'RichEditor-blockquote\';\n\n    default:\n      return null;\n  }\n}\n\nvar rich_text_editor_StyleButton = /*#__PURE__*/function (_React$Component) {\n  rich_text_editor_inherits(StyleButton, _React$Component);\n\n  var _super2 = rich_text_editor_createSuper(StyleButton);\n\n  function StyleButton() {\n    var _this2;\n\n    rich_text_editor_classCallCheck(this, StyleButton);\n\n    _this2 = _super2.call(this);\n\n    _this2.onToggle = function (e) {\n      e.preventDefault();\n\n      _this2.props.onToggle(_this2.props.style);\n    };\n\n    return _this2;\n  }\n\n  rich_text_editor_createClass(StyleButton, [{\n    key: "render",\n    value: function render() {\n      var className = \'RichEditor-styleButton\';\n\n      if (this.props.active) {\n        className += \' RichEditor-activeButton\';\n      }\n\n      return /*#__PURE__*/external_react_default.a.createElement("span", {\n        className: className,\n        onMouseDown: this.onToggle\n      }, this.props.label);\n    }\n  }]);\n\n  return StyleButton;\n}(external_react_default.a.Component);\n\nvar BLOCK_TYPES = [{\n  label: \'H1\',\n  style: \'header-one\'\n}, {\n  label: \'H2\',\n  style: \'header-two\'\n}, //{label: \'H3\', style: \'header-three\'},\n// {label: \'H4\', style: \'header-four\'},\n// {label: \'H5\', style: \'header-five\'},\n// {label: \'H6\', style: \'header-six\'},\n//{label: \'Blockquote\', style: \'blockquote\'},\n{\n  label: \'UL\',\n  style: \'unordered-list-item\'\n}, {\n  label: \'OL\',\n  style: \'ordered-list-item\'\n}];\n\nvar rich_text_editor_BlockStyleControls = function BlockStyleControls(props) {\n  var editorState = props.editorState;\n  var selection = editorState.getSelection();\n  var blockType = editorState.getCurrentContent().getBlockForKey(selection.getStartKey()).getType();\n  return /*#__PURE__*/external_react_default.a.createElement("div", {\n    className: "RichEditor-controls"\n  }, BLOCK_TYPES.map(function (type) {\n    return /*#__PURE__*/external_react_default.a.createElement(rich_text_editor_StyleButton, {\n      key: type.label,\n      active: type.style === blockType,\n      label: type.label,\n      onToggle: props.onToggle,\n      style: type.style\n    });\n  }));\n};\n\nvar INLINE_STYLES = [{\n  label: \'Bold\',\n  style: \'BOLD\'\n}, {\n  label: \'Italic\',\n  style: \'ITALIC\'\n}, {\n  label: \'Underline\',\n  style: \'UNDERLINE\'\n}, {\n  label: \'Code\',\n  style: \'CODE\'\n}];\n\nvar rich_text_editor_InlineStyleControls = function InlineStyleControls(props) {\n  var currentStyle = props.editorState.getCurrentInlineStyle();\n  return /*#__PURE__*/external_react_default.a.createElement("div", {\n    className: "RichEditor-controls"\n  }, INLINE_STYLES.map(function (type) {\n    return /*#__PURE__*/external_react_default.a.createElement(rich_text_editor_StyleButton, {\n      key: type.label,\n      active: currentStyle.has(type.style),\n      label: type.label,\n      onToggle: props.onToggle,\n      style: type.style\n    });\n  }));\n};\n// CONCATENATED MODULE: ./src/components/semantic-web/registrator/semantic-registrator-viewer.js\n\n\n\n\nvar viewerItems = [{\n  key: \'sepContainers\',\n  title: \'Containers\',\n  isseparate: true,\n  defaultopen: true\n}, {\n  key: \'container\',\n  title: \'Container\',\n  control: container_Container\n}, {\n  key: \'staticcontent\',\n  title: \'Static Content\',\n  control: static_content_StaticContent,\n  defaultValues: {\n    content: \'Text...\'\n  }\n}, {\n  key: \'form\',\n  title: \'Form\',\n  control: semantic_control_SemanticControl\n}, {\n  key: \'formgroup\',\n  title: \'Form Group\',\n  control: semantic_control_SemanticControl,\n  defaultValues: {\n    widths: \'equal\'\n  }\n}, {\n  key: "card",\n  title: \'Card\',\n  control: card_Card,\n  defaultValues: {\n    header: "Card",\n    subheader: "Description"\n  }\n}, {\n  key: \'tab\',\n  title: \'Tab\',\n  control: tab_group_TabGroup,\n  defaultValues: {\n    panes: [{\n      title: \'Tab 1\',\n      psid: \'t1\'\n    }, {\n      title: \'Tab 2\',\n      psid: \'t2\'\n    }, {\n      title: \'Tab 3\',\n      psid: \'t3\'\n    }]\n  }\n}, {\n  key: \'accordion\',\n  title: \'Accordion\',\n  control: accordion_Accordion,\n  defaultValues: {\n    panels: [{\n      title: \'Panel 1\',\n      psid: \'p1\'\n    }, {\n      title: \'Panel 2\',\n      psid: \'p2\'\n    }, {\n      title: \'Panel 3\',\n      psid: \'p3\'\n    }]\n  }\n}, {\n  key: \'customblock\',\n  title: \'Custom block\',\n  control: undefined,\n  defaultValues: {\n    sourceType: \'form\'\n  }\n}, {\n  key: \'gridlayout\',\n  title: \'Grid Layout\',\n  control: grid_layout_GridLayout,\n  defaultValues: {\n    draggable: false,\n    resizable: false,\n    panes: [{\n      title: \'Pane 1\',\n      psid: \'p1\',\n      x: 0,\n      w: 4\n    }, {\n      title: \'Pane 2\',\n      psid: \'p2\',\n      x: 4,\n      w: 4\n    }, {\n      title: \'Pane 3\',\n      psid: \'p3\',\n      x: 8,\n      w: 4\n    }]\n  }\n}, {\n  key: \'sepCollection\',\n  title: \'Collections\',\n  isseparate: true\n}, {\n  key: \'gridview\',\n  title: \'GridView\',\n  control: grid_view_GridView,\n  defaultValues: {\n    columns: [{\n      key: \'id\',\n      name: \'ID\'\n    }, {\n      key: \'title\',\n      name: \'Title\'\n    }, {\n      key: \'count\',\n      name: \'Count\'\n    }]\n  }\n}, {\n  key: \'collectioneditor\',\n  title: \'Collection Editor\',\n  control: collection_editor_CollectionEditor,\n  defaultValues: {\n    columns: [{\n      key: \'Id\',\n      name: \'ID\'\n    }, {\n      key: \'Title\',\n      name: \'Title\'\n    }, {\n      key: \'Count\',\n      name: \'Count\'\n    }]\n  }\n}, {\n  key: \'repeater\',\n  title: \'Repeater\',\n  control: repeater_Repeater,\n  defaultValues: {}\n}, {\n  key: \'sepControls\',\n  title: \'Controls\',\n  isseparate: true\n}, {\n  key: \'header\',\n  title: \'Header\',\n  control: semantic_control_SemanticControl,\n  defaultValues: {\n    content: \'Header\',\n    size: \'medium\'\n  }\n}, {\n  key: \'input\',\n  title: \'Input\',\n  control: semantic_control_SemanticControl,\n  defaultValues: {\n    label: \'Input\',\n    fluid: true,\n    onChangeTimeout: 200\n  }\n}, {\n  key: \'numberformat\',\n  title: \'Number Format\',\n  control: number_format_NumberFormatControl,\n  defaultValues: {\n    label: \'NumberFormat\',\n    fluid: true,\n    onChangeTimeout: 200\n  }\n}, {\n  key: \'textarea\',\n  title: \'TextArea\',\n  control: semantic_control_SemanticControl,\n  defaultValues: {\n    label: \'TextArea\',\n    fluid: true\n  }\n}, {\n  key: \'dictionary\',\n  title: \'Dictionary\',\n  control: dictionary_Dictionary,\n  defaultValues: {\n    label: \'Dictionary\',\n    fluid: true,\n    selection: true\n  }\n}, {\n  key: \'treepicker\',\n  title: \'TreePicker\',\n  control: tree_picker_TreePicker,\n  defaultValues: {\n    label: \'TreePicker\',\n    selection: true,\n    fluid: true,\n    parentIdField: \'ParentId\'\n  }\n}, {\n  key: \'dropdown\',\n  title: \'Dropdown\',\n  control: semantic_control_SemanticControl,\n  defaultValues: {\n    label: \'Dropdown\',\n    fluid: true,\n    selection: true,\n    \'data-elements\': [{\n      value: 1,\n      text: \'Item 1\'\n    }, {\n      value: 2,\n      text: \'Item 2\'\n    }, {\n      value: 3,\n      text: \'Item 3\'\n    }]\n  }\n}, {\n  key: \'checkbox\',\n  title: \'CheckBox\',\n  control: semantic_control_SemanticControl,\n  defaultValues: {\n    label: \'Checkbox\'\n  }\n}, {\n  key: \'radiogroup\',\n  title: \'Radio group\',\n  control: radio_group_RadioGroup,\n  defaultValues: {\n    label: \'Radio\',\n    \'data-elements\': [{\n      value: 1,\n      text: \'Item 1\'\n    }, {\n      value: 2,\n      text: \'Item 2\'\n    }, {\n      value: 3,\n      text: \'Item 3\'\n    }]\n  }\n}, {\n  key: \'button\',\n  title: \'Button\',\n  control: semantic_control_SemanticControl,\n  defaultValues: {\n    content: \'Button\'\n  }\n}, {\n  key: \'label\',\n  title: \'Label\',\n  control: semantic_control_SemanticControl,\n  defaultValues: {\n    content: \'Label\'\n  }\n}, {\n  key: \'message\',\n  title: \'Message\',\n  control: semantic_control_SemanticControl,\n  defaultValues: {\n    header: \'Message\',\n    content: \'Description...\'\n  }\n}, {\n  key: \'image\',\n  title: \'Image\',\n  control: semantic_control_SemanticControl,\n  defaultValues: {\n    src: \'/images/unknown.png\'\n  }\n}, {\n  key: \'statistic\',\n  title: \'Statistic\',\n  control: semantic_control_SemanticControl,\n  defaultValues: {\n    \'data-elements\': [{\n      label: \'Score\',\n      value: \'22,1%\'\n    }, {\n      label: \'Views\',\n      value: \'30,000\'\n    }, {\n      label: \'Points\',\n      value: \'500\'\n    }]\n  }\n}, {\n  key: \'customcontrol\',\n  title: \'Custom control\',\n  control: undefined,\n  defaultValues: {\n    props: \'{  }\'\n  }\n}, {\n  key: \'dropdowntrigger\',\n  title: \'Dropdown trigger\',\n  control: dropdown_trigger_DropdownTrigger,\n  defaultValues: {\n    defaultValue: \'User\',\n    items: [{\n      target: \'#1\',\n      title: \'Item 1\'\n    }, {\n      target: \'#2\',\n      title: \'Item 2\'\n    }, {\n      target: \'#3\',\n      title: \'Item 3\'\n    }]\n  }\n}, {\n  key: \'dropzonecontrol\',\n  title: \'Dropzone\',\n  control: dropzone_Dropzone,\n  defaultValues: {\n    showFiletypeIcon: false,\n    autoProcessQueue: true,\n    addRemoveLinks: true,\n    multile: true\n  }\n}, {\n  key: \'files\',\n  title: \'Files\',\n  control: file_control_Files,\n  defaultValues: {\n    idField: \'Id\',\n    \'columns\': [{\n      title: \'Name\',\n      field: \'Name\',\n      property: \'Name\',\n      showcolumn: true\n    }, {\n      title: \'Extension\',\n      field: \'Extension\',\n      property: \'Extension\',\n      showcolumn: false,\n      control: \'span\'\n    }, {\n      title: \'Length\',\n      field: \'Length\',\n      property: \'Length\',\n      showcolumn: false,\n      control: \'span\'\n    }, {\n      title: \'Content Type\',\n      field: \'ContentType\',\n      property: \'ContentType\',\n      showcolumn: false\n    }, {\n      title: \'File\',\n      field: \'Token\',\n      property: \'Token\',\n      showcolumn: true,\n      control: \'file2\'\n    }]\n  }\n}, {\n  key: \'signature\',\n  title: \'Signature\',\n  control: signature_Signature,\n  defaultValues: {\n    showPreview: true\n  }\n}, {\n  key: \'camera\',\n  title: \'Camera\',\n  control: camera_Camera,\n  defaultValues: {\n    showPreview: true,\n    compression: 0.75\n  }\n}, {\n  key: \'breadcrumb\',\n  title: \'Breadcrumbs\',\n  control: semantic_control_SemanticControl,\n  defaultValues: {\n    items: [{\n      \'text\': \'Home\',\n      \'url\': \'/\'\n    }, {\n      \'divider\': \'right angle\',\n      \'text\': \'Page1\',\n      \'url\': \'/page1\'\n    }, {\n      \'text\': \'Page2\',\n      \'active\': true\n    }],\n    events: {\n      onItemClick: {\n        active: true,\n        actions: [\'redirect\']\n      }\n    }\n  }\n}, {\n  key: \'search\',\n  title: \'Search\',\n  control: search_SearchControl,\n  defaultValues: {}\n}, {\n  key: \'menu\',\n  title: \'Menu\',\n  control: menu_group_MenuGroup,\n  defaultValues: {\n    items: [{\n      title: \'Menu 1\'\n    }, {\n      title: \'Menu 2\'\n    }, {\n      title: \'Menu 3\'\n    }]\n  }\n}, {\n  key: \'workflowbar\',\n  title: \'Workflow bar\',\n  control: workflow_bar_WorkflowBar,\n  defaultValues: {\n    blockSetState: true,\n    blockLoadParameters: true,\n    events: {\n      onCommandClick: {\n        active: true,\n        actions: [\'workflowExecuteCommand\']\n      },\n      onSetStateClick: {\n        active: true,\n        actions: [\'workflowSetState\']\n      },\n      onSchemeSelected: {\n        active: true,\n        actions: [\'workflowSelectScheme\']\n      }\n    }\n  }\n}, {\n  key: \'richtexteditor\',\n  title: \'Rich Text Editor\',\n  control: rich_text_editor_RichTextEditorControl,\n  defaultValues: {}\n}, {\n  key: \'sepCharts\',\n  title: \'Charts\',\n  isseparate: true\n}, {\n  key: \'barchart\',\n  title: \'Bar\',\n  control: chart_view_ChartView,\n  defaultValues: {\n    chartType: \'bar\',\n    datasetLabel: \'\'\n  }\n}, {\n  key: \'linechart\',\n  title: \'Line\',\n  control: chart_view_ChartView,\n  defaultValues: {\n    chartType: \'line\',\n    datasetLabel: \'\'\n  }\n}, {\n  key: \'scatterchart\',\n  title: \'Scatter\',\n  control: chart_view_ChartView,\n  defaultValues: {\n    chartType: \'scatter\',\n    datasetLabel: \'\'\n  }\n}, {\n  key: \'doughnutchart\',\n  title: \'Doughnut\',\n  control: chart_view_ChartView,\n  defaultValues: {\n    chartType: \'doughnut\',\n    datasetLabel: \'\'\n  }\n}, {\n  key: \'piechart\',\n  title: \'Pie\',\n  control: chart_view_ChartView,\n  defaultValues: {\n    chartType: \'pie\',\n    datasetLabel: \'\'\n  }\n}, {\n  key: \'radarchart\',\n  title: \'Radar\',\n  control: chart_view_ChartView,\n  defaultValues: {\n    chartType: \'radar\',\n    datasetLabel: \'\'\n  }\n}];\nregisterItems(viewerItems);\n// CONCATENATED MODULE: ./src/builder/semantic-web/semantic-form-controls.js\nfunction semantic_form_controls_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { semantic_form_controls_typeof = function _typeof(obj) { return typeof obj; }; } else { semantic_form_controls_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return semantic_form_controls_typeof(obj); }\n\nfunction semantic_form_controls_extends() { semantic_form_controls_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return semantic_form_controls_extends.apply(this, arguments); }\n\nfunction semantic_form_controls_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction semantic_form_controls_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { semantic_form_controls_ownKeys(Object(source), true).forEach(function (key) { semantic_form_controls_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { semantic_form_controls_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction semantic_form_controls_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction semantic_form_controls_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction semantic_form_controls_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction semantic_form_controls_createClass(Constructor, protoProps, staticProps) { if (protoProps) semantic_form_controls_defineProperties(Constructor.prototype, protoProps); if (staticProps) semantic_form_controls_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction semantic_form_controls_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) semantic_form_controls_setPrototypeOf(subClass, superClass); }\n\nfunction semantic_form_controls_setPrototypeOf(o, p) { semantic_form_controls_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return semantic_form_controls_setPrototypeOf(o, p); }\n\nfunction semantic_form_controls_createSuper(Derived) { var hasNativeReflectConstruct = semantic_form_controls_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = semantic_form_controls_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = semantic_form_controls_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return semantic_form_controls_possibleConstructorReturn(this, result); }; }\n\nfunction semantic_form_controls_possibleConstructorReturn(self, call) { if (call && (semantic_form_controls_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return semantic_form_controls_assertThisInitialized(self); }\n\nfunction semantic_form_controls_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction semantic_form_controls_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction semantic_form_controls_getPrototypeOf(o) { semantic_form_controls_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return semantic_form_controls_getPrototypeOf(o); }\n\n\n\n\n\n\n\nvar semantic_form_controls_clone = __webpack_require__(10);\n\nvar semantic_form_controls_SemanticFormControls = /*#__PURE__*/function (_BaseControls) {\n  semantic_form_controls_inherits(SemanticFormControls, _BaseControls);\n\n  var _super = semantic_form_controls_createSuper(SemanticFormControls);\n\n  function SemanticFormControls() {\n    semantic_form_controls_classCallCheck(this, SemanticFormControls);\n\n    return _super.apply(this, arguments);\n  }\n\n  semantic_form_controls_createClass(SemanticFormControls, [{\n    key: "createControl",\n    value: function createControl(parentComponent, control, _ref) {\n      var _model$attributes;\n\n      var model = _ref.model,\n          data = _ref.data,\n          errors = _ref.errors,\n          parentItem = _ref.parentItem,\n          buildermode = _ref.buildermode,\n          children = _ref.children,\n          handleEvent = _ref.handleEvent,\n          getAdditionalDataForControl = _ref.getAdditionalDataForControl,\n          getFormFunc = _ref.getFormFunc,\n          readOnlyControls = _ref.readOnlyControls,\n          readOnly = _ref.readOnly,\n          disableRefs = _ref.disableRefs,\n          uploadUrl = _ref.uploadUrl,\n          downloadUrl = _ref.downloadUrl,\n          extendedData = _ref.extendedData,\n          controlsToReplace = _ref.controlsToReplace,\n          needCheckReplace = _ref.needCheckReplace,\n          eventOnEdit = _ref.eventOnEdit,\n          eventOnDelete = _ref.eventOnDelete,\n          eventOnCopy = _ref.eventOnCopy,\n          externalControlRender = _ref.externalControlRender,\n          externalControlList = _ref.externalControlList,\n          adaptiveViewType = _ref.adaptiveViewType,\n          formData = _ref.formData,\n          hideControls = _ref.hideControls;\n      var i;\n      var res = undefined;\n      var attributes = (_model$attributes = model.attributes) === null || _model$attributes === void 0 ? void 0 : _model$attributes.reduce(function (result, _ref2) {\n        var name = _ref2.name,\n            value = _ref2.value;\n        return semantic_form_controls_objectSpread(semantic_form_controls_objectSpread({}, result), {}, semantic_form_controls_defineProperty({}, name, value));\n      }, {});\n\n      var props = semantic_form_controls_objectSpread(semantic_form_controls_objectSpread({\n        key: model.key,\n        name: model.key\n      }, attributes), {}, {\n        className: base_controls_BaseControls.getClassName(model, buildermode),\n        style: base_controls_BaseControls.getStyle(model, buildermode, adaptiveViewType),\n        \'data-buildertype\': model[\'data-buildertype\'],\n        propertyName: model[\'propertyName\'] ? model[\'propertyName\'] : model.key\n      });\n\n      if (!props.key) {\n        console.log(model);\n      }\n\n      var dataBuilderType = props[\'data-buildertype\'];\n      var needReplace = needCheckReplace || controlsToReplace.includes(model.key);\n\n      if (buildermode && this.isContainer(props[\'data-buildertype\'])) {\n        props.className = (isUndefined(props.className) ? \'\' : props.className + \' \') + \'dwkit-formbuilder-item-container\';\n      }\n\n      if (!disableRefs) {\n        props.ref = model.key;\n      }\n\n      if (model.readOnly !== undefined) {\n        props.readOnly = model.readOnly;\n      }\n\n      if (readOnly || Array.isArray(readOnlyControls) && readOnlyControls.includes(model.key)) {\n        props.readOnly = true;\n      }\n\n      var regexForReplace = DWKitConst.regexForReplace;\n\n      var replaceControlValue = function replaceControlValue(originalValue) {\n        if (!needReplace || originalValue === undefined || originalValue === null || buildermode) {\n          return originalValue;\n        }\n\n        var replaceFromData = function replaceFromData(m) {\n          if (formData !== undefined && formData !== null) {\n            if (m.slice(1, 5) === \'row.\') {\n              return base_controls_BaseControls.getFormattedDate(m.slice(5, m.length - 1), data);\n            }\n\n            return base_controls_BaseControls.getFormattedDate(m.slice(1, m.length - 1), formData);\n          }\n\n          return base_controls_BaseControls.getFormattedDate(m.slice(1, m.length - 1), data);\n        };\n\n        if (Array.isArray(originalValue)) {\n          var newValue = [];\n          var needPushKey = false;\n          originalValue.forEach(function (v) {\n            var newV = {};\n\n            for (var p in v) {\n              if (v.hasOwnProperty(p)) {\n                if (v[p] !== undefined && v[p] !== null && typeof v[p] === \'string\') {\n                  newV[p] = v[p].replace(regexForReplace, function (m) {\n                    return replaceFromData(m);\n                  });\n\n                  if (!needPushKey && needCheckReplace && newV[p] !== v[p]) {\n                    needPushKey = true;\n                  }\n                } else if (Array.isArray(v[p])) {\n                  newV[p] = replaceControlValue(v[p]);\n                } else {\n                  newV[p] = v[p];\n                }\n              }\n            }\n\n            newValue.push(newV);\n          });\n\n          if (needPushKey) {\n            controlsToReplace.push(model.key);\n          }\n\n          return newValue;\n        } else {\n          if (typeof originalValue !== \'string\') {\n            return originalValue;\n          }\n\n          var _newValue = originalValue.replace(regexForReplace, function (m) {\n            return replaceFromData(m);\n          });\n\n          if (needCheckReplace && originalValue !== _newValue) {\n            controlsToReplace.push(model.key);\n          }\n\n          return _newValue;\n        }\n      };\n\n      if (data !== undefined) {\n        if (model[\'propertyName\']) {\n          props.value = data[model[\'propertyName\']];\n        } else {\n          props.value = data[props.key];\n        }\n      }\n\n      if (errors !== undefined && errors !== null) {\n        if (model[\'propertyName\']) {\n          props.error = errors[model[\'propertyName\']];\n        } else {\n          props.error = errors[props.key];\n        }\n      }\n\n      if (control === semantic_control_SemanticControl) {\n        if (dataBuilderType === \'header\') {\n          props.content = replaceControlValue(model.content);\n          props.subheader = replaceControlValue(model.subheader);\n        } else if (dataBuilderType === \'label\') {\n          props.content = replaceControlValue(model.content);\n        } else if (dataBuilderType === \'message\') {\n          props.content = replaceControlValue(model.content);\n          props.header = replaceControlValue(model.header);\n        } else if (dataBuilderType === \'image\') {\n          props.src = replaceControlValue(model.src);\n          props.href = replaceControlValue(model.href);\n        } else if (dataBuilderType === \'breadcrumb\') {\n          props.items = replaceControlValue(model.items);\n        } else if (dataBuilderType === \'button\') {\n          props.content = replaceControlValue(model.content);\n        }\n\n        res = /*#__PURE__*/external_react_default.a.createElement(semantic_control_SemanticControl, semantic_form_controls_extends({}, props, {\n          additionalParams: {\n            model: model,\n            data: data,\n            errors: errors,\n            children: children,\n            handleEvent: handleEvent,\n            parentItem: parentItem,\n            uploadUrl: uploadUrl,\n            downloadUrl: downloadUrl\n          }\n        }));\n      } else if (control === camera_Camera) {\n        props = semantic_form_controls_objectSpread(semantic_form_controls_objectSpread({}, props), model);\n        props.uploadUrl = uploadUrl;\n        props.downloadUrl = downloadUrl;\n\n        if (handleEvent != null) {\n          props.onChange = function (e, _ref3) {\n            var name = _ref3.name,\n                value = _ref3.value,\n                parameters = _ref3.parameters;\n            var res = value;\n            handleEvent({\n              syntheticEvent: e,\n              key: props.name,\n              propertyName: props.propertyName,\n              eventName: \'onChange\',\n              name: name,\n              value: res,\n              parameters: parameters\n            });\n          };\n        }\n\n        res = /*#__PURE__*/external_react_default.a.createElement(camera_Camera, semantic_form_controls_extends({}, props, {\n          additionalParams: {\n            model: model,\n            data: data,\n            errors: errors,\n            children: children,\n            handleEvent: handleEvent,\n            parentItem: parentItem\n          }\n        }));\n      } else if (control === signature_Signature) {\n        props = semantic_form_controls_objectSpread(semantic_form_controls_objectSpread({}, props), model);\n        props.uploadUrl = uploadUrl;\n        props.downloadUrl = downloadUrl;\n\n        if (handleEvent != null) {\n          props.onChange = function (e, _ref4) {\n            var name = _ref4.name,\n                value = _ref4.value,\n                parameters = _ref4.parameters;\n            var res = value;\n            handleEvent({\n              syntheticEvent: e,\n              key: props.name,\n              propertyName: props.propertyName,\n              eventName: \'onChange\',\n              name: name,\n              value: res,\n              parameters: parameters\n            });\n          };\n        }\n\n        res = /*#__PURE__*/external_react_default.a.createElement(signature_Signature, semantic_form_controls_extends({}, props, {\n          additionalParams: {\n            model: model,\n            data: data,\n            errors: errors,\n            children: children,\n            handleEvent: handleEvent,\n            parentItem: parentItem\n          }\n        }));\n      } else if (control === number_format_NumberFormatControl) {\n        props.format = model.format;\n        props.mask = model.mask;\n        props.thousandSeparator = model.thousandSeparator;\n        props.prefix = model.prefix;\n        props.suffix = model.suffix;\n        res = /*#__PURE__*/external_react_default.a.createElement(number_format_NumberFormatControl, semantic_form_controls_extends({}, props, {\n          additionalParams: {\n            model: model,\n            data: data,\n            errors: errors,\n            children: children,\n            handleEvent: handleEvent,\n            parentItem: parentItem,\n            uploadUrl: uploadUrl,\n            downloadUrl: downloadUrl\n          }\n        }));\n      } else if (control === dictionary_Dictionary) {\n        props.label = model.label;\n        props.defaultValue = model.defaultValue;\n        props.placeholder = model.placeholder;\n        props.disabled = model.disabled;\n        props.fluid = model.fluid;\n        props.selection = model.selection;\n        props.multiple = model.multiple;\n        props.search = model.search;\n        props.dataModel = model.dataModel;\n        props.clearable = model.clearable;\n        props.columns = model.columns;\n        props.paging = model.paging;\n        props.pageSize = model.pageSize;\n        props.getAdditionalDataForControl = getAdditionalDataForControl;\n        props.filters = replaceControlValue(model.filters);\n        props.textAsValue = model.textAsValue;\n\n        if (model.text) {\n          props.textFunc = new Function(\'data\', "return ".concat(model.text, ";"));\n        }\n\n        if (errors && errors[model.key] !== undefined) {\n          props.error = errors[model.key];\n        }\n\n        props.handleEvent = handleEvent;\n        props.parentIsForm = base_controls_BaseControls.isForm(parentItem);\n        res = /*#__PURE__*/external_react_default.a.createElement(dictionary_Dictionary, props);\n      } else if (control === dropdown_trigger_DropdownTrigger) {\n        props.defaultValue = model.defaultValue;\n        props.items = model.items;\n        props.imageUrl = model.imageUrl;\n        props.handleEvent = handleEvent;\n        res = /*#__PURE__*/external_react_default.a.createElement(dropdown_trigger_DropdownTrigger, props);\n      } else if (control === search_SearchControl) {\n        props.url = model.url;\n        props.category = model.category;\n        props.handleEvent = handleEvent;\n        res = /*#__PURE__*/external_react_default.a.createElement(search_SearchControl, props);\n      } else if (control === radio_group_RadioGroup) {\n        var items = [];\n\n        if (model[\'data-elements\'] !== undefined) {\n          if (Array.isArray(model[\'data-elements\'])) {\n            items = model[\'data-elements\'];\n          } else {\n            items = external_json5_default.a.parse(model[\'data-elements\']);\n          }\n        }\n\n        props.handleEvent = handleEvent;\n\n        if (errors && errors[model.key] !== undefined) {\n          props.error = errors[model.key];\n        }\n\n        res = /*#__PURE__*/external_react_default.a.createElement(radio_group_RadioGroup, semantic_form_controls_extends({}, props, {\n          label: model.label,\n          direction: model.direction,\n          placeholder: model.placeholder,\n          items: items\n        }));\n      } else if (control === collection_editor_CollectionEditor) {\n        props.columns = model.columns;\n        props.draggable = model.draggable;\n        props.hierarchical = model.hierarchical;\n        props.parentIdField = model.parentIdField;\n        props.idField = model.idField;\n        props.childrenField = model.childrenField;\n        props.collapseAll = model.collapseAll;\n        props.disableAdd = model.disableAdd;\n        props.disableCopy = model.disableCopy;\n        props.disableDelete = model.disableDelete;\n        props.externalControlList = externalControlList;\n        props.externalControlRender = externalControlRender;\n        props.placeholders = semantic_form_controls_clone(model.placeholders);\n\n        if (props.placeholders) {\n          props.data = data;\n          props.adaptiveViewType = adaptiveViewType;\n          props.controlBarParams = {\n            adaptiveViewType: adaptiveViewType,\n            eventOnDelete: eventOnDelete,\n            eventOnEdit: eventOnEdit,\n            eventOnCopy: eventOnCopy,\n            parentComponent: parentComponent\n          };\n          props.getAdditionalDataForControl = getAdditionalDataForControl;\n          props.createControl = this.createCollectionEditorControl.bind(this);\n        }\n\n        props.handleEvent = handleEvent;\n        props.downloadUrl = downloadUrl;\n        props.uploadUrl = uploadUrl;\n\n        if (buildermode && props.value === undefined && props.columns !== undefined) {\n          props.buildermode = buildermode;\n          props.createBuilderDropzone = this.createBuilderDropzone.bind(this);\n          props.value = [];\n\n          for (i = 0; i < 5; i++) {\n            props.value.push({});\n          }\n\n          if (Boolean(model.hierarchical) && model.parentIdField !== undefined && model.parentIdField !== \'\' && model.idField !== undefined && model.idField !== \'\') {\n            for (i = 1; i < 5; i++) {\n              var parent = props.value[i];\n\n              if (parent[model.idField] === undefined) {\n                parent[model.idField] = i;\n              }\n\n              for (var j = 0; j < 2; j++) {\n                var child = {};\n                child[model.parentIdField] = parent[model.idField];\n                props.value.push(child);\n              }\n            }\n          }\n        }\n\n        if (extendedData !== undefined && extendedData.filters !== undefined && extendedData.filters[props.key] !== undefined) {\n          props.filter = new FunctionalFilter(extendedData.filters[props.key], props.columns.map(function (c) {\n            return c.key;\n          }));\n        }\n\n        res = /*#__PURE__*/external_react_default.a.createElement(collection_editor_CollectionEditor, props);\n      } else if (control === grid_view_GridView) {\n        props.columns = model.columns;\n        props.multiselect = model.multiselect;\n        props.rowKey = model.rowKey;\n        props.editForm = model.editForm;\n        props.editFlow = model.editFlow;\n        props.editWorkflow = model.editWorkflow;\n        props.editType = model.editType;\n        props.pagerType = model.pagerType;\n        props.pageSize = model.pageSize;\n        props.rowHeight = model.rowHeight;\n        props.headerRowHeight = model.headerRowHeight;\n        props.minHeight = model.minHeight;\n        props.autoHeight = model.autoHeight;\n        props.offSet = model.offSet;\n        props.disableSort = model.disableSort;\n        props.resizeColumns = model.resizeColumns;\n        props.editFormShowType = model.editFormShowType;\n        props.sidebarDirection = model.sidebarDirection;\n        props.getAdditionalDataForControl = getAdditionalDataForControl;\n        props.handleEvent = handleEvent;\n        props.defaultSort = model.defaultSort;\n        props.uploadUrl = uploadUrl;\n        props.downloadUrl = downloadUrl;\n\n        if (errors && errors[model.key] !== undefined) {\n          props.error = errors[model.key];\n        }\n\n        if (buildermode && props.value === undefined) {\n          props.buildermode = buildermode;\n          props.createBuilderDropzone = this.createBuilderDropzone.bind(this);\n          props.value = [];\n\n          var _loop = function _loop() {\n            var obj = {};\n            props.columns.forEach(function (c) {\n              obj[c.key] = c.key + \'_\' + i;\n            });\n            props.value.push(obj);\n          };\n\n          for (i = 0; i < 30; i++) {\n            _loop();\n          }\n        }\n\n        if (extendedData !== undefined && extendedData.filters !== undefined && extendedData.filters[props.key] !== undefined) {\n          props.filter = new FunctionalFilter(extendedData.filters[props.key], props.columns.map(function (c) {\n            return c.key;\n          }));\n        }\n\n        props.placeholders = semantic_form_controls_clone(model.placeholders);\n\n        if (props.placeholders) {\n          props.data = data;\n          props.adaptiveViewType = adaptiveViewType;\n          props.controlBarParams = {\n            adaptiveViewType: adaptiveViewType,\n            eventOnDelete: eventOnDelete,\n            eventOnEdit: eventOnEdit,\n            eventOnCopy: eventOnCopy,\n            parentComponent: parentComponent\n          };\n          props.createControl = this.createCollectionEditorControl.bind(this);\n        }\n\n        res = /*#__PURE__*/external_react_default.a.createElement(grid_view_GridView, props);\n      } else if (control === menu_group_MenuGroup) {\n        props[\'data-items\'] = replaceControlValue(model.items);\n        props.pointing = model.pointing;\n        props.secondary = model.secondary;\n        props.tabular = model.tabular;\n        props.fluid = model.fluid;\n        props.vertical = model.vertical;\n        props.activeitem = model.activeitem;\n        props.link = model.link;\n        props.handleEvent = handleEvent;\n        res = /*#__PURE__*/external_react_default.a.createElement(menu_group_MenuGroup, props);\n      } else if (control === tab_group_TabGroup) {\n        props[\'data-panes\'] = model.panes;\n        props.pointing = model.pointing;\n        props.secondary = model.secondary;\n        props.tabular = model.tabular;\n        props.fluid = model.fluid;\n        props.vertical = model.vertical;\n        props.activeitem = model.activeitem;\n        props.placeholders = model.placeholders;\n        this.setCreateControlsProps(props, {\n          data: data,\n          buildermode: buildermode,\n          model: model,\n          children: children,\n          getFormFunc: getFormFunc,\n          getAdditionalDataForControl: getAdditionalDataForControl,\n          disableRefs: disableRefs,\n          uploadUrl: uploadUrl,\n          downloadUrl: downloadUrl,\n          extendedData: extendedData,\n          controlsToReplace: controlsToReplace,\n          eventOnEdit: eventOnEdit,\n          eventOnDelete: eventOnDelete,\n          eventOnCopy: eventOnCopy,\n          adaptiveViewType: adaptiveViewType,\n          handleEvent: handleEvent,\n          externalControlList: externalControlList,\n          externalControlRender: externalControlRender,\n          needCheckReplace: needCheckReplace,\n          readOnly: readOnly,\n          readOnlyControls: readOnlyControls,\n          hideControls: hideControls,\n          errors: errors\n        });\n        res = /*#__PURE__*/external_react_default.a.createElement(tab_group_TabGroup, props);\n      } else if (control === accordion_Accordion) {\n        props.panels = model.panels;\n        props.fluid = model.fluid;\n        props.styled = model.styled;\n        props.placeholders = model.placeholders;\n        this.setCreateControlsProps(props, {\n          data: data,\n          buildermode: buildermode,\n          model: model,\n          children: children,\n          getFormFunc: getFormFunc,\n          getAdditionalDataForControl: getAdditionalDataForControl,\n          disableRefs: disableRefs,\n          uploadUrl: uploadUrl,\n          downloadUrl: downloadUrl,\n          extendedData: extendedData,\n          controlsToReplace: controlsToReplace,\n          eventOnEdit: eventOnEdit,\n          eventOnDelete: eventOnDelete,\n          eventOnCopy: eventOnCopy,\n          adaptiveViewType: adaptiveViewType,\n          handleEvent: handleEvent,\n          externalControlList: externalControlList,\n          externalControlRender: externalControlRender,\n          needCheckReplace: needCheckReplace,\n          readOnly: readOnly,\n          readOnlyControls: readOnlyControls,\n          hideControls: hideControls,\n          errors: errors\n        });\n        res = /*#__PURE__*/external_react_default.a.createElement(accordion_Accordion, props);\n      } else if (control === grid_layout_GridLayout) {\n        props.draggable = model.draggable;\n        props.resizable = model.resizable;\n        props.scroll = model.scroll;\n        props.cols = model.cols;\n        props[\'data-panes\'] = model.panes;\n        props.placeholders = model.placeholders;\n        this.setCreateControlsProps(props, {\n          data: data,\n          buildermode: buildermode,\n          model: model,\n          children: children,\n          getFormFunc: getFormFunc,\n          getAdditionalDataForControl: getAdditionalDataForControl,\n          disableRefs: disableRefs,\n          uploadUrl: uploadUrl,\n          downloadUrl: downloadUrl,\n          extendedData: extendedData,\n          controlsToReplace: controlsToReplace,\n          eventOnEdit: eventOnEdit,\n          eventOnDelete: eventOnDelete,\n          eventOnCopy: eventOnCopy,\n          adaptiveViewType: adaptiveViewType,\n          handleEvent: handleEvent,\n          errors: errors,\n          readOnlyControls: readOnlyControls,\n          readOnly: readOnly,\n          needCheckReplace: needCheckReplace\n        });\n        res = /*#__PURE__*/external_react_default.a.createElement(grid_layout_GridLayout, props);\n      } else if (control === chart_view_ChartView) {\n        props.chartType = model.chartType;\n        props.responsive = model.responsive;\n        props.legendPosition = model.legendPosition;\n        props.title = model.title;\n        props.titleSize = model.titleSize;\n        props.datasetCustom = model.datasetCustom;\n        props.dataLabels = model.dataLabels;\n        props.datasetLabel = model.datasetLabel;\n        props.datasetSteppedLine = model.datasetSteppedLine;\n        props.datasetBorderColor = model.datasetBorderColor;\n        props.datasetFill = model.datasetFill;\n        props.datasetBorderWidth = model.datasetBorderWidth;\n        props.datasetBackgroundColor = model.datasetBackgroundColor;\n\n        if (buildermode) {\n          if (props.datasetCustom) {\n            props.value = [1, 2, 3, 4, 3, 2, 1];\n          } else {\n            var testData = props.chartType !== \'scatter\' ? [6, 23, 15, 3] : [{\n              x: 6,\n              y: -12\n            }, {\n              x: 11,\n              y: 1\n            }, {\n              x: 24,\n              y: 5\n            }, {\n              x: 40,\n              y: 32\n            }];\n            props.value = {\n              labels: [\'Q1\', \'Q2\', \'Q3\', \'Q4\'],\n              datasets: [{\n                data: testData\n              }]\n            };\n          }\n        } else {\n          if (data !== undefined) {\n            props.value = data[props.key];\n          }\n        }\n\n        res = /*#__PURE__*/external_react_default.a.createElement(chart_view_ChartView, props);\n      } else if (control === workflow_bar_WorkflowBar) {\n        props.blockSetState = model.blockSetState;\n        props.blockCommands = model.blockCommands;\n        props.setStateButton = model.setStateButton;\n        props.handleEvent = handleEvent;\n        props.getAdditionalDataForControl = getAdditionalDataForControl;\n        props.blockLoadParameters = model.blockLoadParameters === undefined ? true : model.blockLoadParameters;\n        props.blockSelectScheme = model.blockSelectScheme;\n        props.selectSchemeDropdown = model.selectSchemeDropdown;\n\n        if (data) {\n          props.selectedScheme = data.__wf_selectedscheme;\n        }\n\n        if (extendedData) {\n          props.schemes = extendedData.schemes ? extendedData.schemes : [];\n        } else {\n          props.schemes = [];\n        }\n\n        if (errors && errors[model.key] !== undefined) {\n          props.error = errors[model.key];\n        }\n\n        if (buildermode) {\n          props.commands = [{\n            value: \'approve\',\n            text: \'Approve\',\n            type: 1\n          }, {\n            value: \'back\',\n            text: \'Back\',\n            type: 2\n          }];\n          props.states = [{\n            value: \'draft\',\n            text: \'Draft\'\n          }, {\n            value: \'state1\',\n            text: \'State 1\'\n          }, {\n            value: \'state2\',\n            text: \'State 2\'\n          }, {\n            value: \'state3\',\n            text: \'State 3\'\n          }, {\n            value: \'finish\',\n            text: \'Finish\'\n          }];\n          props.schemes = [];\n        }\n\n        res = /*#__PURE__*/external_react_default.a.createElement(workflow_bar_WorkflowBar, props);\n      } else if (control === container_Container) {\n        if (props.style && model[\'style-display\'] === \'flex\') {\n          if (model[\'style-display-horizontalalign\']) {\n            props.style.justifyContent = model[\'style-display-horizontalalign\'];\n          }\n\n          if (model[\'style-display-verticalalign\']) {\n            props.style.alignItems = model[\'style-display-verticalalign\'];\n          } else {\n            props.style.alignItems = \'baseline\';\n          }\n        }\n\n        if (model["childrenView"]) {\n          props.className = (props.className ? props.className + " " : "") + "dwkit-container-" + model["childrenView"];\n        }\n\n        if (parentItem && parentItem["children-style-source"]) {\n          var parentStyle = {};\n          base_controls_BaseControls.getCustomStyle(parentItem["children-style-source"], parentStyle);\n\n          for (var field in parentStyle) {\n            if (!props.style[field]) {\n              props.style[field] = parentStyle[field];\n            }\n          }\n        }\n\n        delete props.propertyName;\n        res = /*#__PURE__*/external_react_default.a.createElement(container_Container, semantic_form_controls_extends({}, props, {\n          children: children\n        }));\n      } else if (control === repeater_Repeater) {\n        props.slider = model.slider;\n        props[\'item-visibleCondition\'] = model[\'item-visibleCondition\'];\n        props.pageSize = model.pageSize;\n        props.pagerType = model.pagerType;\n        props.loadButtonLabel = model.loadButtonLabel;\n        props.noRecordsLabel = model.noRecordsLabel;\n        props.defaultSort = model.defaultSort;\n\n        if (extendedData !== undefined && extendedData.filters !== undefined && extendedData.filters[props.key] !== undefined) {\n          props.filter = new FunctionalFilter(extendedData.filters[props.key], [\'*\']);\n        }\n\n        props.placeholders = semantic_form_controls_clone(model.placeholders); //TODO Set read-only for all controls in server pager mode\n\n        props.controlProps = {\n          readOnly: model.pagerType === \'server\' ? true : readOnly\n        };\n        props.model = model;\n        props.data = data;\n        var controlProps = props.controlProps;\n        this.setCreateControlsProps(controlProps, {\n          children: children,\n          getAdditionalDataForControl: getAdditionalDataForControl,\n          getFormFunc: getFormFunc,\n          disableRefs: disableRefs,\n          uploadUrl: uploadUrl,\n          downloadUrl: downloadUrl,\n          extendedData: extendedData,\n          controlsToReplace: controlsToReplace,\n          eventOnEdit: eventOnEdit,\n          eventOnDelete: eventOnDelete,\n          eventOnCopy: eventOnCopy,\n          adaptiveViewType: adaptiveViewType,\n          handleEvent: handleEvent,\n          externalControlList: externalControlList,\n          externalControlRender: externalControlRender,\n          readOnlyControls: readOnlyControls,\n          buildermode: buildermode\n        });\n\n        if (model["childrenView"]) {\n          props.className = (props.className ? props.className + " " : "") + "dwkit-container-" + model["childrenView"];\n        }\n\n        res = /*#__PURE__*/external_react_default.a.createElement(repeater_Repeater, props);\n      } else if (control === static_content_StaticContent) {\n        props.content = replaceControlValue(model.content);\n        props.isHtml = model.isHtml;\n        res = /*#__PURE__*/external_react_default.a.createElement(static_content_StaticContent, props);\n      } else if (control === dropzone_Dropzone) {\n        props.iconFiletypes = model.iconFiletypes;\n        props.postUrl = uploadUrl;\n        props.showFiletypeIcon = model.showFiletypeIcon;\n        props.autoProcessQueue = model.autoProcessQueue;\n        props.addRemoveLinks = model.addRemoveLinks;\n        res = /*#__PURE__*/external_react_default.a.createElement(dropzone_Dropzone, semantic_form_controls_extends({}, props, {\n          additionalParams: {\n            model: model,\n            data: data,\n            errors: errors,\n            children: children,\n            handleEvent: handleEvent,\n            parentItem: parentItem\n          }\n        }));\n      } else if (control === file_control_Files) {\n        props.iconFiletypes = model.iconFiletypes;\n        props.showFiletypeIcon = model.showFiletypeIcon;\n        props.autoProcessQueue = model.autoProcessQueue;\n        props.useDropzone = model.useDropzone;\n        props.columns = model.columns;\n        props.idField = model.idField;\n        props.useCamera = model.useCamera;\n        props.multiple = model.multiple;\n        props.disabled = model.disabled;\n        props.postUrl = uploadUrl;\n        props.downloadUrl = downloadUrl;\n        res = /*#__PURE__*/external_react_default.a.createElement(file_control_Files, semantic_form_controls_extends({}, props, {\n          additionalParams: {\n            model: model,\n            data: data,\n            errors: errors,\n            children: children,\n            handleEvent: handleEvent,\n            parentItem: parentItem\n          }\n        }));\n      } else if (control === tree_picker_TreePicker) {\n        props.label = model.label;\n        props.defaultValue = model.defaultValue;\n        props.placeholder = model.placeholder;\n        props.selection = model.selection;\n        props.multiple = model.multiple;\n        props.search = model.search;\n        props.dataModel = model.dataModel;\n        props.clearable = model.clearable;\n        props.columns = model.columns;\n        props.paging = model.paging;\n        props.pageSize = model.pageSize;\n        props.parentIdField = model.parentIdField;\n        props.getAdditionalDataForControl = getAdditionalDataForControl;\n        props.modalCssClass = model[\'style-custommodalcss\'];\n        props.fluid = model.fluid;\n        props.disabled = model.disabled;\n        props.handleEvent = handleEvent;\n\n        if (model[\'style-modalsource\'] !== undefined) {\n          var style = {};\n          base_controls_BaseControls.getCustomStyle(model[\'style-modalsource\'], style);\n          props.modalStyle = style;\n        }\n\n        if (errors && errors[model.key] !== undefined) {\n          props.error = errors[model.key];\n        }\n\n        if (model.text) {\n          props.textFunc = new Function(\'data\', "return ".concat(model.text, ";"));\n        }\n\n        props.parentIsForm = base_controls_BaseControls.isForm(parentItem);\n        res = /*#__PURE__*/external_react_default.a.createElement(tree_picker_TreePicker, props);\n      } else if (control === rich_text_editor_RichTextEditorControl) {\n        res = /*#__PURE__*/external_react_default.a.createElement(rich_text_editor_RichTextEditorControl, semantic_form_controls_extends({}, props, {\n          additionalParams: {\n            model: model,\n            data: data,\n            errors: errors,\n            children: children,\n            handleEvent: handleEvent,\n            parentItem: parentItem,\n            uploadUrl: uploadUrl,\n            downloadUrl: downloadUrl\n          }\n        }));\n      } else if (control === card_Card) {\n        props.header = replaceControlValue(model.header);\n        props.subheader = replaceControlValue(model.subheader);\n        props.imgurl = replaceControlValue(model.imgurl);\n        props.placeholders = model.placeholders;\n        props.activeEvent = model.events && model.events["onClick"] && model.events["onClick"].active;\n        this.setCreateControlsProps(props, {\n          data: data,\n          buildermode: buildermode,\n          model: model,\n          children: children,\n          getFormFunc: getFormFunc,\n          getAdditionalDataForControl: getAdditionalDataForControl,\n          disableRefs: disableRefs,\n          uploadUrl: uploadUrl,\n          downloadUrl: downloadUrl,\n          extendedData: extendedData,\n          controlsToReplace: controlsToReplace,\n          eventOnEdit: eventOnEdit,\n          eventOnDelete: eventOnDelete,\n          eventOnCopy: eventOnCopy,\n          adaptiveViewType: adaptiveViewType,\n          handleEvent: handleEvent,\n          externalControlList: externalControlList,\n          externalControlRender: externalControlRender,\n          needCheckReplace: needCheckReplace,\n          readOnly: readOnly,\n          readOnlyControls: readOnlyControls,\n          errors: errors\n        });\n        res = /*#__PURE__*/external_react_default.a.createElement(card_Card, props);\n      } else {\n        var customRenderer = externalControlRender || dwKitExternalControlRender();\n\n        if (customRenderer) {\n          props.parentIsForm = base_controls_BaseControls.isForm(parentItem);\n          res = customRenderer(parentComponent, control, {\n            model: model,\n            data: data,\n            errors: errors,\n            parentItem: parentItem,\n            buildermode: buildermode,\n            children: children,\n            handleEvent: handleEvent,\n            getAdditionalDataForControl: getAdditionalDataForControl,\n            readOnlyControls: readOnlyControls,\n            readOnly: readOnly,\n            disableRefs: disableRefs,\n            uploadUrl: uploadUrl,\n            downloadUrl: downloadUrl,\n            extendedData: extendedData,\n            controlsToReplace: controlsToReplace,\n            needCheckReplace: needCheckReplace,\n            eventOnEdit: eventOnEdit,\n            eventOnDelete: eventOnDelete,\n            eventOnCopy: eventOnCopy,\n            controlProps: props,\n            replaceControlValue: replaceControlValue\n          });\n        }\n\n        if (!res) {\n          console.error(\'Control is unsupported!\', control, model);\n        }\n      }\n\n      var content = "";\n      var className = "";\n      var key = model.key + \'-tooltip\';\n      var popupOn = \'hover\';\n      var popupPosition;\n      var show = false;\n      var modelKey = props.propertyName || model.key;\n\n      if (model[\'tooltip-errordisabled\'] !== true && errors && errors[modelKey] !== undefined && typeof errors[modelKey] != \'boolean\' && !Array.isArray(errors[modelKey])) {\n        popupPosition = model[\'tooltip-errorposition\'] == \'\' ? undefined : model[\'tooltip-errorposition\'];\n        popupOn = model[\'tooltip-errorshowtype\'] == \'\' ? undefined : model[\'tooltip-errorshowtype\'];\n        className = \'dwkit-tooltiperror\';\n        content = errors[modelKey];\n        show = true;\n      } else if (model[\'tooltip-enabled\']) {\n        popupPosition = model[\'tooltip-showtype\'] == \'\' ? undefined : model[\'tooltip-showtype\'];\n        popupOn = model[\'tooltip-position\'] == \'\' ? undefined : model[\'tooltip-position\'];\n        className = \'tooltip-classname\';\n        content = model[\'tooltip-content\'];\n        show = true;\n      }\n\n      return draw(\'popup\', {\n        trigger: res,\n        className: className,\n        content: content,\n        key: key,\n        popupOn: popupOn,\n        popupPosition: popupPosition,\n        show: show\n      });\n    }\n  }, {\n    key: "createCollectionEditorControl",\n    value: function createCollectionEditorControl(parentControl, databuildertype, parameters, controlBarParams) {\n      var _parentControl$props, _parentControl$props2;\n\n      var externalControlList = (_parentControl$props = parentControl.props) === null || _parentControl$props === void 0 ? void 0 : _parentControl$props.externalControlList;\n      var externalControlRender = (_parentControl$props2 = parentControl.props) === null || _parentControl$props2 === void 0 ? void 0 : _parentControl$props2.externalControlRender;\n      var control = this.getControlByType(databuildertype, externalControlList);\n\n      if (!control) {\n        console.error(\'Control is unsupported!\', databuildertype, parentControl, parameters);\n        return;\n      }\n\n      var item = this.createControl(parentControl, control, semantic_form_controls_objectSpread(semantic_form_controls_objectSpread({}, parameters), {}, {\n        needCheckReplace: true,\n        externalControlList: externalControlList,\n        externalControlRender: externalControlRender\n      }));\n      var res = [];\n\n      if (parameters.buildermode) {\n        var builderControl = /*#__PURE__*/external_react_default.a.createElement(control_bar_ControlBar, {\n          key: parameters.model.key + \'_controlbar\',\n          model: parameters.model,\n          parent: controlBarParams.parentComponent,\n          onDelete: controlBarParams.eventOnDelete,\n          onEdit: controlBarParams.eventOnEdit,\n          onCopy: controlBarParams.eventOnCopy,\n          control: item,\n          builderActions: this.builderActions\n        });\n        res.push(builderControl);\n        return res;\n      }\n\n      return item;\n    }\n  }, {\n    key: "getPlatformContainerControl",\n    value: function getPlatformContainerControl() {\n      return \'div\';\n    }\n  }]);\n\n  return SemanticFormControls;\n}(base_controls_BaseControls);\n\n\n// CONCATENATED MODULE: ./src/builder/semantic-web/viewer-controls-factory.js\n\n\n\nfunction createViewerSemanticControls(builderActions) {\n  var items = getItems();\n  return new semantic_form_controls_SemanticFormControls(builderActions, items);\n}\n// CONCATENATED MODULE: ./src/builder/semantic-web/dwkit-semantic-form.js\nfunction dwkit_semantic_form_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { dwkit_semantic_form_typeof = function _typeof(obj) { return typeof obj; }; } else { dwkit_semantic_form_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return dwkit_semantic_form_typeof(obj); }\n\nfunction dwkit_semantic_form_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction dwkit_semantic_form_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction dwkit_semantic_form_createClass(Constructor, protoProps, staticProps) { if (protoProps) dwkit_semantic_form_defineProperties(Constructor.prototype, protoProps); if (staticProps) dwkit_semantic_form_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction dwkit_semantic_form_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) dwkit_semantic_form_setPrototypeOf(subClass, superClass); }\n\nfunction dwkit_semantic_form_setPrototypeOf(o, p) { dwkit_semantic_form_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return dwkit_semantic_form_setPrototypeOf(o, p); }\n\nfunction dwkit_semantic_form_createSuper(Derived) { var hasNativeReflectConstruct = dwkit_semantic_form_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = dwkit_semantic_form_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = dwkit_semantic_form_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return dwkit_semantic_form_possibleConstructorReturn(this, result); }; }\n\nfunction dwkit_semantic_form_possibleConstructorReturn(self, call) { if (call && (dwkit_semantic_form_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return dwkit_semantic_form_assertThisInitialized(self); }\n\nfunction dwkit_semantic_form_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction dwkit_semantic_form_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction dwkit_semantic_form_getPrototypeOf(o) { dwkit_semantic_form_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return dwkit_semantic_form_getPrototypeOf(o); }\n\n\n\n\n\nvar dwkit_semantic_form_DWKitSemanticForm = /*#__PURE__*/function (_DWKitWebForm) {\n  dwkit_semantic_form_inherits(DWKitSemanticForm, _DWKitWebForm);\n\n  var _super = dwkit_semantic_form_createSuper(DWKitSemanticForm);\n\n  function DWKitSemanticForm(props) {\n    var _this;\n\n    dwkit_semantic_form_classCallCheck(this, DWKitSemanticForm);\n\n    _this = _super.call(this, props);\n    var builderActions = createActions();\n    var semanticControlsInstance = createViewerSemanticControls(builderActions);\n\n    _this.createControls = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return semanticControlsInstance.createControls.apply(semanticControlsInstance, args);\n    };\n\n    return _this;\n  }\n\n  dwkit_semantic_form_createClass(DWKitSemanticForm, [{\n    key: "render",\n    value: function render() {\n      var _this2 = this;\n\n      var className = \'dwkit-form ui form\' + (this.props.className === undefined ? \'\' : \' \' + this.props.className);\n      var items = this.getItemsForRender();\n      return /*#__PURE__*/external_react_default.a.createElement("div", {\n        className: className,\n        ref: function ref(currentElement) {\n          _this2.currentElement = currentElement;\n        }\n      }, items);\n    }\n  }, {\n    key: "print",\n    value: function print(title) {\n      if (!this.currentElement) return;\n      var source = this.currentElement.innerHTML;\n      var options = "toolbar=no,location=no,directories=no,status=no,scrollbars=yes,resizable=yes";\n      var win = window.open("", this.props.formName, options);\n\n      if (!title) {\n        win.document.title = this.props.formName;\n      }\n\n      win.document.title = title ? title : "PrintForm";\n      var stylenotprint = "<style type=\'text/css\'>body, html { height: auto!important; width:auto!important;} body{margin:10px!important;} .dwkit-notprint{display:none!important;}</style>";\n      win.document.head.insertAdjacentHTML("beforeend", stylenotprint);\n      var styles = document.getElementsByTagName("style");\n\n      for (var i = 0; i < styles.length; i++) {\n        var style = styles[i];\n        var el = "<style>" + style.innerHTML + "</style>";\n        win.document.head.insertAdjacentHTML("beforeend", el);\n      }\n\n      var links = document.getElementsByTagName("link");\n\n      for (var i = 0; i < links.length; i++) {\n        var link = links[i];\n\n        if (link.rel == "stylesheet") {\n          var el = \'<link href="\' + link.href + \'" rel="stylesheet" type="text/css" />\';\n          win.document.head.insertAdjacentHTML("beforeend", el);\n        }\n      }\n\n      win.document.body.innerHTML = source;\n      var images = win.document.getElementsByTagName("img");\n\n      for (var i = 0; i < images.length; i++) {\n        var image = images[i];\n\n        if (!image.src) {\n          if (image.attributes["src"]) {\n            var imgurl = image.attributes["src"].value;\n\n            if (imgurl && imgurl.length > 1) {\n              image.src = location.origin + (imgurl[0] != "/" ? "/" : "") + imgurl;\n            }\n          }\n        }\n      }\n\n      win.focus();\n      setTimeout(function () {\n        win.print();\n      }, 1000);\n    }\n  }]);\n\n  return DWKitSemanticForm;\n}(DWKitWebForm);\n\n\n// CONCATENATED MODULE: ./src/form.js\nfunction form_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { form_typeof = function _typeof(obj) { return typeof obj; }; } else { form_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return form_typeof(obj); }\n\nfunction form_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction form_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) form_setPrototypeOf(subClass, superClass); }\n\nfunction form_setPrototypeOf(o, p) { form_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return form_setPrototypeOf(o, p); }\n\nfunction form_createSuper(Derived) { var hasNativeReflectConstruct = form_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = form_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = form_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return form_possibleConstructorReturn(this, result); }; }\n\nfunction form_possibleConstructorReturn(self, call) { if (call && (form_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return form_assertThisInitialized(self); }\n\nfunction form_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction form_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction form_getPrototypeOf(o) { form_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return form_getPrototypeOf(o); }\n\n\n\nvar DWKitForm = /*#__PURE__*/function (_DWKitSemanticForm) {\n  form_inherits(DWKitForm, _DWKitSemanticForm);\n\n  var _super = form_createSuper(DWKitForm);\n\n  function DWKitForm() {\n    form_classCallCheck(this, DWKitForm);\n\n    return _super.apply(this, arguments);\n  }\n\n  return DWKitForm;\n}(dwkit_semantic_form_DWKitSemanticForm);\n\n\n// CONCATENATED MODULE: ./src/components/semantic-web/edit-control/base-edit-control.jsx\nfunction base_edit_control_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { base_edit_control_typeof = function _typeof(obj) { return typeof obj; }; } else { base_edit_control_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return base_edit_control_typeof(obj); }\n\nfunction base_edit_control_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction base_edit_control_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction base_edit_control_createClass(Constructor, protoProps, staticProps) { if (protoProps) base_edit_control_defineProperties(Constructor.prototype, protoProps); if (staticProps) base_edit_control_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction base_edit_control_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) base_edit_control_setPrototypeOf(subClass, superClass); }\n\nfunction base_edit_control_setPrototypeOf(o, p) { base_edit_control_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return base_edit_control_setPrototypeOf(o, p); }\n\nfunction base_edit_control_createSuper(Derived) { var hasNativeReflectConstruct = base_edit_control_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = base_edit_control_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = base_edit_control_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return base_edit_control_possibleConstructorReturn(this, result); }; }\n\nfunction base_edit_control_possibleConstructorReturn(self, call) { if (call && (base_edit_control_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return base_edit_control_assertThisInitialized(self); }\n\nfunction base_edit_control_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction base_edit_control_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction base_edit_control_getPrototypeOf(o) { base_edit_control_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return base_edit_control_getPrototypeOf(o); }\n\n/* eslint-disable eqeqeq */\n\n\n\n\nvar base_edit_control_BaseEditControl = /*#__PURE__*/function (_Component) {\n  base_edit_control_inherits(BaseEditControl, _Component);\n\n  var _super = base_edit_control_createSuper(BaseEditControl);\n\n  function BaseEditControl(props) {\n    var _this;\n\n    base_edit_control_classCallCheck(this, BaseEditControl);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      activeItem: \'general\',\n      defaultValuePreferInt: false\n    };\n    _this.menuItems = [{\n      key: \'general\',\n      name: \'general\',\n      content: _this.getLocalValue(\'generaltab\', \'General\'),\n      active: true,\n      onClick: _this.handleItemClick.bind(base_edit_control_assertThisInitialized(_this))\n    }, {\n      key: \'style\',\n      name: \'style\',\n      content: _this.getLocalValue(\'styletab\', \'Style\'),\n      active: false,\n      onClick: _this.handleItemClick.bind(base_edit_control_assertThisInitialized(_this))\n    }, {\n      key: \'events\',\n      name: \'events\',\n      content: _this.getLocalValue(\'eventstab\', \'Events\'),\n      active: false,\n      onClick: _this.handleItemClick.bind(base_edit_control_assertThisInitialized(_this))\n    }, {\n      key: \'tooltip\',\n      name: \'tooltip\',\n      content: _this.getLocalValue(\'tooltiptab\', \'Tooltip\'),\n      active: false,\n      onClick: _this.handleItemClick.bind(base_edit_control_assertThisInitialized(_this))\n    }, {\n      key: \'other\',\n      name: \'other\',\n      content: _this.getLocalValue(\'othertab\', \'Other\'),\n      active: false,\n      onClick: _this.handleItemClick.bind(base_edit_control_assertThisInitialized(_this))\n    }];\n    return _this;\n  }\n\n  base_edit_control_createClass(BaseEditControl, [{\n    key: "getLocalValue",\n    value: function getLocalValue(key, defaultvalue, formname) {\n      var local = this.props.localization;\n      var block = isDefined(formname) ? formname : \'base\';\n\n      if (isUndefined(local) || isUndefined(local[block]) || isUndefined(local[block][key])) {\n        return defaultvalue;\n      }\n\n      return local[block][key];\n    }\n  }, {\n    key: "handleItemClick",\n    value: function handleItemClick(e, _ref) {\n      var name = _ref.name;\n      this.setState({\n        activeItem: name\n      });\n    }\n  }, {\n    key: "getDescription",\n    value: function getDescription() {\n      var activeItem = this.state.activeItem;\n      this.menuItems.forEach(function (item) {\n        item.active = item.name === activeItem;\n      });\n      return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Modal"].Description, null, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Menu"], {\n        key: "descriptionMenu",\n        pointing: true,\n        secondary: true,\n        items: this.menuItems\n      }), this.getDetailDescription(activeItem));\n    }\n  }, {\n    key: "getDetailDescription",\n    value: function getDetailDescription(activeItem) {\n      var segment;\n\n      if (activeItem === \'general\') {\n        segment = this.getGeneralDescription();\n      } else if (activeItem === \'style\') {\n        segment = this.getStyleDescription();\n      } else if (activeItem === \'events\') {\n        segment = this.getEventsDescription();\n      } else if (activeItem === \'tooltip\') {\n        segment = this.getToolTipDescription();\n      } else if (activeItem === \'other\') {\n        segment = this.getOtherDescription();\n      }\n\n      return segment;\n    }\n  }, {\n    key: "getGeneralDescription",\n    value: function getGeneralDescription() {\n      var data = this.props.data;\n      var handleChange = this.props.parent.handleChange.bind(this.props.parent);\n      return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"], {\n        key: "generalDescriptionForm"\n      }, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Input, {\n        key: "name",\n        label: "Name",\n        name: "key",\n        value: data.key,\n        onChange: handleChange\n      }));\n    }\n  }, {\n    key: "getStyleDescription",\n    value: function getStyleDescription() {\n      var data = this.props.data;\n      var handleChange = this.props.parent.handleChange.bind(this.props.parent);\n      var stylesource_ps = \'/*** Example Code ***/\\ncolor:red;\\npaddingTop:5px;\';\n      var showtypes = [{\n        text: this.getLocalValue(\'adaptivedefault\', \'Any\'),\n        value: \'\'\n      }, {\n        text: this.getLocalValue(\'adaptivedesctop\', \'Desktop\'),\n        value: \'desktop\'\n      }, {\n        text: this.getLocalValue(\'adaptivemobile\', \'Mobile\'),\n        value: \'mobile\'\n      }];\n      return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"], {\n        key: "styleDescriptionForm"\n      }, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Group, {\n        widths: "equal"\n      }, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Input, {\n        name: "style-width",\n        label: this.getLocalValue(\'widthfield\', \'Width\'),\n        placeholder: "100px",\n        value: data[\'style-width\'],\n        onChange: handleChange\n      }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Input, {\n        name: "style-height",\n        label: this.getLocalValue(\'heightfield\', \'Height\'),\n        placeholder: "100px",\n        value: data[\'style-height\'],\n        onChange: handleChange\n      })), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Group, {\n        widths: "equal"\n      }, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Input, {\n        name: "style-marginTop",\n        label: this.getLocalValue(\'margintopfield\', \'Margin Top\'),\n        placeholder: "0px",\n        value: data[\'style-marginTop\'],\n        onChange: handleChange\n      }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Input, {\n        name: "style-marginBottom",\n        label: this.getLocalValue(\'marginbottomfield\', \'Margin Bottom\'),\n        placeholder: "0px",\n        value: data[\'style-marginBottom\'],\n        onChange: handleChange\n      }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Input, {\n        name: "style-marginLeft",\n        label: this.getLocalValue(\'marginleftfield\', \'Margin Left\'),\n        placeholder: "0px",\n        value: data[\'style-marginLeft\'],\n        onChange: handleChange\n      }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Input, {\n        name: "style-marginRight",\n        label: this.getLocalValue(\'marginrightfield\', \'Margin Right\'),\n        placeholder: "0px",\n        value: data[\'style-marginRight\'],\n        onChange: handleChange\n      })), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Input, {\n        name: "style-customcss",\n        label: this.getLocalValue(\'customcssclassfield\', \'Custom CSS class\'),\n        placeholder: "dwkit-application-css (without \'.\')",\n        value: data[\'style-customcss\'],\n        onChange: handleChange\n      }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].TextArea, {\n        name: "style-source",\n        label: this.getLocalValue(\'stylefield\', \'Style\'),\n        placeholder: stylesource_ps,\n        value: data[\'style-source\'],\n        onChange: handleChange\n      }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Group, null, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Checkbox, {\n        name: "style-hidden",\n        label: this.getLocalValue(\'hiddenfield\', \'Hidden\'),\n        checked: data["style-hidden"],\n        onChange: handleChange\n      }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Checkbox, {\n        name: "style-hiddeninprint",\n        label: this.getLocalValue(\'hiddeninprintfield\', \'Hidden in Print mode\'),\n        checked: data["style-hiddeninprint"],\n        onChange: handleChange\n      })), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Checkbox, {\n        name: "style-adaptive",\n        label: this.getLocalValue(\'adaptivefield\', \'Adaptive Layout\'),\n        checked: data[\'style-adaptive\'],\n        onChange: handleChange\n      }), data[\'style-adaptive\'] && /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Dropdown, {\n        name: "style-renderwhen",\n        selection: true,\n        fluid: true,\n        search: true,\n        options: showtypes,\n        placeholder: "Any",\n        label: this.getLocalValue(\'style-renderwhenfield\', \'Render when\'),\n        value: data[\'style-renderwhen\'],\n        onChange: handleChange\n      }), data[\'style-adaptive\'] && /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].TextArea, {\n        name: "style-mobilesource",\n        label: this.getLocalValue(\'mobilesourcefield\', \'Mobile style\'),\n        placeholder: stylesource_ps,\n        value: data[\'style-mobilesource\'],\n        onChange: handleChange\n      }));\n    }\n  }, {\n    key: "getEventsList",\n    value: function getEventsList() {\n      return [];\n    }\n  }, {\n    key: "getEventsDescription",\n    value: function getEventsDescription() {\n      var data = this.props.data;\n\n      if (isUndefined(data.events)) {\n        data.events = {};\n      }\n\n      var handleChange = this.props.parent.handleChange.bind(this.props.parent);\n      var actions = this.props.actions;\n      var events = this.getEventsList();\n      var content;\n\n      if (!Array.isArray(events) || events.length === 0) {\n        content = /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Message"], {\n          icon: true\n        }, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Icon"], {\n          name: "info"\n        }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Message"].Content, null, this.getLocalValue(\'controlhasnoeventsmsg\', \'This control has no events.\')));\n      } else {\n        var controlsOnForm = this.props.parent.getControlsList();\n        var listControls = [];\n\n        for (var i = 0; i < controlsOnForm.length; i++) {\n          if (data.key === controlsOnForm[i]) {\n            continue;\n          }\n\n          listControls.push({\n            text: controlsOnForm[i],\n            value: controlsOnForm[i]\n          });\n        }\n\n        content = /*#__PURE__*/external_react_default.a.createElement(events_editor_EventsEditor, {\n          key: "events",\n          name: "events",\n          data: data.events,\n          events: events,\n          actions: actions,\n          targets: listControls,\n          onAdditionActions: this.handleAdditionActions.bind(this),\n          onChange: handleChange\n        });\n      }\n\n      var timeout = null;\n\n      if (events.includes(\'onChange\')) {\n        timeout = /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Input, {\n          name: "onChangeTimeout",\n          style: {\n            width: 100\n          },\n          placeholder: \'0\',\n          type: \'number\',\n          label: this.getLocalValue(\'onchangetimeout\', \'onChange timeout\'),\n          value: data.onChangeTimeout,\n          onChange: handleChange\n        });\n      }\n\n      return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"], {\n        key: "eventsDescriptionForm"\n      }, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Message"], {\n        icon: true\n      }, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Icon"], {\n        name: "info"\n      }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Message"].Content, null, this.getLocalValue(\'eventsinfomsg\', \'These flags enable processing from this element.\'))), timeout, content);\n    }\n  }, {\n    key: "getToolTipDescription",\n    value: function getToolTipDescription() {\n      var toolTipPositions = [{\n        text: this.getLocalValue(\'tooltipdefault\', \'Default\'),\n        value: \'\'\n      }, {\n        text: this.getLocalValue(\'tooltiptopcenter\', \'Top Center\'),\n        value: \'top center\'\n      }, {\n        text: this.getLocalValue(\'tooltiptopleft\', \'Top Left\'),\n        value: \'top left\'\n      }, {\n        text: this.getLocalValue(\'tooltiptopright\', \'Top Right\'),\n        value: \'top right\'\n      }, {\n        text: this.getLocalValue(\'tooltipbottomcenter\', \'Bottom Center\'),\n        value: \'bottom center\'\n      }, {\n        text: this.getLocalValue(\'tooltipbottomleft\', \'Bottom Left\'),\n        value: \'bottom left\'\n      }, {\n        text: this.getLocalValue(\'tooltipbottomright\', \'Bottom right\'),\n        value: \'bottom right\'\n      }, {\n        text: this.getLocalValue(\'tooltiprightright\', \'Right Center\'),\n        value: \'right center\'\n      }, {\n        text: this.getLocalValue(\'tooltipleftcenter\', \'Left Center\'),\n        value: \'left center\'\n      }];\n      var showtypes = [{\n        text: this.getLocalValue(\'tooltipdefault\', \'Default\'),\n        value: \'\'\n      }, {\n        text: this.getLocalValue(\'tooltiphover\', \'Hover\'),\n        value: \'hover\'\n      }, {\n        text: this.getLocalValue(\'tooltipclick\', \'Click\'),\n        value: \'click\'\n      }, {\n        text: this.getLocalValue(\'tooltipfocus\', \'Focus\'),\n        value: \'focus\'\n      }];\n      var data = this.props.data;\n      var handleChange = this.props.parent.handleChange.bind(this.props.parent);\n      var tooltipart = data[\'tooltip-enabled\'] ? /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Segment"], {\n        vertical: true\n      }, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Checkbox, {\n        name: "tooltip-enabled",\n        label: this.getLocalValue(\'tooltipenabledfield\', \'Enabled\'),\n        checked: data[\'tooltip-enabled\'],\n        onChange: handleChange\n      }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Input, {\n        name: "tooltip-header",\n        label: this.getLocalValue(\'tooltipheaderfield\', \'Tooltip Header\'),\n        value: data[\'tooltip-header\'],\n        onChange: handleChange\n      }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Input, {\n        name: "tooltip-content",\n        label: this.getLocalValue(\'tooltipcontentfield\', \'Tooltip Content\'),\n        value: data[\'tooltip-content\'],\n        onChange: handleChange\n      }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Group, null, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Input, {\n        name: "tooltip-classname",\n        label: this.getLocalValue(\'tooltipclassnamefield\', \'ClassName\'),\n        value: data[\'tooltip-classname\'],\n        onChange: handleChange\n      }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Dropdown, {\n        name: "tooltip-showtype",\n        selection: true,\n        fluid: true,\n        search: true,\n        options: showtypes,\n        placeholder: "Default",\n        label: this.getLocalValue(\'tooltipshowtypefield\', \'Tooptip showing type\'),\n        value: data[\'tooltip-showtype\'],\n        onChange: handleChange\n      }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Dropdown, {\n        name: "tooltip-position",\n        selection: true,\n        fluid: true,\n        search: true,\n        options: toolTipPositions,\n        placeholder: "Default",\n        label: this.getLocalValue(\'tooltippositionfield\', \'Tooptip position\'),\n        value: data[\'tooltip-position\'],\n        onChange: handleChange\n      }))) : /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Segment"], {\n        vertical: true\n      }, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Checkbox, {\n        name: "tooltip-enabled",\n        label: this.getLocalValue(\'tooltipenabledfield\', \'Enabled\'),\n        checked: data[\'tooltip-enabled\'],\n        onChange: handleChange\n      }));\n      return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"], {\n        key: "tooltipDescriptionForm"\n      }, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Segment"], {\n        vertical: true\n      }, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Group, null, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Checkbox, {\n        name: "tooltip-errordisabled",\n        label: this.getLocalValue(\'errortooltipdisabledfield\', \'Disable error tooptip\'),\n        checked: data[\'tooltip-errordisabled\'],\n        onChange: handleChange\n      }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Dropdown, {\n        name: "tooltip-errorshowtype",\n        selection: true,\n        fluid: true,\n        search: true,\n        options: showtypes,\n        placeholder: "Default",\n        label: this.getLocalValue(\'tooltiperrorshowtypefield\', \'Error tooptip showing type\'),\n        value: data[\'tooltip-errorshowtype\'],\n        onChange: handleChange\n      }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Dropdown, {\n        name: "tooltip-errorposition",\n        selection: true,\n        fluid: true,\n        search: true,\n        options: toolTipPositions,\n        placeholder: "Default",\n        label: this.getLocalValue(\'errortooltippositionfield\', \'Error tooptip position\'),\n        value: data[\'tooltip-errorposition\'],\n        onChange: handleChange\n      }))), tooltipart);\n    }\n  }, {\n    key: "getOtherDescription",\n    value: function getOtherDescription() {\n      var data = this.props.data;\n      var handleChange = this.props.parent.handleChange.bind(this.props.parent);\n      var customvalidation_ps = \'/*** Example Code ***/\\nvalue > 10 ? true : \\\'Must be more 10\\\'\';\n      var visibleconition_ps = \'/*** Example Code ***/\\ndata.type == 1 ? true : false\';\n      var readOnlyconition_ps = \'/*** Example Code ***/\\ndata.type == 1 ? true : false\';\n      var defaultValueHandle = this.state.defaultValuePreferInt ? function (e, _ref2) {\n        var name = _ref2.name,\n            value = _ref2.value;\n\n        if (value && value.match && value.match(/^-?\\d+$/)) {\n          value = parseInt(value);\n        }\n\n        handleChange(e, {\n          name: name,\n          value: value\n        });\n      } : handleChange;\n      var columns = [{\n        key: \'name\',\n        name: this.getLocalValue(\'nameColumn\', \'Name\', \'attributesForm\')\n      }, {\n        key: \'value\',\n        name: this.getLocalValue(\'valueColumn\', \'Value\', \'attributesForm\')\n      }];\n      return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"], {\n        key: "otherDescriptionForm"\n      }, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Input, {\n        name: "propertyName",\n        label: this.getLocalValue(\'propertynamefield\', \'Property Name\'),\n        value: data[\'propertyName\'],\n        onChange: handleChange\n      }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Checkbox, {\n        name: "other-required",\n        label: this.getLocalValue(\'requiredfield\', \'Required\'),\n        checked: data[\'other-required\'],\n        onChange: handleChange\n      }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].Input, {\n        name: "defaultValue",\n        label: this.getLocalValue(\'defaultvaluefield\', \'Default value\'),\n        value: data[\'defaultValue\'],\n        onChange: defaultValueHandle\n      }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].TextArea, {\n        name: "other-customValidation",\n        label: this.getLocalValue(\'customvalidationfield\', \'Custom Validation\'),\n        placeholder: customvalidation_ps,\n        value: data[\'other-customValidation\'],\n        onChange: handleChange\n      }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].TextArea, {\n        name: "other-visibleConition",\n        label: this.getLocalValue(\'visibleconditionfield\', \'Visible condition\'),\n        placeholder: visibleconition_ps,\n        value: data[\'other-visibleConition\'],\n        onChange: handleChange\n      }), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Form"].TextArea, {\n        name: "other-readOnlyConition",\n        label: this.getLocalValue(\'readonlyconditionfield\', \'ReadOnly condition\'),\n        placeholder: readOnlyconition_ps,\n        value: data[\'other-readOnlyConition\'],\n        onChange: handleChange\n      }), /*#__PURE__*/external_react_default.a.createElement(collection_editor_CollectionEditor, {\n        label: this.getLocalValue(\'label\', \'HTML attributes\', \'attributesForm\'),\n        name: "attributes",\n        value: data["attributes"],\n        columns: columns,\n        onChange: handleChange\n      }));\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      return /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Modal"], {\n        dimmer: "inverted",\n        open: this.props.open,\n        onClose: this.props.onClose.bind(this.props.parent)\n      }, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Modal"].Content, null, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Modal"].Description, null, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Label"], {\n        className: "dwkit-formbuilder-editform-controltype"\n      }, this.props.data[\'data-buildertype\']), this.getDescription())), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Modal"].Actions, null, /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Button"], {\n        className: "buttontype1",\n        onClick: this.props.onSave.bind(this.props.parent)\n      }, this.getLocalValue(\'savebutton\', \'Save\')), /*#__PURE__*/external_react_default.a.createElement(external_semantic_ui_react_["Button"], {\n        className: "buttontype2",\n        onClick: this.props.onClose.bind(this.props.parent)\n      }, this.getLocalValue(\'cancelbutton\', \'Cancel\'))));\n    }\n  }, {\n    key: "checkActionsList",\n    value: function checkActionsList(value) {\n      var isExists = false;\n\n      for (var i = 0; i < this.props.actions.length; i++) {\n        if (this.props.actions[i] == value) {\n          isExists = true;\n          break;\n        }\n      }\n\n      if (!isExists) {\n        this.props.actions.push({\n          text: value,\n          value: value\n        });\n      }\n    }\n  }, {\n    key: "handleAdditionActions",\n    value: function handleAdditionActions(e, _ref3) {\n      var value = _ref3.value;\n      this.checkActionsList(value);\n      this.forceUpdate();\n    }\n  }]);\n\n  return BaseEditControl;\n}(external_react_["Component"]);\n\n\n// CONCATENATED MODULE: ./form.js\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///31\n')}],e={},f.m=d,f.c=e,f.d=function(Q,I,C){f.o(Q,I)||Object.defineProperty(Q,I,{enumerable:!0,get:C})},f.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},f.t=function(I,Q){if(1&Q&&(I=f(I)),8&Q)return I;if(4&Q&&"object"==typeof I&&I&&I.__esModule)return I;var C=Object.create(null);if(f.r(C),Object.defineProperty(C,"default",{enumerable:!0,value:I}),2&Q&&"string"!=typeof I)for(var F in I)f.d(C,F,function(Q){return I[Q]}.bind(null,F));return C},f.n=function(Q){var I=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return f.d(I,"a",I),I},f.o=function(Q,I){return Object.prototype.hasOwnProperty.call(Q,I)},f.p="",f(f.s=31);function f(Q){if(e[Q])return e[Q].exports;var I=e[Q]={i:Q,l:!1,exports:{}};return d[Q].call(I.exports,I,I.exports,f),I.l=!0,I.exports}var d,e});